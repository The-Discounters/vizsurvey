{"version":3,"sources":["features/questionSlice.js","app/store.js","components/MELForm.js","hooks/useD3.js","components/BarChart.js","components/Calendar.js","components/Survey.js","components/QueryParam.js","footer.js","App.js","reportWebVitals.js","index.js"],"names":["gistToken","atob","process","REACT_APP_AUTH_TOKEN","gistAnswerId","REACT_APP_GIST_ANSWER_ID","gistQuestionURL","REACT_APP_GIST_QUESTION_URL","Answer","Status","ViewType","Enumify","word","barchart","calendar","_","closeEnum","fetchQuestions","createAsyncThunk","questionSetId","a","csv","response","forEach","e","view_type","enumValueOf","question_set_id","position","amount_earlier","time_earlier","date_earlier","Date","amount_later","time_later","date_later","max_amount","max_time","horizontal_pixels","vertical_pixels","choice","answer_time","undefined","participant_id","result","filter","d","writeAnswers","answersCSV","getState","state","octokit","Octokit","userAgent","auth","url","now","DateTime","toFormat","files","questions","content","description","console","log","payloadObj","gist_id","request","status","questionSlice","createSlice","name","initialState","currentQuestion","error","reducers","setParticipant","action","payload","setQuestionSet","answer","length","nextQuestion","previousQuestion","extraReducers","builder","addCase","pending","fulfilled","rejected","selectAllQuestions","selectCurrentQuestion","fetchStatus","actions","store","configureStore","reducer","questionReducer","MELForm","dispatch","useDispatch","question","useSelector","question1stPartText","sooner_time","initialValues","validate","values","errors","onSubmit","setSubmitting","resetForm","setTimeout","isSubmitting","role","className","type","value","style","color","fontWeight","component","Button","disabled","to","useD3","renderChartFn","dependencies","ref","React","useRef","useEffect","d3","current","BarChart","props","height","width","margin","top","top_margin","right","right_margin","bottom","bottom_margin","left","left_margin","parseInt","marginLeft","marginRight","xTickValues","Array","from","keys","data","map","time","amount","svg","chart","selectAll","join","attr","x","scaleLinear","domain","range","yRange","y","call","axisBottom","tickValues","tickFormat","yTickValues","push","axisLeft","barWidth","on","target","__data__","calendarMatrix","require","Calendar","id","table","monthDays","monthName","getMonth","html","select","text","rows","earlierDay","getDate","laterDay","earlier_amount","Survey","Container","fluid","Row","Col","QueryParam","loadingStatus","search","useLocation","participantId","URLSearchParams","get","Footer","version","comment","App","Navbar","bg","variant","expand","Brand","as","Link","Toggle","Collapse","Nav","Item","href","exact","path","Home","ThankYou","answers","concat","convertToCSV","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0c9ef19.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { csv, max } from \"d3\";\nimport { Octokit } from \"octokit\";\nimport { DateTime } from \"luxon\";\nimport { Enumify } from \"enumify\";\n\n// eslint-disable-next-line no-undef\nconst gistToken = atob(process.env.REACT_APP_AUTH_TOKEN);\n// eslint-disable-next-line no-undef\nconst gistAnswerId = process.env.REACT_APP_GIST_ANSWER_ID;\n// eslint-disable-next-line no-undef\nconst gistQuestionURL = process.env.REACT_APP_GIST_QUESTION_URL;\n\nexport const Answer = {\n  Unitialized: \"Unitialized\",\n  Earlier: \"Earlier\",\n  Later: \"Later\",\n};\n\nexport const Status = {\n  Unitialized: \"Unitialized\",\n  Fetching: \"Fetching\",\n  Fetched: \"Fetched\",\n  Complete: \"Complete\",\n  Error: \"Error\",\n};\n\nexport class ViewType extends Enumify {\n  static word = new ViewType();\n  static barchart = new ViewType();\n  static calendar = new ViewType();\n  static _ = this.closeEnum();\n}\n\n// Define the initial state of the store for this slicer.\nconst initialState = {\n  questions: [],\n  currentQuestion: 0,\n  question_set_id: null,\n  participant_id: null,\n  status: \"Unitialized\",\n  error: null,\n};\n\nexport const fetchQuestions = createAsyncThunk(\n  \"survey/getQuestions\",\n  async (questionSetId /*{ getState }*/) => {\n    questionSetId = +questionSetId;\n    const response = await csv(gistQuestionURL);\n    response.forEach((e) => {\n      e.view_type = ViewType.enumValueOf(e.view_type);\n      e.question_set_id = +e.question_set_id;\n      e.position = +e.position;\n      e.amount_earlier = +e.amount_earlier;\n      if (e.time_earlier) {\n        e.time_earlier = +e.time_earlier;\n      }\n      if (e.date_earlier) {\n        e.date_earlier = new Date(e.date_earlier);\n      }\n      e.amount_later = +e.amount_later;\n      if (e.time_later) {\n        e.time_later = +e.time_later;\n      }\n      if (e.date_later) {\n        e.date_later = new Date(e.date_later);\n      }\n      e.max_amount = +e.max_amount;\n      e.max_time = +e.max_time;\n      e.horizontal_pixels = +e.horizontal_pixels;\n      e.vertical_pixels = +e.vertical_pixels;\n      e.choice = Answer.Unitialized;\n      e.answer_time = undefined;\n      e.participant_id = undefined;\n    });\n    const result = response.filter((d) => d.question_set_id === questionSetId);\n    return result;\n  }\n);\n\nexport const writeAnswers = createAsyncThunk(\n  \"survey/writeAnswers\",\n  async (answersCSV, { getState }) => {\n    const state = getState();\n    const octokit = new Octokit({\n      userAgent: \"thesis_answers/v1.0\",\n      auth: gistToken,\n    });\n    const url = `PATCH /gists/${gistAnswerId}`;\n    const now = DateTime.now().toFormat(\"yyyy-MM-dd-H-mm-ss-SSS-ZZZZ\");\n    const files = {};\n    answersCSV = `${answersCSV}`;\n    files[`answers-subject-${state.questions.participant_id}-${now}.csv`] = {\n      content: answersCSV,\n    };\n    const description = `Answer results for participant ${state.questions.participant_id} at ${now}`;\n    console.log(\"submitting answers for \" + description);\n    const payloadObj = {\n      gist_id: gistAnswerId,\n      description: description,\n      files: files,\n    };\n    const response = await octokit.request(url, payloadObj);\n\n    const status = response.status;\n    console.log(\"answers submitted with status of \" + status);\n  }\n);\n\nexport const questionSlice = createSlice({\n  name: \"questions\", // I believe the global state is partitioned by the name value thus the terminology \"slice\"\n  initialState, // the initial state of our global data (under name slice)\n  reducers: {\n    setParticipant(state, action) {\n      if (state.participant_id === null && action.payload !== null) {\n        state.participant_id = action.payload;\n      }\n    },\n    setQuestionSet(state, action) {\n      if (state.questionSetId === null && action.payload !== null) {\n        state.question_set_id = action.payload;\n      }\n    },\n    // we define our actions on the slice of global store data here.\n    answer(state, action) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.questions[state.currentQuestion].choice = action.payload;\n      state.questions[state.currentQuestion].answer_time =\n        DateTime.now().toFormat(\"MM/dd/yyyy H:mm:ss:SSS ZZZZ\");\n      state.questions[state.currentQuestion].participant_id =\n        state.participant_id;\n      if (state.currentQuestion === state.questions.length - 1) {\n        state.status = Status.Complete;\n      } else {\n        state.currentQuestion += 1;\n      }\n    },\n    nextQuestion(state) {\n      state.questions.currentQuestion +=\n        state.currentQuestion < state.questions.length ? 1 : 0;\n    },\n    previousQuestion(state) {\n      state.currentQuestion -= state.currentQuestion > 0 ? 1 : 0;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchQuestions.pending, (state) => {\n        if (state.status === Status.Unitialized) {\n          state.status = Status.Fetching;\n        }\n      })\n      .addCase(fetchQuestions.fulfilled, (state, action) => {\n        state.questions = action.payload;\n        state.currentQuestion = 0;\n        state.status = Status.Fetched;\n      })\n      .addCase(fetchQuestions.rejected, (state, action) => {\n        if (state.status === Status.Fetched) {\n          state.status = Status.Error;\n          state.error = action.error;\n        }\n      });\n  },\n});\n\nexport const selectMaxTime = (state) => {\n  return max(state.questions.questions, (d) => d.time_later);\n};\n\nexport const selectMaxAmount = (state) => {\n  return max(state.questions.questions, (d) =>\n    d.amount_earlier > d.amount_later ? d.amount_earlier : d.amount_greater\n  );\n};\n\nexport const selectAllQuestions = (state) => {\n  return state.questions.questions;\n};\n\nexport const selectCurrentQuestion = (state) => {\n  return state.questions.questions[state.questions.currentQuestion];\n};\n\nexport const selectparticipantId = (state) => {\n  return state.participant_id;\n};\n\nexport const isLastQuestion = (state) => {\n  const result =\n    state.questions.currentQuestion === state.questions.questions.length - 1;\n  return result;\n};\n\nexport const fetchStatus = (state) => {\n  return state.questions.status;\n};\n\n// Action creators are generated for each case reducer function\nexport const {\n  answer,\n  nextQuestion,\n  previousQuestion,\n  setParticipant,\n  setQuestionSet,\n} = questionSlice.actions;\n\nexport default questionSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport questionReducer from \"../features/questionSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    questions: questionReducer,\n  },\n});\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectCurrentQuestion,\n  fetchStatus,\n  Answer,\n  answer,\n  Status,\n} from \"../features/questionSlice\";\n//import { Col, Container, Row, Media } from \"react-bootstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { Button } from \"react-bootstrap\";\n\nexport function MELForm() {\n  const dispatch = useDispatch();\n  const question = useSelector(selectCurrentQuestion);\n  const status = useSelector(fetchStatus);\n\n  // Absolute money value, delay framing (e.g., $5 today vs. $5 plus an additional $5 in 4 weeks)\n  // Relative money value, delay framing (e.g., $5 today vs. $5 plus an additional 100% in 4 weeks)\n  // Standard MEL format (e.g., $5 today vs. $10 in 4 weeks)\n  // Relative money value, speedup framing (e.g., $10 in 4 weeks vs. $10 minus 50% today)\n  // Absolute money value, speedup framing (e.g., $10 in 4 weeks vs. $10 minus $5 today)\n\n  const todayText = (sooner_time) =>\n    sooner_time === 0 ? \"today\" : `in ${sooner_time} weeks`;\n\n  // function questionText() {\n  //   return `${question1stPartText()} vs. ${question2ndPartText()}`;\n  // }\n\n  function question1stPartText() {\n    return `$${question.amount_earlier} ${todayText(question.time_earlier)}`;\n  }\n\n  function question2ndPartText() {\n    return `$${question.amount_later} in ${question.time_later} weeks`;\n  }\n\n  const result = (\n    <Formik\n      initialValues={{ choice: Answer.Unitialized }}\n      validate={(values) => {\n        let errors = {};\n        if (!values.choice || values.choice === Answer.Unitialized) {\n          errors.choice = \"Please choose a selection to continue.\";\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        setTimeout(() => {\n          dispatch(answer(values.choice));\n          setSubmitting(false);\n          resetForm();\n        }, 400);\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <div\n            role=\"group\"\n            aria-labelledby=\"my-radio-group\"\n            className=\"radio-choice-label\"\n          >\n            <label>\n              <Field type=\"radio\" name=\"choice\" value={Answer.Earlier} />\n              &nbsp;{question1stPartText()}\n            </label>\n            <br></br>\n            <label>\n              <Field type=\"radio\" name=\"choice\" value={Answer.Later} />\n              &nbsp;{question2ndPartText()}\n            </label>\n            <span style={{ color: \"red\", fontWeight: \"bold\" }}>\n              <ErrorMessage name=\"choice\" component=\"div\" />\n            </span>\n          </div>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n\n  if (status === Status.Complete) {\n    return <Redirect to=\"/thankyou\" />;\n  } else {\n    return result;\n  }\n}\n\nexport default MELForm;\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (renderChartFn, dependencies) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n\n  return ref;\n};\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectCurrentQuestion,\n  fetchStatus,\n  Answer,\n  answer,\n  Status,\n} from \"../features/questionSlice\";\n\nimport { useD3 } from \"../hooks/useD3\";\nimport * as d3 from \"d3\";\nimport { axisBottom, axisLeft, scaleLinear, range } from \"d3\";\n\nfunction BarChart(props) {\n  const dispatch = useDispatch();\n  const question = useSelector(selectCurrentQuestion);\n  const status = useSelector(fetchStatus);\n\n  const barWidth = 15;\n\n  const height = question.vertical_pixels;\n  const width = question.horizontal_pixels;\n  const margin = {\n    top: props.top_margin,\n    right: props.right_margin,\n    bottom: props.bottom_margin,\n    left: props.left_margin,\n  };\n\n  const totalHeight = height + parseInt(margin.top) + parseInt(margin.bottom);\n  const totalWidth = width + parseInt(margin.left) + parseInt(margin.right);\n\n  const style = {\n    height: totalHeight,\n    width: totalWidth,\n    marginLeft: margin.left + \"px\",\n    marginRight: margin.right + \"px\",\n  };\n\n  // const innerHeight = height - margin.bottom - margin.top;\n  // const innerWidth = width - margin.left - margin.right;\n\n  const xTickValues = Array.from(Array(question.max_time + 1).keys());\n  const data = xTickValues.map((d) => {\n    if (d == question.time_earlier) {\n      return { time: d, amount: question.amount_earlier };\n    } else if (d == question.time_later) {\n      return { time: d, amount: question.amount_later };\n    } else {\n      return { time: d, amount: 0 };\n    }\n  });\n\n  const result = (\n    <svg\n      ref={useD3(\n        (svg) => {\n          var chart = svg\n            .selectAll(\".plot-area\")\n            .data([null])\n            .join(\"g\")\n            .attr(\"class\", \"plot-area\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n          const x = scaleLinear()\n            .domain([0, question.max_time])\n            .range([0, width]);\n\n          const yRange = [0, question.max_amount];\n          const y = scaleLinear().domain(yRange).range([height, 0]);\n\n          chart\n            .selectAll(\".x-axis\")\n            .data([null])\n            .join(\"g\")\n            .attr(\"transform\", `translate(0,${height})`)\n            .attr(\"class\", \"x-axis\")\n            .call(\n              axisBottom(x)\n                .tickValues(xTickValues)\n                .tickFormat(d3.format(\",.0f\"))\n            );\n\n          const yTickValues = range(yRange[0], yRange[1], yRange[1] / 5);\n          yTickValues.push(yRange[1]);\n\n          chart\n            .selectAll(\".y-axis\")\n            .data([null])\n            .join(\"g\")\n            .attr(\"class\", \"y-axis\")\n            //.attr(\"transform\", `translate(${margin.left},${margin.bottom})`)\n            .call(\n              //axisLeft(y).tickValues(yTickValues).tickFormat(d3.format(\"$,.2f\"))\n              axisLeft(y).tickValues(yTickValues).tickFormat(d3.format(\"$,.0f\"))\n            );\n\n          // const yLabelG = svg\n          //   .select(\"#y-axis-label\")\n          //   .data([1])\n          //   .join(\"g\")\n          //   .attr(\"transform\", \"rotate(-90)\");\n\n          // .data(nullData)\n          // .join(\"text\")\n          // .attr(\"id\", \"y-axis-label\")\n          // .attr(\"text-anchor\", \"middle\")\n          // .attr(\"x\", -innerHeight / 2)\n          // .attr(\"y\", -margin.left)\n\n          // .text(\"Amount in USD\");\n\n          chart\n            // .selectAll(\".plot-area\")\n            // .attr(\"fill\", \"steelblue\")\n            // .attr(\"class\", \"plot-area\")\n            .selectAll(\".bar\")\n            .data(data)\n            .join(\"rect\")\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => x(d.time) - barWidth / 2)\n            //.attr(\"width\", x.bandwidth())\n            .attr(\"width\", barWidth)\n            .attr(\"y\", (d) => y(d.amount))\n            .on(\"click\", (d) => {\n              if (d.target.__data__.amount === question.amount_earlier) {\n                dispatch(answer(Answer.Earlier));\n              } else {\n                dispatch(answer(Answer.Later));\n              }\n            })\n            .attr(\"height\", (d) => y(0) - y(d.amount));\n        },\n        [data]\n      )}\n      style={style}\n    ></svg>\n  );\n\n  if (status === Status.Complete) {\n    return <Redirect to=\"/thankyou\" />;\n  } else {\n    return result;\n  }\n}\n\nexport default BarChart;\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentQuestion } from \"../features/questionSlice\";\n\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nvar calendarMatrix = require(\"calendar-matrix\");\n\nfunction Calendar(props) {\n  const question = useSelector(selectCurrentQuestion);\n\n  const height = question.vertical_pixels;\n  const width = question.horizontal_pixels;\n  const margin = {\n    top: props.top_margin,\n    right: props.right_margin,\n    bottom: props.bottom_margin,\n    left: props.left_margin,\n  };\n\n  const totalHeight = height + parseInt(margin.top) + parseInt(margin.bottom);\n  const totalWidth = width + parseInt(margin.left) + parseInt(margin.right);\n\n  const style = {\n    height: totalHeight,\n    width: totalWidth,\n    marginLeft: margin.left + \"px\",\n    marginRight: margin.right + \"px\",\n  };\n\n  //   const dateMonth = question.date_earlier.getMonth();\n  //   const dateYear = question.date_earlier.getFullYear();\n\n  return (\n    <table\n      id=\"calendar\"\n      ref={useD3((table) => {\n        const monthDays = calendarMatrix(question.date_earlier);\n        const monthNames = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"October\",\n          \"November\",\n          \"December\",\n        ];\n        const month = question.date_earlier.getMonth();\n        const monthName = monthNames[month];\n        table.html(\n          `<thead>\n                <tr>\n                    <td span='7'>\n                        <h2 id='currentMonth'></h2>\n                    </td>\n                </tr>\n                <tr>\n                    <td style='text-align: center;'>Sunday</td>\n                    <td style='text-align: center;'>Monday</td>\n                    <td style='text-align: center;'>Tuesday</td>\n                    <td style='text-align: center;'>Wednesday</td>\n                    <td style='text-align: center;'>Thursday</td>\n                    <td style='text-align: center;'>Friday</td>\n                    <td style='text-align: center;'>Saturday</td>\n                </tr>\n            </thead>\n            <tbody id='calendarBody'></tbody>`\n        );\n\n        const calendar = d3.select(\"#calendar\");\n\n        calendar\n          .select(\"#currentMonth\")\n          .data([monthName])\n          .join(\"h2\")\n          .text((d) => d);\n\n        const tbody = calendar.select(\"#calendarBody\");\n\n        const rows = tbody.selectAll(\"tbody\").data(monthDays).join(\"tr\");\n\n        const earlierDay = question.date_earlier.getDate();\n        const laterDay = question.date_later.getDate();\n        rows\n          .selectAll(\"td\")\n          .data((d) => d)\n          .join(\"td\")\n          .attr(\"class\", function (d) {\n            return d > 0 ? \"calendarDay\" : \"calendarDayEmpty\";\n          })\n          .attr(\"id\", (d) => \"calendarDay-\" + d)\n          .html((d) => {\n            if (d === earlierDay || d === laterDay) {\n              return `<div>${d}</div><svg id='${\n                d === earlierDay ? \"earlierAmount\" : \"laterAmount\"\n              }'></svg>`;\n            } else if (d > 0) {\n              return d;\n            } else {\n              return \"\";\n            }\n          });\n\n        const earlierAmountSVG = rows.select(\"#earlierAmount\");\n\n        earlierAmountSVG\n          .select(\"text\")\n          .data([question.earlier_amount])\n          .join(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"class\", \"earlier-amount\")\n          .text((d) => d);\n\n        //   .text(function (d) {\n        //     return d > 0 ? d : \"\";\n        //   });\n\n        // const cellId = \"#calendarDay-\" + question.date_earlier.getDay();\n        // const earlierDayCell = rows.select(cellId);\n        // const earlierDayHTML = `<td id=\"${cellId}`\n\n        // earlierDayCell.html(earlierDayCell.node() + '<svg id=\"\"></svg>')\n        // rows.select(cellId).data([question.amount_earlier]).join(\"svg\");\n      }, question)}\n      style={style}\n    ></table>\n  );\n}\n\nexport default Calendar;\n","import { Container, Row, Col } from \"react-bootstrap\";\nimport MELForm from \"./MELForm\";\nimport BarChart from \"./BarChart\";\nimport Calendar from \"./Calendar\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentQuestion, ViewType } from \"../features/questionSlice\";\n\nexport function Survey() {\n  const question = useSelector(selectCurrentQuestion);\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          {question.view_type === ViewType.barchart ? (\n            <BarChart\n              top_margin=\"20\"\n              right_margin=\"30\"\n              bottom_margin=\"30\"\n              left_margin=\"80\"\n            />\n          ) : question.view_type === ViewType.word ? (\n            <MELForm />\n          ) : (\n            <Calendar\n              top_margin=\"20\"\n              right_margin=\"20\"\n              bottom_margin=\"30\"\n              left_margin=\"30\"\n            />\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Survey;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  fetchQuestions,\n  fetchStatus,\n  Status,\n  setParticipant,\n  setQuestionSet,\n} from \"../features/questionSlice\";\nimport ReactLoading from \"react-loading\";\n\nexport function QueryParam() {\n  const dispatch = useDispatch();\n  const loadingStatus = useSelector(fetchStatus);\n  const search = useLocation().search;\n  const participantId = new URLSearchParams(search).get(\"participant_id\");\n  const questionSetId = new URLSearchParams(search).get(\"question_set_id\");\n\n  dispatch(setParticipant(participantId));\n  dispatch(setQuestionSet(questionSetId));\n\n  useEffect(() => {\n    if (loadingStatus === Status.Unitialized) {\n      dispatch(fetchQuestions(questionSetId));\n    }\n  }, [loadingStatus, dispatch]);\n\n  return (\n    <div>\n      {loadingStatus === Status.Fetching && (\n        <ReactLoading type=\"spinningBubbles\" color=\"#444\" />\n      )}\n    </div>\n  );\n}\n\nexport default QueryParam;\n","import React from \"react\";\nimport { version } from \"../package.json\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentQuestion } from \"./features/questionSlice\";\n\nexport const Footer = () => {\n  const question = useSelector(selectCurrentQuestion);\n\n  return (\n    <div className=\"footer\">\n      Version: {version}\n      <div className=\"stickRight\">{question ? question.comment : \"\"}</div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Survey from \"./components/Survey\";\nimport { QueryParam } from \"./components/QueryParam\";\nimport { selectAllQuestions, writeAnswers } from \"./features/questionSlice\";\nimport { Footer } from \"./footer\";\n\nconst App = () => {\n  return (\n    <div>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand as={Link} to=\"/\">\n              Viz Survey\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Item href=\"/survey\">\n                  <Nav.Link as={Link} to=\"/survey\">\n                    Survey\n                  </Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <QueryParam />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/survey\" component={Survey} />\n            <Route path=\"/thankyou\" component={ThankYou} />\n            <Route path=\"/*\" component={Home} />\n          </Switch>\n          <Footer className=\"footer bg-dark\" />\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n\nconst Home = () => {\n  return (\n    <div id=\"home-text\">\n      <p>*** TODO: Inert the survey instructions for the subject here ***</p>\n      <p>\n        <a\n          href=\"\n        https://github.com/pcordone/vizsurvey\"\n        >\n          Github README.md\n        </a>\n      </p>\n      <p>\n        <a\n          id=\"getQuestionSet\"\n          href=\"http://localhost:3000/vizsurvey?participant_id=1&question_set_id=2\"\n        >\n          localhost\n        </a>\n      </p>\n      <p>\n        <a href=\"https://pcordone.github.io/vizsurvey/?participant_id=1&question_set_id=2\">\n          localhost\n        </a>\n      </p>\n    </div>\n  );\n};\n\nfunction convertToCSV(answers) {\n  const header = [\n    \"question_set_id,position,amount_earlier,time_earlier,amount_later,time_later,choice,answer_time,participant_id\",\n  ];\n  const rows = answers.map(\n    (a) =>\n      `${a.question_set_id}, ${a.position}, ${a.amount_earlier}, ${a.time_earlier}, ${a.amount_later}, ${a.time_later}, ${a.choice}, ${a.answer_time}, ${a.participant_id}`\n  );\n  return header.concat(rows).join(\"\\n\");\n}\n\nconst ThankYou = () => {\n  const dispatch = useDispatch();\n  const allQuestions = useSelector(selectAllQuestions);\n  const csv = convertToCSV(allQuestions);\n  console.log(csv);\n  dispatch(writeAnswers(csv));\n\n  return (\n    <div>\n      <p>Your answers have been submitted. Thank you for taking this survey!</p>\n      .\n    </div>\n  );\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}