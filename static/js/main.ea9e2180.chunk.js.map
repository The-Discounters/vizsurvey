{"version":3,"sources":["features/questionSlice.js","app/store.js","components/MELForm.js","hooks/useD3.js","components/BarChart.js","components/Survey.js","components/QueryParam.js","footer.js","App.js","reportWebVitals.js","index.js"],"names":["gistToken","atob","process","gistAnswerId","Answer","Status","fetchQuestions","createAsyncThunk","questionSetId","a","csv","response","forEach","e","question_set_id","position","amount_earlier","time_earlier","amount_later","time_later","choice","answer_time","undefined","participant_id","result","filter","d","writeAnswers","answersCSV","getState","state","octokit","Octokit","userAgent","auth","url","now","DateTime","toFormat","files","questions","content","description","console","log","payloadObj","gist_id","request","status","questionSlice","createSlice","name","initialState","currentQuestion","error","reducers","setParticipant","action","payload","setQuestionSet","answer","length","nextQuestion","previousQuestion","extraReducers","builder","addCase","pending","fulfilled","rejected","selectMaxTime","max","selectAllQuestions","selectCurrentQuestion","fetchStatus","actions","store","configureStore","reducer","questionReducer","MELForm","dispatch","useDispatch","question","useSelector","question1stPartText","sooner_time","question2ndPartText","initialValues","validate","values","errors","onSubmit","setSubmitting","resetForm","setTimeout","isSubmitting","role","className","type","value","style","color","fontWeight","component","Button","disabled","to","useD3","renderChartFn","dependencies","ref","React","useRef","useEffect","d3","current","BarChart","props","maxTime","height","width","margin","top","top_margin","right","right_margin","bottom","bottom_margin","left","left_margin","marginLeft","marginRight","domain","Array","from","keys","data","map","time","amount","svg","x","scaleBand","rangeRound","rangeValues","y","scaleLinear","select","attr","call","axisBottom","tickValues","tickSizeOuter","yTickValues","range","push","axisLeft","tickFormat","selectAll","join","bandwidth","Survey","Container","fluid","Row","Col","QueryParam","loadingStatus","search","useLocation","participantId","URLSearchParams","get","Footer","version","App","Navbar","bg","variant","expand","Brand","as","Link","Toggle","Collapse","id","Nav","Item","href","exact","path","Home","ThankYou","answers","rows","concat","convertToCSV","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea9e2180.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { csv, max } from \"d3\";\nimport { Octokit } from \"octokit\";\nimport { DateTime } from \"luxon\";\n\n// eslint-disable-next-line no-undef\nconst gistToken = atob(process.env.REACT_APP_AUTH_TOKEN);\n// eslint-disable-next-line no-undef\nconst gistAnswerId = process.env.REACT_APP_GIST_ANSWER_ID;\n// eslint-disable-next-line no-undef\nconst gistQuestionURL = process.env.REACT_APP_GIST_QUESTION_URL;\n\nexport const Answer = {\n  Unitialized: \"Unitialized\",\n  Earlier: \"Earlier\",\n  Later: \"Later\",\n};\n\nexport const Status = {\n  Unitialized: \"Unitialized\",\n  Fetching: \"Fetching\",\n  Fetched: \"Fetched\",\n  Complete: \"Complete\",\n  Error: \"Error\",\n};\n\n// Define the initial state of the store for this slicer.\nconst initialState = {\n  questions: [],\n  currentQuestion: 0,\n  question_set_id: null,\n  participant_id: null,\n  status: \"Unitialized\",\n  error: null,\n};\n\nexport const fetchQuestions = createAsyncThunk(\n  \"survey/getQuestions\",\n  async (questionSetId /*{ getState }*/) => {\n    questionSetId = +questionSetId;\n    const response = await csv(gistQuestionURL);\n    response.forEach((e) => {\n      e.question_set_id = +e.question_set_id;\n      e.position = +e.position;\n      e.amount_earlier = +e.amount_earlier;\n      e.time_earlier = +e.time_earlier;\n      e.amount_later = +e.amount_later;\n      e.time_later = +e.time_later;\n      e.choice = Answer.Unitialized;\n      e.answer_time = undefined;\n      e.participant_id = undefined;\n    });\n    const result = response.filter((d) => d.question_set_id === questionSetId);\n    return result;\n  }\n);\n\nexport const writeAnswers = createAsyncThunk(\n  \"survey/writeAnswers\",\n  async (answersCSV, { getState }) => {\n    const state = getState();\n    const octokit = new Octokit({\n      userAgent: \"thesis_answers/v1.0\",\n      auth: gistToken,\n    });\n    const url = `PATCH /gists/${gistAnswerId}`;\n    const now = DateTime.now().toFormat(\"yyyy-MM-dd-H-mm-ss-SSS-ZZZZ\");\n    const files = {};\n    answersCSV = `${answersCSV}`;\n    files[`answers-subject-${state.questions.participant_id}-${now}.csv`] = {\n      content: answersCSV,\n    };\n    const description = `Answer results for participant ${state.questions.participant_id} at ${now}`;\n    console.log(\"submitting answers for \" + description);\n    const payloadObj = {\n      gist_id: gistAnswerId,\n      description: description,\n      files: files,\n    };\n    const response = await octokit.request(url, payloadObj);\n\n    const status = response.status;\n    console.log(\"answers submitted with status of \" + status);\n  }\n);\n\nexport const questionSlice = createSlice({\n  name: \"questions\", // I believe the global state is partitioned by the name value thus the terminology \"slice\"\n  initialState, // the initial state of our global data (under name slice)\n  reducers: {\n    setParticipant(state, action) {\n      if (state.participant_id === null && action.payload !== null) {\n        state.participant_id = action.payload;\n      }\n    },\n    setQuestionSet(state, action) {\n      if (state.questionSetId === null && action.payload !== null) {\n        state.question_set_id = action.payload;\n      }\n    },\n    // we define our actions on the slice of global store data here.\n    answer(state, action) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.questions[state.currentQuestion].choice = action.payload;\n      state.questions[state.currentQuestion].answer_time =\n        DateTime.now().toFormat(\"MM/dd/yyyy H:mm:ss:SSS ZZZZ\");\n      state.questions[state.currentQuestion].participant_id =\n        state.participant_id;\n      if (state.currentQuestion === state.questions.length - 1) {\n        state.status = Status.Complete;\n      } else {\n        state.currentQuestion += 1;\n      }\n    },\n    nextQuestion(state) {\n      state.questions.currentQuestion +=\n        state.currentQuestion < state.questions.length ? 1 : 0;\n    },\n    previousQuestion(state) {\n      state.currentQuestion -= state.currentQuestion > 0 ? 1 : 0;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchQuestions.pending, (state) => {\n        if (state.status === Status.Unitialized) {\n          state.status = Status.Fetching;\n        }\n      })\n      .addCase(fetchQuestions.fulfilled, (state, action) => {\n        state.questions = action.payload;\n        state.currentQuestion = 0;\n        state.status = Status.Fetched;\n      })\n      .addCase(fetchQuestions.rejected, (state, action) => {\n        if (state.status === Status.Fetched) {\n          state.status = Status.Error;\n          state.error = action.error;\n        }\n      });\n  },\n});\n\nexport const selectMaxTime = (state) => {\n  return max(state.questions.questions, (d) => d.time_later);\n};\n\nexport const selectMaxAmount = (state) => {\n  return max(state.questions.questions, (d) =>\n    d.amount_earlier > d.amount_later ? d.amount_earlier : d.amount_greater\n  );\n};\n\nexport const selectAllQuestions = (state) => {\n  return state.questions.questions;\n};\n\nexport const selectCurrentQuestion = (state) => {\n  return state.questions.questions[state.questions.currentQuestion];\n};\n\nexport const selectparticipantId = (state) => {\n  return state.participant_id;\n};\n\nexport const isLastQuestion = (state) => {\n  const result =\n    state.questions.currentQuestion === state.questions.questions.length - 1;\n  return result;\n};\n\nexport const fetchStatus = (state) => {\n  return state.questions.status;\n};\n\n// Action creators are generated for each case reducer function\nexport const {\n  answer,\n  nextQuestion,\n  previousQuestion,\n  setParticipant,\n  setQuestionSet,\n} = questionSlice.actions;\n\nexport default questionSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport questionReducer from \"../features/questionSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    questions: questionReducer,\n  },\n});\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectCurrentQuestion,\n  fetchStatus,\n  Answer,\n  answer,\n  Status,\n} from \"../features/questionSlice\";\n//import { Col, Container, Row, Media } from \"react-bootstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { Button } from \"react-bootstrap\";\n\nexport function MELForm() {\n  const dispatch = useDispatch();\n  const question = useSelector(selectCurrentQuestion);\n  const status = useSelector(fetchStatus);\n\n  // Absolute money value, delay framing (e.g., $5 today vs. $5 plus an additional $5 in 4 weeks)\n  // Relative money value, delay framing (e.g., $5 today vs. $5 plus an additional 100% in 4 weeks)\n  // Standard MEL format (e.g., $5 today vs. $10 in 4 weeks)\n  // Relative money value, speedup framing (e.g., $10 in 4 weeks vs. $10 minus 50% today)\n  // Absolute money value, speedup framing (e.g., $10 in 4 weeks vs. $10 minus $5 today)\n\n  const todayText = (sooner_time) =>\n    sooner_time === 0 ? \"today\" : `in ${sooner_time} weeks`;\n\n  function questionText() {\n    return `${question1stPartText()} vs. ${question2ndPartText()}`;\n  }\n\n  function question1stPartText() {\n    return `$${question.amount_earlier} ${todayText(question.time_earlier)}`;\n  }\n\n  function question2ndPartText() {\n    return `$${question.amount_later} in ${question.time_later} weeks`;\n  }\n\n  const result = (\n    <Formik\n      initialValues={{ choice: Answer.Unitialized }}\n      validate={(values) => {\n        let errors = {};\n        if (!values.choice || values.choice === Answer.Unitialized) {\n          errors.choice = \"Please choose a selection to continue.\";\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        setTimeout(() => {\n          dispatch(answer(values.choice));\n          setSubmitting(false);\n          resetForm();\n        }, 400);\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <div\n            role=\"group\"\n            aria-labelledby=\"my-radio-group\"\n            className=\"radio-choice-label\"\n          >\n            <h3>{questionText()}</h3>\n            <br></br>\n            <label>\n              <Field type=\"radio\" name=\"choice\" value={Answer.Earlier} />\n              &nbsp;{question1stPartText()}\n            </label>\n            <br></br>\n            <label>\n              <Field type=\"radio\" name=\"choice\" value={Answer.Later} />\n              &nbsp;{question2ndPartText()}\n            </label>\n            <span style={{ color: \"red\", fontWeight: \"bold\" }}>\n              <ErrorMessage name=\"choice\" component=\"div\" />\n            </span>\n          </div>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n\n  if (status === Status.Complete) {\n    return <Redirect to=\"/thankyou\" />;\n  } else {\n    return result;\n  }\n}\n\nexport default MELForm;\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (renderChartFn, dependencies) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n\n  return ref;\n};\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport {\n  selectCurrentQuestion,\n  selectMaxTime,\n} from \"../features/questionSlice\";\n\nimport { useD3 } from \"../hooks/useD3\";\nimport * as d3 from \"d3\";\nimport { axisBottom, axisLeft, scaleLinear, scaleBand, max, range } from \"d3\";\n\nfunction BarChart(props) {\n  const question = useSelector(selectCurrentQuestion);\n  const maxTime = useSelector(selectMaxTime);\n\n  const height = props.height;\n  const width = props.width;\n  const margin = {\n    top: props.top_margin,\n    right: props.right_margin,\n    bottom: props.bottom_margin,\n    left: props.left_margin,\n  };\n  const style = {\n    height: height,\n    width: width,\n    marginLeft: margin.left + \"px\",\n    marginRight: margin.right + \"px\",\n  };\n\n  // const innerHeight = height - margin.bottom - margin.top;\n  // const innerWidth = width - margin.left - margin.right;\n\n  const domain = Array.from(Array(maxTime + 1).keys());\n\n  const data = domain.map((d) => {\n    if (d == question.time_earlier) {\n      return { time: d, amount: question.amount_earlier };\n    } else if (d == question.time_later) {\n      return { time: d, amount: question.amount_later };\n    } else {\n      return { time: d, amount: 0 };\n    }\n  });\n\n  return (\n    <svg\n      width={width}\n      height={height}\n      ref={useD3(\n        (svg) => {\n          const x = scaleBand()\n            .domain(domain)\n            .rangeRound([margin.left, width - margin.right]);\n\n          const rangeValues = [0, max(data, (d) => d.amount)];\n\n          const y = scaleLinear()\n            .domain(rangeValues)\n            .rangeRound([height - margin.bottom, margin.top]);\n\n          svg\n            .select(\".x-axis\")\n            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n            .call(axisBottom(x).tickValues(domain).tickSizeOuter(0));\n\n          const yTickValues = range(\n            rangeValues[0],\n            rangeValues[1],\n            rangeValues[1] / 5\n          );\n          yTickValues.push(rangeValues[1]);\n\n          svg\n            .select(\".y-axis\")\n            .attr(\"transform\", `translate(${margin.left},0)`)\n            .call(\n              axisLeft(y).tickValues(yTickValues).tickFormat(d3.format(\"$,.2f\"))\n            );\n\n          // const yLabelG = svg\n          //   .select(\"#y-axis-label\")\n          //   .data([1])\n          //   .join(\"g\")\n          //   .attr(\"transform\", \"rotate(-90)\");\n\n          // .data(nullData)\n          // .join(\"text\")\n          // .attr(\"id\", \"y-axis-label\")\n          // .attr(\"text-anchor\", \"middle\")\n          // .attr(\"x\", -innerHeight / 2)\n          // .attr(\"y\", -margin.left)\n\n          // .text(\"Amount in USD\");\n\n          svg\n            .select(\".plot-area\")\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"class\", \"plot-area\")\n            .selectAll(\".bar\")\n            .data(data)\n            .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => x(d.time))\n            .attr(\"width\", x.bandwidth())\n            .attr(\"y\", (d) => y(d.amount))\n            .attr(\"height\", (d) => y(0) - y(d.amount));\n        },\n        [data]\n      )}\n      style={style}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default BarChart;\n","import { Container, Row, Col } from \"react-bootstrap\";\nimport MELForm from \"./MELForm\";\nimport BarChart from \"./BarChart\";\n\nexport function Survey() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <MELForm />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <BarChart\n            width=\"600\"\n            height=\"600\"\n            top_margin=\"20\"\n            right_margin=\"30\"\n            bottom_margin=\"30\"\n            left_margin=\"80\"\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Survey;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  fetchQuestions,\n  fetchStatus,\n  Status,\n  setParticipant,\n  setQuestionSet,\n} from \"../features/questionSlice\";\nimport ReactLoading from \"react-loading\";\n\nexport function QueryParam() {\n  const dispatch = useDispatch();\n  const loadingStatus = useSelector(fetchStatus);\n  const search = useLocation().search;\n  const participantId = new URLSearchParams(search).get(\"participant_id\");\n  const questionSetId = new URLSearchParams(search).get(\"question_set_id\");\n\n  dispatch(setParticipant(participantId));\n  dispatch(setQuestionSet(questionSetId));\n\n  useEffect(() => {\n    if (loadingStatus === Status.Unitialized) {\n      dispatch(fetchQuestions(questionSetId));\n    }\n  }, [loadingStatus, dispatch]);\n\n  return (\n    <div>\n      {loadingStatus === Status.Fetching && (\n        <ReactLoading type=\"spinningBubbles\" color=\"#444\" />\n      )}\n    </div>\n  );\n}\n\nexport default QueryParam;\n","import React from \"react\";\nimport { version } from \"../package.json\";\n\nexport const Footer = () => (\n  <div className=\"footer\">\n    <p>Version: {version}</p>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Survey from \"./components/Survey\";\nimport { QueryParam } from \"./components/QueryParam\";\nimport { selectAllQuestions, writeAnswers } from \"./features/questionSlice\";\nimport { Footer } from \"./footer\";\n\nconst App = () => {\n  return (\n    <div>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand as={Link} to=\"/\">\n              Viz Survey\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Item href=\"/survey\">\n                  <Nav.Link as={Link} to=\"/survey\">\n                    Survey\n                  </Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <QueryParam />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/survey\" component={Survey} />\n            <Route path=\"/thankyou\" component={ThankYou} />\n            <Route path=\"/*\" component={Home} />\n          </Switch>\n          <Footer className=\"footer bg-dark\" />\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n\nconst Home = () => {\n  return (\n    <div id=\"home-text\">\n      <p>*** TODO: Inert the survey instructions for the subject here ***</p>\n      <p>\n        <a\n          href=\"\n        https://github.com/pcordone/vizsurvey\"\n        >\n          Github README.md\n        </a>\n      </p>\n      <p>\n        <a href=\"http://localhost:3000/vizsurvey?participant_id=1&question_set_id=2\">\n          localhost\n        </a>\n      </p>\n    </div>\n  );\n};\n\nfunction convertToCSV(answers) {\n  const header = [\n    \"question_set_id,position,amount_earlier,time_earlier,amount_later,time_later,choice,answer_time,participant_id\",\n  ];\n  const rows = answers.map(\n    (a) =>\n      `${a.question_set_id}, ${a.position}, ${a.amount_earlier}, ${a.time_earlier}, ${a.amount_later}, ${a.time_later}, ${a.choice}, ${a.answer_time}, ${a.participant_id}`\n  );\n  return header.concat(rows).join(\"\\n\");\n}\n\nconst ThankYou = () => {\n  const dispatch = useDispatch();\n  const allQuestions = useSelector(selectAllQuestions);\n  const csv = convertToCSV(allQuestions);\n  console.log(csv);\n  dispatch(writeAnswers(csv));\n\n  return (\n    <div>\n      <p>Your answers have been submitted. Thank you for taking this survey!</p>\n      .\n    </div>\n  );\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}