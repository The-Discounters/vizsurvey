{"version":3,"sources":["features/questionSlice.js","app/store.js","components/MELForm.js","hooks/useD3.js","components/BarChart.js","components/Survey.js","App.js","reportWebVitals.js","index.js"],"names":["Answer","Status","fetchQuestions","createAsyncThunk","a","csv","response","forEach","e","question_set","position","amount_earlier","time_earlier","amount_later","time_later","choice","questionSlice","createSlice","name","initialState","questions","currentQuestion","status","error","reducers","answer","state","action","payload","length","nextQuestion","previousQuestion","extraReducers","builder","addCase","pending","fulfilled","rejected","selectMaxTime","max","d","selectMaxAmount","amount_greater","selectCurrentQuestion","fetchStatus","actions","store","configureStore","reducer","questionReducer","MELForm","dispatch","useDispatch","question","useSelector","question1stPartText","sooner_time","question2ndPartText","initialValues","validate","values","errors","onSubmit","setSubmitting","setTimeout","isSubmitting","role","className","type","value","style","color","fontWeight","component","Button","disabled","useD3","renderChartFn","dependencies","ref","React","useRef","useEffect","d3","current","BarChart","props","maxTime","height","width","margin","top","top_margin","right","right_margin","bottom","bottom_margin","left","left_margin","marginLeft","marginRight","domain","Array","from","keys","data","map","time","amount","svg","x","scaleBand","rangeRound","padding","rangeValues","y","scaleLinear","select","attr","call","axisBottom","tickValues","tickSizeOuter","yTickValues","range","axisLeft","tickFormat","g","remove","selectAll","join","bandwidth","Survey","Container","fluid","Row","App","Header","Navbar","bg","variant","expand","Brand","as","Link","to","Toggle","Collapse","id","Nav","Item","href","exact","path","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de65c807.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { csv, max } from \"d3\";\n\nexport const Answer = {\n  Unitialized: \"Unitialized\",\n  Earlier: \"Earlier\",\n  Later: \"Later\",\n};\n\nexport const Status = {\n  Unitialized: \"Unitialized\",\n  Fetching: \"Fetching\",\n  Fetched: \"Fetched\",\n  Error: \"Error\",\n};\n\n// Define the initial state of the store for this slicer.\nconst initialState = {\n  questions: [],\n  currentQuestion: 0,\n  status: \"Unitialized\",\n  error: null,\n};\n\nexport const fetchQuestions = createAsyncThunk(\n  \"survey/getQuestions\",\n  async () => {\n    const response = await csv(\n      \"https://gist.githubusercontent.com/pcordone/f8095509f669e2a3ac98bbfa586d16d9/raw/\"\n    );\n    response.forEach((e) => {\n      e.question_set = +e.question_set;\n      e.position = +e.position;\n      e.amount_earlier = +e.amount_earlier;\n      e.time_earlier = +e.time_earlier;\n      e.amount_later = +e.amount_later;\n      e.time_later = +e.time_later;\n      e.choice = Answer.Unitialized;\n      return response;\n    });\n    return response;\n  }\n);\n\nexport const questionSlice = createSlice({\n  name: \"questions\", // I believe the global state is partitioned by the name value thus the terminology \"slice\"\n  initialState, // the initial state of our global data (under name slice)\n  reducers: {\n    // we define our actions on the slice of global store data here.\n    answer(state, action) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.questions[state.currentQuestion].choice = action.payload;\n      state.currentQuestion +=\n        state.currentQuestion < state.questions.length - 1 ? 1 : 0;\n    },\n    nextQuestion(state, action) {\n      state.questions.currentQuestion +=\n        state.currentQuestion < state.questions.length - 1 ? 1 : 0;\n    },\n    previousQuestion(state, action) {\n      state.currentQuestion -= state.currentQuestion > 0 ? 1 : 0;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchQuestions.pending, (state, action) => {\n        if (state.status === Status.Unitialized) {\n          state.status = Status.Fetching;\n          //state.status = \"Fetching\";\n        }\n      })\n      .addCase(fetchQuestions.fulfilled, (state, action) => {\n        state.questions = action.payload;\n        state.currentQuestion = 0;\n        state.status = Status.Fetched;\n        //state.status = \"Fetched\";\n      })\n      .addCase(fetchQuestions.rejected, (state, action) => {\n        if (state.status === \"pending\") {\n          state.status = Status.Error;\n          //state.status = \"Error\";\n          state.error = action.error;\n        }\n      });\n  },\n});\n\nexport const selectMaxTime = (state) => {\n  return max(state.questions.questions, (d) => d.time_later);\n};\n\nexport const selectMaxAmount = (state) => {\n  return max(state.questions.questions, (d) =>\n    d.amount_earlier > d.amount_later ? d.amount_earlier : d.amount_greater\n  );\n};\n\nexport const selectAllQuestions = (state) => {\n  return state.questions.questions;\n};\n\nexport const selectCurrentQuestion = (state) => {\n  return state.questions.questions[state.questions.currentQuestion];\n};\n\nexport const fetchStatus = (state) => {\n  return state.questions.status;\n};\n\n// Action creators are generated for each case reducer function\nexport const { answer, nextQuestion, previousQuestion } = questionSlice.actions;\n\nexport default questionSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport questionReducer from \"../features/questionSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    questions: questionReducer,\n  },\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectCurrentQuestion,\n  Answer,\n  answer,\n} from \"../features/questionSlice\";\n//import { Col, Container, Row, Media } from \"react-bootstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { Button } from \"react-bootstrap\";\n\nexport function MELForm() {\n  const dispatch = useDispatch();\n  const question = useSelector(selectCurrentQuestion);\n\n  // Absolute money value, delay framing (e.g., $5 today vs. $5 plus an additional $5 in 4 weeks)\n  // Relative money value, delay framing (e.g., $5 today vs. $5 plus an additional 100% in 4 weeks)\n  // Standard MEL format (e.g., $5 today vs. $10 in 4 weeks)\n  // Relative money value, speedup framing (e.g., $10 in 4 weeks vs. $10 minus 50% today)\n  // Absolute money value, speedup framing (e.g., $10 in 4 weeks vs. $10 minus $5 today)\n\n  const todayText = (sooner_time) =>\n    sooner_time === 0 ? \"today\" : `in ${sooner_time} weeks`;\n\n  function questionText() {\n    return `${question1stPartText()} vs. ${question2ndPartText()}`;\n  }\n\n  function question1stPartText() {\n    return `$${question.amount_earlier} ${todayText(question.time_earlier)}`;\n  }\n\n  function question2ndPartText() {\n    return `$${question.amount_later} in ${question.time_later} weeks`;\n  }\n\n  return (\n    <Formik\n      initialValues={{ choice: question.choice }}\n      validate={(values) => {\n        let errors = {};\n        if (!values.choice || values.choice === Answer.Unitialized) {\n          errors.choice = \"Please choose a selection to continue.\";\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          dispatch(answer(values.choice));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <div\n            role=\"group\"\n            aria-labelledby=\"my-radio-group\"\n            className=\"radio-choice-label\"\n          >\n            <h3>{questionText()}</h3>\n            <br></br>\n            <label>\n              <Field type=\"radio\" name=\"choice\" value=\"{Answer.Earlier}\" />\n              &nbsp;{question1stPartText()}\n            </label>\n            <br></br>\n            <label>\n              <Field type=\"radio\" name=\"choice\" value=\"{Answer.Later}\" />\n              &nbsp;{question2ndPartText()}\n            </label>\n            <span style={{ color: \"red\", fontWeight: \"bold\" }}>\n              <ErrorMessage name=\"choice\" component=\"div\" />\n            </span>\n          </div>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default MELForm;\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (renderChartFn, dependencies) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n\n  return ref;\n};\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectCurrentQuestion,\n  selectMaxAmount,\n  selectMaxTime,\n} from \"../features/questionSlice\";\n\nimport { useD3 } from \"../hooks/useD3\";\nimport * as d3 from \"d3\";\nimport {\n  axisBottom,\n  axisLeft,\n  scaleLinear,\n  scaleBand,\n  max,\n  ticks,\n  range,\n  extent,\n} from \"d3\";\n\nfunction BarChart(props) {\n  const dispatch = useDispatch();\n  const question = useSelector(selectCurrentQuestion);\n  const maxTime = useSelector(selectMaxTime);\n  const maxAmount = useSelector(selectMaxAmount);\n\n  const height = props.height;\n  const width = props.width;\n  const margin = {\n    top: props.top_margin,\n    right: props.right_margin,\n    bottom: props.bottom_margin,\n    left: props.left_margin,\n  };\n  const style = {\n    height: height,\n    width: width,\n    marginLeft: margin.left + \"px\",\n    marginRight: margin.right + \"px\",\n  };\n\n  const domain = Array.from(Array(maxTime + 1).keys());\n\n  const data = domain.map((d) => {\n    if (d == question.time_earlier) {\n      return { time: d, amount: question.amount_earlier };\n    } else if (d == question.time_later) {\n      return { time: d, amount: question.amount_later };\n    } else {\n      return { time: d, amount: 0 };\n    }\n  });\n\n  return (\n    <svg\n      ref={useD3(\n        (svg) => {\n          const x = scaleBand()\n            .domain(domain)\n            .rangeRound([margin.left, width - margin.right])\n            .padding(0.1);\n\n          const rangeValues = [0, max(data, (d) => d.amount)];\n\n          const y = scaleLinear()\n            .domain(rangeValues)\n            .rangeRound([height - margin.bottom, margin.top]);\n\n          svg\n            .select(\".x-axis\")\n            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n            .call(axisBottom(x).tickValues(domain).tickSizeOuter(0));\n\n          const yTickValues = range(\n            rangeValues[0],\n            rangeValues[1],\n            rangeValues[1] / 5\n          );\n\n          svg\n            .select(\".y-axis\")\n            .attr(\"transform\", `translate(${margin.left},0)`)\n            .style(\"color\", \"steelblue\")\n            .call(\n              axisLeft(y).tickValues(yTickValues).tickFormat(d3.format(\"$,.2f\"))\n            )\n            .call((g) => g.select(\".domain\").remove());\n\n          svg\n            .select(\".plot-area\")\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"class\", \"plot-area\")\n            .selectAll(\".bar\")\n            .data(data)\n            .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => x(d.time))\n            .attr(\"width\", x.bandwidth())\n            .attr(\"y\", (d) => y(d.amount))\n            .attr(\"height\", (d) => y(0) - y(d.amount));\n        },\n        [data]\n      )}\n      style={style}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default BarChart;\n","import { Col, Container, Row, Media } from \"react-bootstrap\";\nimport MELForm from \"./MELForm\";\nimport BarChart from \"./BarChart\";\n\nexport function Survey() {\n  return (\n    <Container fluid=\"md\">\n      <Row>\n        <MELForm />\n      </Row>\n      <Row>\n        <BarChart\n          width=\"600\"\n          height=\"600\"\n          top_margin=\"20\"\n          right_margin=\"30\"\n          bottom_margin=\"30\"\n          left_margin=\"80\"\n        />\n      </Row>\n    </Container>\n  );\n}\n\nexport default Survey;\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport \"./App.css\";\nimport Survey from \"./components/Survey\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { fetchQuestions, fetchStatus } from \"./features/questionSlice\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const status = useSelector(fetchStatus);\n\n  useEffect(() => {\n    if (status === \"Unitialized\") {\n      dispatch(fetchQuestions());\n    }\n  }, [status, dispatch]);\n\n  return (\n    <div>\n      <Header />\n    </div>\n  );\n};\n\nexport default App;\n\nconst Header = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand as={Link} to=\"/\">\n            Viz Survey\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Item href=\"/survey\">\n                <Nav.Link as={Link} to=\"/survey\">\n                  Survey\n                </Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/survey\" component={Survey} />\n          <Route path=\"/*\" component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst Home = () => {\n  return (\n    <div>\n      <p>*** TODO: Inert the survey instructions for the subject here ***</p>.\n      <p>\n        *** TODO: Remove these notes below. They are here during development\n        only. ***\n      </p>\n      Some open questions about how to design the visualization are captured\n      below. I didn't want to loose track of them, so I put them on this page. I\n      also have a list of tasks to still do. For information on how the app is\n      designed and works, see{\" \"}\n      <a\n        href=\"\n        https://github.com/pcordone/vizsurvey\"\n      >\n        Github README.md\n      </a>\n      .\n      <ol>\n        <li>\n          Should the time scale be fixed for the question set or not? <br></br>\n          Right now, I fixed the time scale across the questions to be from 0 to\n          the maximum time for the question set. I thought visually it stopped\n          the bar chart from jumping around between the questions and the range\n          of time values is not so large that it causes any of the charts to\n          become too small along the x axis to render well; however from an\n          experimental point of view, I am not sure if it will bias the subject\n          in some way and I am not sure this is the best choice. It would be\n          easy to drive this as a parameter from the input data for each\n          experiment to turn it on and off so that the time scale could be set\n          to be consistent across the questions or let it format uniquely for\n          each question.\n        </li>\n        <li>\n          Should the y scale range be fixed for the question set? I did not fix\n          the y range to the same scale between questions since the variation in\n          the amount values is larger and the chart bars with smaller amounts\n          would be too compressed in the y axis too small to be meaninful. I did\n          fix the number of ticks for the y scale to be the same across\n          questions in the set since visually it seems easier to comprehend\n          between quesitons; however I need to fix the algorithm since it ends\n          up with strange interval values if the largest amount in the qustion\n          set is not a divided by 5 to a normal looking v alue. Not sure if that\n          is a good decision. Again, this would be easy to paramaterize through\n          the input data.\n        </li>\n        <li>I need to get the vertical line to draw for the y axis.</li>\n        <li>\n          I need to get the survey results to save on either gist or a google\n          sheets document may be better since I can't append to a gist file\n          through the API. I may create a new gist file for each survey results.\n        </li>\n        <li>\n          I need to pass the qustion set (question configuration) through the\n          URL and use it to load the correct set of questions. Then I can change\n          the URL link that I embed into the mechanical turk experiment run.\n        </li>\n      </ol>\n    </div>\n  );\n};\n\nconst NotFound = () => {\n  return <div>The page you are looking for can't be found.</div>;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}