%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 7004.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: user
%%CreationDate: 9/18/2017
%%BoundingBox: 0 0 450 178
%%HiResBoundingBox: 0 0 450 177.8653
%%CropBox: 0 0 450 177.8653
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2017-09-18T13:45:20+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-09-18T13:45:20+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-09-18T13:45:20+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>104</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Alnl7yrq2vNMLAJS3C+o0&#xA;jcQC1aDuexxVOf8AlVPmnxt/+Rh/5pxVLtP8i6/fX97YxJGsunsEuGdwF5NutCK1qN8VRVt+XGt3&#xA;TSLbXNlO0J4yiKcOUNSKNxBoaqRviqH0vyJr+pS3cUCxI9lKYJ/UelJB1AoDWmKq9t+XWs3Uksdr&#xA;dWM8kJ4zJFcByhqRRgoNNweuKqGleQvMOptdCBI0+pzNbTGRwP3qbsopy6VGKq8H5da3ctItrc2V&#xA;xJDUSRxXCuykErQgDbdSN8VQ+ieRde1mzN3aLEsIcx1kfiSy9dgDiqJtvy3126h9azns7qOlQ0M4&#xA;cH5ECn44qhtI8ja5qli99B6MdsjOheaQL/d7Meh2B8cVVo/y+1qe0lu7SezvIYQSxt51k3Ch+NRt&#xA;XiQeuKqOmeRdc1DShqqGCGyKs4lnkCDgn2nOxoooeuKqsn5f62NPmv4ZbW5toFZ5GgmEmyCrUoKV&#xA;A7VxVS0/yPrN7pK6sJLe3sWDN6txKIwFVipZiRQCo74qqSeQdaGmS6lBNa3VpCrO0lvMJAQn26EC&#xA;h408cVatvIWtTaXHqbyW1tZyAMJLiYRgBm4rUkUHInbfFVuoeRNbstKbVGe3nskAYyQShwVY05Da&#xA;hFT2xVfD+X+uPp0GoyyWttbXCo8bTzBNpKcKmlKtUUFcVW6l5C12w0ttTkaCazVVf1IZQ9UenFhs&#xA;Kg1HTFW/8B6slvaz3FzZWq3ihrZbi4WNnqAQAD1NCNhiqjrHkzV9L0wanM0E1nyC+rBIJB8RoD0F&#xA;RXbbFUVN+Xmt2/oC7uLK1luP7qKe4VHY7AqAftEFgNq9cVQmr+TdX0uxgv5mhltLhlWKaCQSKeY5&#xA;IRTqGG4IxVFzfl7rNvJHFdXVjbTyjkkMtwquRWmwPXc02xVC6p5K1rTra1uZTDNBeSJFBLDIHVmk&#xA;FU322bsRiqI1DyBqumxLLqN5YWcbnijT3Cxgt4DkBU4qoat5J13S7i0guEjeS+f0rcRuDV6gcTXj&#xA;T7QxVMv+VU+afG3/AORh/wCacVS/UfIuv2F5Z2kyRtLfOY7co4Klh1BrSnXFUw/5VT5p8bf/AJGH&#xA;/mnFUj8weW9T0G4igvwnKZS8bRtyUgGh8Dtiq/RLXXr61uLLSobpv3sNxJNZyCF1MJbirOwKkNzP&#xA;w+3tirMfLU/5gaNpv1O50u+1WTly+tXl1G0n2FWladKrX6cVQ+m655n07zFqEb6LI9/qpS4FoJAp&#xA;VI1Kg8qMpHvtviqP0ybzLpryPZ+VJo2lULJW6VqhXkkHUH9qZsVQFnrvmjQb+5Fzokhk1i5aa3i9&#xA;QBi56qCofl1Hhiqto9rrukXs15Y+U545p0McnK7VxQyvMeIYHjV5WJp128Biqna675p8uQXlxf6K&#xA;6x3949wX9VVAkmAHABRIT9jbFVTR4Nb0y9n1Gw8pTx3F5GkcrNdA1RHeRRxcbfFKx6Yqt0fUfN/l&#xA;rR5UuNCke2jdpmm9VRxDkVqqiQ7Hviq3yudV0u0kn0HypPHDfLEzO12zB/RiEMbcZdx+7RRtSopi&#xA;q7TB5wsNBuNJufLstzbTib1SkyoSk9eagLzavxHpiql5c1TVl0u+Ty/5dla2vJ5ZZZDdGRRPKoD8&#xA;RKAadPhBpiqtaRebE8rv5cvPLctzZSwS2k5FwkReKYMrjapB4uRUHFUNpOo6otlq2j6N5cmjM0k8&#xA;l6huGf057qvM0lA41ap4qadT3xVEWsHmpfLaaDeeWpbq1X7RFwkXKkvqr0qRRqd8VWjW9eFveeWr&#xA;Ly/JDczJPJLEZubAXTM8khJVQeTSnfl1xVVCeapdBt9GvvLEtzbwNA9VuVjq9tMs8R+HcUeNT1xV&#xA;LpZdT03y9B5Ns/Ls1hBMhjsYmnMxp6nqNRiN9z3bb5Yqmj/4ouNGtdKv/K0l1BbLEtDcIoYxLxUl&#xA;d/pGKpdq99rem+VIdB/QMun6fwjtbeSScz0CEEKWoSWPHqzb4qirq08wX8FmmoeVZp5LO1ks45Bd&#xA;CP8AdzCP1PhH83oL16Yql+r22tWPkxdDh8vS6Zo9qQQ5m9fgvMvT+b7TdTiqcTX3mLVmsdQl8ryz&#xA;vAoa1mW5CCjSRT1C06F7dDviqA1m380yeW7PSYfL01np+lrF6R9ZZiIraMoq0+0aL33OKt3Ul/5o&#xA;j/SDeWJrpJo44VuI7r0wVt7gTpxFF+zMla/Riq++tPN82kaZpVp5eltrXSnga3DTJKeNsvGNeqbA&#xA;Yql3mKzHn14JL7ytPc3WjNPDDPFdGGSA3KCO4jIKqp9RBxYMpp7HFU41pvOup3em3H+H5Yf0dMJ1&#xA;X1Y25EFSB+zT7OKsUubHztfapcafaX+u210vqPcWUV6oKLIynYtH8ChaBeJ717mqrIru2893EWlR&#xA;to9yTpakCeS4WSaUlQvJpCa8qDrvviqj5W03z5oNw0r2eqanH6ZihhvLyJ1iDFC3D4a9Y9q9MVS7&#xA;z9qGs3t9aHVNPbTnjjYRRu4kLBmFW5AAdumKsh/J+QImq17mD/mZirOILnUP0tdLLdWz2YSNre0j&#xA;jYXKchTnLIZWVlZkfjSNenU0xVJLiYf8rJtm/wC1Yw/5KtiqcXdzdfpvTxHdRx2xjuDPaswEkpHp&#xA;8GRaVISp5b9xiqTebJgfMflg+FzL/wARTFUB+Zs3nr6z5bbytqENnF+kAupRSvCjTqyExoBNT1F2&#xA;blGhDnt0xVHfmTMG0GAf8vkP/G2Kph51utVTynqzaRewadqf1aT6nfXTKkMMhFBJIzBlAX3GKobU&#xA;fr0PkF4NQuReX8diqXd2AAJZQgDuAoA+Jt8VTTy7OB5f0wV6WkH/ACbXFUH5JfWY/K9imt3SXupg&#xA;P691HKJ1cGRih9RUhVjw41ogFcVSz8rpQvlph/y8yfqXFUX5Km10Q6mNX1KHU+N9KlnLDIjtHCgC&#xA;+jMI44kWWNgQw3/gFVHynMB5j8znxuYv+IviqZ2N5qjeYtTSa/tJ9PRIPq1hEtLm3JXdpm5Golbl&#xA;x+EUC998VS23mH/Kyblv+1Yo/wCSq4qiLu815fPWnpDe2w0KSxnF1pzyKLkziRCk8cfDkyqBwPx0&#xA;+L7PfFVHzLMD5o8tHwkuP+Ipiqa6rcTC80sx6omnxm5IltnWNjeD0XIgQuQysCPUqlTRSPcKpN+Z&#xA;EwbQ7cf8vkJ/4liqa+aruZNCuGt7pLOXlEBO8ghFDMgZRISArOtUXcbkb4qpedpgfKmpDxh/iMVV&#xA;9LnA8s2mzNSyj+FGCMf3Q2ViV4nwNRiqno93cyeULJ7y6jvbxtPiNzeQsrxTSmEc5EZQFZXapBGK&#xA;oT8vJgvk7Tx4CX/k8+Kp9bz3AVvrDIW5vw9MED0+R4A1J+LjTl74qxryTMBf+ZPfVJT+rFU/tJNS&#xA;W6vGu54ZLV3U2EUUTJJGgQBxK5dw5L1Ioq0HjirGdKlA/M3Wm8bWL/iMOKpv5v8ANN15f0OXU7XS&#xA;LvW5o2VRY2ARpSGNOZDMvwr34gn264qth806rJMkb+WNThV2CtK8mmFUBNCzcLxmoOpoCfbFWGfm&#xA;/IHv9Mp2il/4kuKpZ5B1iewkvIorG5vTMEYi1T1GXgSN1qNvj64qy/8AxFd+oZf0BqfqEBS/1X4u&#xA;INQK8um+KpVJqGst5oi1b9B6j9Xjtjb8fq7c6li1adOp8cVRFx5rgOq2qTaVqC6jErm2gMIEhWQU&#xA;YhC1SDxxVD6xqGs3uqaXdRaHqIjsJGkkD27BjyoPhpXwxVvXdft5ptNbUdN1O2a1ulubRGiRFklR&#xA;WQBlcnmB6nTsaEbgHFWvM99q+rafHbQaJqSukySkyW7AUWvhy8cVVPMmuwXuhXljrOkalBp95E1v&#xA;cs0XpDjIKEByw64qqanrmoaho01tbaLqTC4i4xSNASpBGx5AsTt3xVfZeZL7TtIgS70bUY1tIUSW&#xA;X0CEAjUAtyYrtt3xVC+V9StNK0OCx0LRNUfTIzI1t+7aZQHkZyqyF3PFWYgeAxVZ5UvdX0bS2tLj&#xA;RdRdvVaTlHbsRRgP5ivhiq7y1rVhawXjaLpGpTQ3l5Ne3LRxCVfrFw3OSlGIWp3oPn1rirtHv9Ys&#xA;tT1S7l0TUSl/IrxhLdiQF5D4q8fHFVmlaxpkXmHWL+w0jUn1XUPQGqIsfMg2qmKOqczwoDQ4qqR6&#xA;hrC+Z5dWOiaj6D2wtwv1dudQwatOnbxxVUk8z2ra/BI+laj+loYJYILcxDmI5ikklI+Vd/QXf2xV&#xA;T1XUdZu9W0y8i0PURHYs7OGt2DHnxHwgVG3HxxVR8w6rpV9faOdX0jUkurC7W80yNozEWnVWiWi8&#xA;xz/vOn+0VVTzRf6zq1hHbW+iairJMkpMluwFErt8PLxxVrzbrGnalocum+YNI1KHTrtoxJzj9Hk0&#xA;biVVD8x3j7Yqidd1nVNR0e4tLfQ9S53CBVZ7chaEg1qC3b2xVadfktvL62mqaLqCWqW6210zQlYy&#xA;pURn4yyUDVxVZpGqiz8uw2GkaLqctokLJbyGHmHLVJZnBNeTEkkD6MVb8u6tquk6JDZ3Oi6jW35l&#xA;pEtzx4sxepLFaU5Yqr6R5ntfqhGj6FeC0DsSLS1QR+ox5P8A3bceRLVOKoTQNQ1rT59Sln0PUaX1&#xA;y1ygjgZuPL9lq8cVVNK1/TE1LUrjTNDvmv7p0bU2ih5sXQFE5gOeJABGKpbdR6vd6rrU82j6nHaa&#xA;tZvZcooG9ZA8ax8uwB+Ekb4qx1PLUzSNpqa55xN5ChEcayoJoYyjIOKqBSiyDenYYqj7TyzrkTRt&#xA;LqfnOZo2RwpYhKq6uQRUkq3GlGJ+EkYqv8/anPfX1oZrK4sjFE1Euk9N25MNwu+3w9cVZF+TzhU1&#xA;avcwf8zMVejesuKu9ZcVYhq0g/5WVoZ8Lab/AIhLiqK8x+fLXRNXtNOkt/VNwImd/VjjYLPcpap6&#xA;SMeUzB5AWVeg8SQMVXedZQV0P21izP8AwzYqpedvzDsPKRs2vbSa4huxKRJAAeAtyjzch/kWxln/&#xA;ANWJh1piqn5n1X9J/lvNqBha2N7Zw3H1eT7cfq8H4PT9pa0Pviqa6t5gi0TytPq0kZmSxtRM0S1q&#xA;wVRsKBj9wOKq0moC78vPckKpntWk4qWIHKMmnxrG/wDwSg+2KpP5S1KPT/y+gvXUutpbzzsgNCRG&#xA;zuQPnTFUf5P82Q+ZdDTVY7drUNLPA0LkkhreVomO4RqEpUclB9sVSz8tJANEux/y+zfqXFU50fXb&#xA;i+vdWtprdIBpdytrzSUyeoWgjuOVCkfEcJ07nevgCVUs8tSgeafMx8ZLb/iL4qj7TzM9x5mvdDNj&#xA;JGbGGO4kvGZfSeOfaApTc82SZSP2fT32ZaqoCeUf8rGtz/2rSP8Akq+Kom8862Fr5rtfLbpW7uxC&#xA;0bc1HwzRXsteP2iF/RzA/wCsMVQHnGQHzD5XPhdv/wAaYqyDU9aisJLFHQub65W1Ug04lkd+R9v3&#xA;eKsf/M2QN5eiH/L3F/xtiqb+ZfM0eiWtvKY1lku7hLWL1JFgiV3DNyllYEItEI6btRRuRiqB1DXL&#xA;fWfID6rAjRw6hYJcxxyU5KsyBwDSo2r2NPDFUfot4lv5VsJmHIQ2MTlR1PGEGn4Yqp+UPND+YdCh&#xA;1V7GbThOT6cFwGVmT9mRQ6xvxYdKqPuoSqgfy4lA8rQD/iyT/iWKpj5e1C7uE1D63Mk0kV/cRIYn&#xA;RlWJW/dJ8BPFljpzDb8q9qYqlnkmUC98x++pzH8cVTLT9RupPMesWz3Eb2sEdo0FvzjaWN5Fk9Rm&#xA;VTzVH4rx59SGptiqWaVKP+Vha2fG2t/+Iriqb/Wr5/MgWOQNpsVo63CBkJW5aRGj5LXmCY+R8MVY&#xA;F+cDhr/TKdopf+JJiqQeWNUtLax1G0mupbJ7r0jFcxerVTGxJFYSr78sVT7yr5slsLaZdf8AMA1a&#xA;4kZWR0tJIFQhaPQBTszb07fqVTz/AJWB5e/5aj/yKm/5oxVIL7zXpcvnDTtSSVja20LpLLwcULq4&#xA;6Ecv2h2xVN7vzh5PvVRbsx3SRuskYlt3kCujBlYckNCrKCD44ql3mTzjpN5+jRbyPL9XvobmUhHU&#xA;BIjU/aC7mu1MVTd/PnlmQcXuOYFdjDKeoIP7HgSMVSvzV5x0e+0C6srWVpZp1CIojdQPiBqSwUU2&#xA;xVMIPPfl1rOOGWcn92qyRtFIw6UINFIxVZeeefL/AOjp4YJSSYmSOJIpF6qQAKqqjFUF5Y84aLY6&#xA;Ba2V1MUljVw8ZjkbZnY9lI6HFU0Xz75bQHhcFQdyBDKKn/gMVSPyd5s0rTdNmhu5WhkkuHlVSjtU&#xA;MF/lDeGKp6PP3lwEkXJBY1YiKXc0pv8AB4DFUl0bzhpNtrmsXU0rRw3jxmByjnl6fIHYAkV5bbYq&#xA;nX+PvLnIt9ZPIgAn0pa0HT9j3xVJJfOGlHzfFqPqP9US19BpuD05cmbpTlTenTFU5PnnywZlmaYG&#xA;ZAVWQwy8gD1APCtDTFUj8w+bdLu9W0a4gkaSKymMk78HHFSV7MAT0PTFU+Pn7y41CbkmhqP3Upof&#xA;+AxVIvOfmzStS0qO3tJWlkEySEcHWiqDU1cKMVTuTz35YuITHNN6kUgo8bwyMpHgQUIOKoPXvOui&#xA;XWjXdtbzs8ssZREEcg3PuygYqu0bzzoUOkWdvNOySQwRxSIY5DQooU7qpHbFUZ/j/wAvKlFuGPEf&#xA;CoilHTsKqBiqS+T/ADfpGn6MtpdTNFNG7ErwdqhjUEFQ2KozSPNfl7TkukF+ZRc3U10P3Ey8fXbm&#xA;V+ya0J64qgvLfnDSbO71c3ErRrdXb3ETcHYFXJ/lBIPzxVGW/mvQItdvdVa/LG7t7a1WEQTDgts8&#xA;z1LUPIs1yew6DFUHZebtKh82ahfvIwtbmKNI5eDkVRVBqKcu3hiqPj82+W49Ym1NL1g1xBHbzxej&#xA;LRvRd2jevHYj1WB8dvDFWM+fNdsdXvLN7OQyJDG6uxVl3ZgafEAe2Ksh/J0RD9KSFR6g9FVeg5BW&#xA;5kgHwPEYq9J9VfHFXeqvjirTtG6MjgMjAhlNCCD1BGKsU/LBkXynFQAEzTE+/wC8I/UMVTjQ/NWj&#xA;a2+oJp0/qtpd1JY3YIpSaLZ6V6rWo5dKgjtiqA8qLBHqWvmNFQte7lQBUBa9vcnFUfYeZ9OvtZ1L&#xA;SIeYu9L9L6yH4rUTLyUqtefH/KKhTvxJoaKoHRlgHnDzDKEUScbQB6CtGiJbf3KiuKoqDzdpk3mC&#xA;fQgsq3cJZPVZR6TvHFDO6KwJNVjuozuBXelaHFUCTGfzIViBUaQWB2+19ZAr86bYqmU/mjTYfMNt&#xA;oDN/p91C1xGvKJR6a8gSA7q77r+wrU70GKoLXFgfzV5ddkVm53XxEAn4YSy7+x3GKojWfN+laRfW&#xA;dldczNeH4SvAIimRIQ0juyKKySqoUVY9hsaKofzesEr6J6iK/wDuThX4gD8JV6jfsaDFVfzR528v&#xA;eV7RLvWrpbWCQSlHcqAxhiaZkHIirMqHivc7Yqg/zHZG8n3poCytAVPcH10G30HFU/vL+2sbGe7l&#xA;+G3tYnlk4ipCRqWNB8hiqA1+a3u/K9/JxDxSWckiBgD/ALrLqaHuDQ4qpWurWGjeS4tTuz6dlp+n&#xA;C6uCoqRHDB6jkAeynFVe31ex1ry6NQtgzWN9bNLAZV4+pDIpKPxO/F0owB3odwDtiqH8kmKPytp4&#xA;RQoMZJAAFSWNTiqZaXq1pqemWmpWpJtb6GO5gLDi3pyoHWo7GjYqx/8ALxkTTtSAAAGpXQAG2wIo&#xA;MVZFZ3sk3r+onp+nK0abOOSrSjfGqdfao98VY/5WEMfmPzKURV5XEX2QB1Qk9Pck4qnsF7fPqF3D&#xA;NaCKyiWI2t36qsZmcMZB6YFU9Oi7k/FX2xVj+mCH/lYesScF5fVYKNQVqQoO/wBGKsr9VfHFXeqv&#xA;jirvVXxxV5b+cJU6jpjACphlBPegZafrxVJ/KGqS2mm6tBa3sVjqE4hNrLOyonwM3P4nSVQeLUFU&#xA;bx4mmKomHzJ+Zj/WYp9a8uRIyXCW9xFK5lV2il+rOAysnwymLnyXs1B0qqmHl3zL5wXWPV8xazob&#xA;6Wbcr6FhKwcT1Wj/AL0Vp9sH4vDbFWUt5u0NVLHULegFTSVCdvAA1xVj3kPzDplp5fS3uLuKGVJZ&#xA;SUkdUNGbkD8RFdjiqbafqfk7TmdrCWxtmkVEkaJ4lLLGWZQxB3oZGO/icVQPl/zNpMd7q7veRRrN&#xA;dc4y7hAy8aVXlSvTFUwt9Y8pW97cX0FxZR3l3xFzOskYdwn2Qxr2riqX6Z5n0hPMusyNeRKk4t/S&#xA;kLgI3pIVajn4TQt44qjItQ8mRarLq0ctiupzjjLeB4/UYFUUjlXusSA/6o8MVS8+ZdK/xwt19bi9&#xA;D9HGD1uQ4ep6wk48/s/ZHj+OKpyPMXlwXJuheWn1lkERm9WPkUUlgta9ASTiqV6p5m0l9f0aVbyJ&#xA;o4GnMsiuCqiSIqtWGw3xVF6hqHkzUZoJ7+SxuZrU1t5JHiZk+JXIBJ6F40YjpVR4DFUJ5k80aRI2&#xA;lFLyKQQ30U0npuH4oisCx41p9oYqj77WfKd/H6d7cWVynGROMkkbDjKhjkG56MjFT7YqlnnbzHpV&#xA;15bubaC8immlaIJHG6uTxlVzspNNlOKpre6/5X1Gxls726tZ7O5QpPbyyJxdG6q6k9D3BxVR1zzT&#xA;ozaLfRJfQO0lvJGiJIrMS6FQAqknqcVWWOv+X5/L9vY3l1bPDJaJBc28siUZTGEdGVj0IqDiqp+n&#xA;vLNjpcttZ3NrDAqyssELoAC5Z24op7sxNBiqH8reZ9Ih0CzhkvYY5I0KukkiowIY9mIOKozT9b8r&#xA;adaJaWV1a29rEKRwpKnFQBQBRy2A7AYqk/kvzHpdvZXyzXcUJkvZ5UWRwhKOQVIDUxVOLLzPp0Yn&#xA;+sanaOXmd4uE3SMn4QebvvTrxoPAYqlWgeZNKj1nXJnvIkjnmjMTu4UMFUqSpald8VTmPzHoCXEs&#xA;41GD1JgocG4UrRK04qWovXenXFWO/wCIbX/EutTWl9BFNPaLHZ3MjD0fWVBxq26kBuuKoKx1/wDM&#xA;CO/tvrfmLQJdPEkYuwC3rmFS3Mow4J6jVXqtNumKs0/xZon/AFcLb/kcn9cVd/izRP8Aq4W3/I5P&#xA;64qwP8x9Vs9QvbFrWdJxFFIHaNg4BZhQVFfDFUy/KfTdNuzqUl3bRXDx+isZlUOFDcy1A1RvxGKv&#xA;Q/0HoH/Vttf+RMf/ADTirv0HoH/Vttf+RMf/ADTirv0HoH/Vttf+RMf/ADTirv0HoH/Vttf+RMf/&#xA;ADTirGfJ2kaM93r3q2UEgjv5Y4w8atxRWNFXkDQYqm9oPJ93qV3psFjbm9sQjXUTWnDispYIQzxq&#xA;rBuDU4k4qkWlaXpLfmHrMDWcDW8dvEY4TGhRSVjJIUig64qnfq+SP03+g/q1p+lvT9f6n9XXn6P+&#xA;/fsU9Ovw8+nL4a12xVItV0nSB+YmjQLZwLbyW8jSwrGoRiqyFSygUPTFU/vf8H2V9aWE9hAby9r6&#xA;EMVmZjxVlVnf0o3EaBpFBd6Lv1xVLPOGh6HTRwljBGJdSghl9NFTlG/Lkp40qDTFU01UeTNJiSbU&#xA;raytYpC6pI8CcaxxPO9SFoKRQu2/hiqU+etN0QeTru6tbKCJ+MLxSJEsbgNKg8FYbHocVR8Ft5W0&#xA;/wAtQajqFnapbwWkctxM0CuQAgJY0VmJxV01v5V1HyzNqWn2drJbXFpJLbzrAqEgoSDQqrKfnuMV&#xA;QHkXTdDPk60uruzt5G4zPNNJErtRZXFSSCdlGKpnoknkfXbQ3mkQWN7ajgPWihQr+8hSdKEqOscy&#xA;N9PjiqXeT9D0OmsB7GCQRalPDF6iK/GNOPFRyrQCuKonSdU/LvV7qO101bC6uJYZLlIkhTl6UM31&#xA;eRyCu3GUFN++KpVpWk6QfzE1mBrOBreO3jaKFo1KKWWMsVUig64qyJrby2NXTS/0PGZXt3uvrH1R&#xA;fq4VHVOBl48fUJeoUb038MVY/qul6Sv5h6NAtnAtvJbymSERoEYhZCCVAoemKsg1C28t2L2aSaPH&#xA;L9duFtUMFosoRmRnDy8VPCP4KFugqK7YqkXnbR9GS40IRWUMQl1CGKX00VOUbuoZTxA2OKsivtL0&#xA;S3sri4j0q1lkhjeRIvRX4iqkhfgjkbenZSfY4q1p+l6RcWFtcXGjW1rcTRJJNbNFExidlBaMsFFe&#xA;JNK4qxzyZpOkS6p5i9azgkEV88cQeNWCIGaiqCKAfLFUx07UvJGoeZdV8uW+nwnUdHSCS75WqCIi&#xA;4BZRHJxo5WnxU6V+eKoW00XRD58v0NjAYlsoXSIxqUVmchmCU4gkKO2Ksk/Qegf9W21/5Ex/804q&#xA;81/NeysbW/04WlvHbh4pOYiRUBoy0qFA8cVQPk3U9Qs9I1saU0P6WdIms47ggKxUty6snZvHrirI&#xA;tB13zwdUj/TUunjTvSpL6BHqGXgp5A89gGBHQ/d0VZT+m7P/AH/H/wAEP64q79N2f+/4/wDgh/XF&#xA;Xfpuz/3/AB/8EP64qxzyjrFmtzrbevHSS+lkU8l3VmNGG/Q4qmGlw6Jpl9qN7bXLGbVJvrF2JJzI&#xA;pk4hOSqxPH4FVRT9kAdBiqU6ZqtqPP8Aq83rJwkgjVW5ChKrGDQ+2Kpr9W8vfp/9P8x+lRH6H1j1&#xA;m/uKf3PHlx9Pl8fGn2t+uKpVqeqWzeftInEqFI4JAzchQFlkAqcVTm9XQ7zUbXUZZil5ZgrFJDcS&#xA;Q1RmVykgjdRIhaNTxao+gmqqB82a1ZH9E1uI/wB3qMErfEuyJXkx36Cu+Ko7XY/L2u6edP1T07i0&#xA;MkcpjL8fiicSLupBoStGHdag7E4qgfPOq203la9iSVGd/TCqGBJpKh6fRiqv6mjat5VTS76RHs7u&#xA;0SGdFkCkqyAEAg1GKtvNoul+WJdNsHSGztrWSKCP1OVF4Gg5MSx+k4qhPJmoWX+EbW0mlQArMkiF&#xA;gDRpH9/A4qi/Ltj5X8u29zb6OsVrDdzfWZ0V6hpfSjhL7nYssK8qdTU9ScVQ/lPWrIfpalxH+81G&#xA;eVfiXdHpxYb9DTbFV2jaL5O0a9F9psMNvd+m8LzK/wATrJ6XLnU/Ef8AR0oT/E4qgtM1S2Xz/q8x&#xA;mQJJBGFbkKHisYND7YqyQanZi5a4+tVLIsfpmQemOJJ5Ba05HlufYYqxvU9VtT5/0ib1k4RwSKzc&#xA;hQFlkAqffFWTSatYu0bNcKDG3NeMvEE0K/EFIDCjdG279QMVY75w1a1kudEImQ+nfwyN8Q2VXUlj&#xA;7DFU+vtY52VwlldQxXjROLaWQhkWUqeDMoO4DUqMVdYX+n2VjbWUVwrR20SQozuGYrGoUFiTudsV&#xA;Y/5P1a0j1HXiZkHq3ryJ8Q3Us248Riqc2s1jBq99qIu0Zr1IEMdVAX0A4BrXevqYqk8uscfNOqy2&#xA;c0Rum05FtfUYcDMpYqDv4kV9sVTPy/r2qNaSjXHtY7pJnWH6vIHVoVoEdiePxNufsj5Yqw/8z72G&#xA;6vtPMbq/CKTlxINKstOnyxVV/LDQtI1V9T/SNutx6Ag9LkWFOfqcvskfyjFWef4G8of9W6P/AIJ/&#xA;+asVd/gbyh/1bo/+Cf8A5qxVIfKflTy5drq/1myWX6vqdzbw8mf4YoyAi7N2riqff4G8of8AVuj/&#xA;AOCf/mrFUi0fyj5ak8y67aSWavb231U28ZZ6J6sZZ6b+OKp7/gbyh/1bo/8Agn/5qxVIf8H+Wh53&#xA;+p/U1+qHTvrHo8n4+r63p8utfs4qn3+BvKH/AFbo/wDgn/5qxVJNT8oeWYvM2iwR2SrBcrc+vFyf&#xA;i3pRhk79i2Kp3/gbyh/1bo/+Cf8A5qxVr/Avk/8A6tsf/BP/AM1Yq3/gbyh/1bo/+Cf/AJqxVr/A&#xA;3k//AKtsf/BP/wA1Yq3/AIG8of8AVtj/AOCf/mrFXf4G8of9W2P/AIJ/+asVa/wN5P8A+rbH/wAE&#xA;/wDzVirf+BvKH/Vuj/4J/wDmrFWv8C+T/wDq2x/8E/8AzVirf+BvKH/Vuj/4J/8AmrFUi0vyf5ak&#xA;8061bSWYa3tktTBEWeimZXL969VGKp7/AIG8of8AVuj/AOCf/mrFUBr3krypDomoTw2CRzRW8skU&#xA;is9QyIWU/a8Riqn5Z8neV7jQLGe4sVlmliDySMz1JO5/axVMm8ieTyCDpqb/AOVIP+NsVSDyP5T8&#xA;uXugpcXlms87SyAuzPWitQDYjwxVPo/JXkyWNZI7CJ43AZHV3KlSKgghtwcVY35S8q+XrvUteS5t&#xA;Fljtb14bZCzgJGGagFCK9O+Kp5B5X8jzX91YJpy/WLRYnmBMlKTcuFDy3+wcVSq18o+W286Xtm1o&#xA;DaRWcUscPJ+Id3Kseteg8cVTxvJfktXRGsIleQkRqXcFiBU0HLfYVxVgP5naLpWl3tgmnW4t0mjk&#xA;MgUk1KstPtE+OKrfy+vdQtLPWW06JZr1vqixRv8AZ3d1Zj8SVCqxalRirP8ARNbv7zSre51GzOnX&#xA;sgJmsy4kMZDECrLQGoAPtiqO+vr44qwa113XtOstVl0TThqc761d+rCZBGBHx5A8ie7BR0PXpirL&#xA;dH1i+utOin1C2+pXbl+drzD8AHYJ8Q61QA4qx99W1C11bzPc6Xbi9vQLEQ25YKG+DixrUfZWrUrv&#xA;SmKoW38/eepVEp8nuscm8aG7RWApsX5ICCT247fdVVMZtVZPN73SRNJKmjswtlK82YTcvTFTx5Hp&#xA;1xVE+VPMfmTULaVtf0oaTcJ6YWJZVmDEoDLRlqKLJUA13G+Ku1a+Q+adBPLdRd7fOIf0xVPPr6+O&#xA;Ku+vr44q76+vjirvr6+OKu+vr44q76+vjirvr6+OKu+vr44q76+vjirvr6+OKsTuNZv7PVfNN1pd&#xA;p+kdSW3tPqdlzWP1ZQjhVZ2ICrVhyPYYqnWga7ql7YtNqll+j7j1XVYOYcmMH4GJGwLDqO2Kr/MF&#xA;8p0HUhXrazD742xVjtn5j8x2OmaTDpmkjULZrdPUlMwioxfiRWjkcBQ/ZNa/5JxVldjqc8tlby3S&#xA;ejcvEjTwg1CSFQWWvsdsVYx5YttO1TyXLpeoR+vY3hmiuYeTLyR23HJCrD6DiqM8reUPKnleOFdG&#xA;tTA0NutosjSyyMYkC0B5swr8A3piqh5NvFXUvMO+7X7tT5s2KonStJurLzZrWuSapLcW2qR20cGn&#xA;MEEduYAwYhgOTci1RU7b4q1a3qjzzftXc2MI+52/riqCv/y48h32q2mq3FgWvbK6N9C4nnA9ff4i&#xA;oehoWrTpiqS/mrOJb/TqGvGKX8WXFVi/lT5rX7MluvylYf8AGuKt/wDKrfN3+/oP+Rr/APNOKu/5&#xA;Vb5u/wB/Qf8AI1/+acVaX8q/Ni/ZltxXrSV/+acVb/5Vb5u/39B/yNf/AJpxVoflV5sBJEtuCepE&#xA;rb/8Lirf/KrfN3+/oP8Aka//ADTirX/KqvNfLl6lvy/m9Vq/8RxVv/lVvm7/AH9B/wAjX/5pxVo/&#xA;lV5rLBjJblh0Jlav/EcVb/5Vb5u/39B/yNf/AJpxV3/KrfN3+/oP+Rr/APNOKu/5Vb5u/wB/Qf8A&#xA;I1/+acVd/wAqt83f7+g/5Gv/AM04q7/lVvm7/f0H/I1/+acVd/yq3zd/v6D/AJGv/wA04q7/AJVb&#xA;5u/39B/yNf8A5pxV3/KrfN3+/oP+Rr/804q7/lVvm7/f0H/I1/8AmnFXf8qt83f7+g/5Gv8A804q&#xA;0Pyq81glhJbhj1Ilav8AxHFW/wDlVvm7/f0H/I1/+acVab8q/NjCjS25B7GVyP8AiOKuX8q/Niii&#xA;y24HgJXH/GuKtn8rPNpFDNbkHqPVf/mnFWl/KrzWgosluoO5AlYf8a4q3/yq3zd/v6D/AJGv/wA0&#xA;4q0Pyq81g1EluCepErf804q3/wAqt83f7+g/5Gv/AM04q1/yqrzZy5erb8vH1Wr/AMRxVv8A5Vb5&#xA;u/39B/yNf/mnFWm/KnzW32pLdvnKx/41xV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:40DB505D5E9CE711B52ED843A390C968</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:40DB505D5E9CE711B52ED843A390C968</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:7BAEDD42EC9BE711A551EBBBCA7554E7</stRef:instanceID>
            <stRef:documentID>xmp.did:7BAEDD42EC9BE711A551EBBBCA7554E7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5E1D86CD949BE711A551EBBBCA7554E7</stEvt:instanceID>
                  <stEvt:when>2017-09-17T22:32:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7BAEDD42EC9BE711A551EBBBCA7554E7</stEvt:instanceID>
                  <stEvt:when>2017-09-18T00:22:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:40DB505D5E9CE711B52ED843A390C968</stEvt:instanceID>
                  <stEvt:when>2017-09-18T13:45:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>177.865234</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -177.865 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 177.865 li
450 177.865 li
450 0 li
cp
clp
450 177.865 mo
0 177.865 li
0 0 li
450 0 li
450 177.865 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.560784 .560784 .560784 rgb
f
29.5366 21.9595 mo
8.79883 21.9595 li
7.69434 21.9595 6.79883 21.064 6.79883 19.9595 cv
6.79883 11.0059 li
6.79883 9.90137 7.69434 9.00586 8.79883 9.00586 cv
29.5366 9.00586 li
30.6411 9.00586 31.5366 9.90137 31.5366 11.0059 cv
31.5366 19.9595 li
31.5366 21.064 30.6411 21.9595 29.5366 21.9595 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 19.1675 21.9595 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [.85098 .85098 .85098 ]
/N 2.11366 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [1 1 1 ]
/N 1 
>>
]
/Bounds [.991903 ]
/Encode [1 0 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 19.1675 21.9595 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~g"G'3g=k98gY:N=gt^`Ah;7#Fhr!>Ki8EPPiSibTio8tXj5]4]jQ,FajlPXek2tjikND'mkih9ql07Ht
lK[[#lg*m'm-O**mHs<.mI'E1mdBQ4n*f`7nF5r:naZ/>naZ2@o()ACoCMSFoCV\Io^qeKp%A"Np%A%P
p@e4Rp@n=Up\4FVq"XXZq"XXZq>'j^q>'j^q>0saqYL'bqYL'cqtp9fqtp9fqtp<hr;?Kjr;?Kjr;?Kk
rVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2rt
~>
<~g"G'3g=k98gY:N=gt^`Ah;7#Fhr!>Ki8EPPiSibTio8tXj5]4]jQ,FajlPXek2tjikND'mkih9ql07Ht
lK[[#lg*m'm-O**mHs<.mI'E1mdBQ4n*f`7nF5r:naZ/>naZ2@o()ACoCMSFoCV\Io^qeKp%A"Np%A%P
p@e4Rp@n=Up\4FVq"XXZq"XXZq>'j^q>'j^q>0saqYL'bqYL'cqtp9fqtp9fqtp<hr;?Kjr;?Kjr;?Kk
rVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2rt
~>
<~g"G'3g=k98gY:N=gt^`Ah;7#Fhr!>Ki8EPPiSibTio8tXj5]4]jQ,FajlPXek2tjikND'mkih9ql07Ht
lK[[#lg*m'm-O**mHs<.mI'E1mdBQ4n*f`7nF5r:naZ/>naZ2@o()ACoCMSFoCV\Io^qeKp%A"Np%A%P
p@e4Rp@n=Up\4FVq"XXZq"XXZq>'j^q>'j^q>0saqYL'bqYL'cqtp9fqtp9fqtp<hr;?Kjr;?Kjr;?Kk
rVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2rt
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
8.79883 9.15576 mo
7.77881 9.15576 6.94873 9.98584 6.94873 11.0059 cv
6.94873 19.9595 li
6.94873 20.9795 7.77881 21.8096 8.79883 21.8096 cv
29.5366 21.8096 li
30.5566 21.8096 31.3867 20.9795 31.3867 19.9595 cv
31.3867 11.0059 li
31.3867 9.98584 30.5566 9.15576 29.5366 9.15576 cv
8.79883 9.15576 li
cp
29.5366 22.1094 mo
8.79883 22.1094 li
7.61328 22.1094 6.64893 21.145 6.64893 19.9595 cv
6.64893 11.0059 li
6.64893 9.82031 7.61328 8.85596 8.79883 8.85596 cv
29.5366 8.85596 li
30.7222 8.85596 31.6865 9.82031 31.6865 11.0059 cv
31.6865 19.9595 li
31.6865 21.145 30.7222 22.1094 29.5366 22.1094 cv
cp
.4 .4 .4 rgb
f
56.9624 21.959 mo
36.2764 21.9595 li
35.1719 21.9595 34.2764 21.064 34.2764 19.9595 cv
34.2764 11.0059 li
34.2764 9.90137 35.1719 9.00586 36.2764 9.00586 cv
56.9624 9.00586 li
58.0669 9.00586 58.9624 9.90137 58.9624 11.0059 cv
58.9624 19.959 li
58.9624 21.0635 58.0669 21.959 56.9624 21.959 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 46.6196 21.9595 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 46.6196 21.9595 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
36.2764 9.15576 mo
35.2563 9.15576 34.4263 9.98584 34.4263 11.0059 cv
34.4263 19.9595 li
34.4263 20.9795 35.2563 21.8096 36.2764 21.8096 cv
56.9624 21.8091 li
57.9824 21.8091 58.8125 20.979 58.8125 19.959 cv
58.8125 11.0059 li
58.8125 9.98584 57.9824 9.15576 56.9624 9.15576 cv
36.2764 9.15576 li
cp
36.2764 22.1094 mo
35.0908 22.1094 34.1265 21.145 34.1265 19.9595 cv
34.1265 11.0059 li
34.1265 9.82031 35.0908 8.85596 36.2764 8.85596 cv
56.9624 8.85596 li
58.1479 8.85596 59.1123 9.82031 59.1123 11.0059 cv
59.1123 19.959 li
59.1123 21.1445 58.1479 22.1089 56.9624 22.1089 cv
36.2764 22.1094 li
cp
.4 .4 .4 rgb
f
84.3872 21.9595 mo
63.7544 21.9595 li
62.6499 21.9595 61.7544 21.064 61.7544 19.9595 cv
61.7544 11.0059 li
61.7544 9.90137 62.6499 9.00586 63.7544 9.00586 cv
84.3872 9.00586 li
85.4917 9.00586 86.3872 9.90137 86.3872 11.0059 cv
86.3872 19.9595 li
86.3872 21.064 85.4917 21.9595 84.3872 21.9595 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 74.0708 21.9595 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 74.0708 21.9595 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
63.7544 9.15576 mo
62.7344 9.15576 61.9043 9.98584 61.9043 11.0059 cv
61.9043 19.9595 li
61.9043 20.9795 62.7344 21.8096 63.7544 21.8096 cv
84.3872 21.8096 li
85.4072 21.8096 86.2373 20.9795 86.2373 19.9595 cv
86.2373 11.0059 li
86.2373 9.98584 85.4072 9.15576 84.3872 9.15576 cv
63.7544 9.15576 li
cp
84.3872 22.1094 mo
63.7544 22.1094 li
62.5688 22.1094 61.6045 21.145 61.6045 19.9595 cv
61.6045 11.0059 li
61.6045 9.82031 62.5688 8.85596 63.7544 8.85596 cv
84.3872 8.85596 li
85.5728 8.85596 86.5371 9.82031 86.5371 11.0059 cv
86.5371 19.9595 li
86.5371 21.145 85.5728 22.1094 84.3872 22.1094 cv
cp
.4 .4 .4 rgb
f
111.812 21.9595 mo
91.2314 21.9595 li
90.127 21.9595 89.2314 21.064 89.2314 19.9595 cv
89.2314 11.0059 li
89.2314 9.90137 90.127 9.00586 91.2314 9.00586 cv
111.812 9.00586 li
112.917 9.00586 113.812 9.90137 113.812 11.0059 cv
113.812 19.9595 li
113.812 21.064 112.917 21.9595 111.812 21.9595 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 101.522 21.9595 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 101.522 21.9595 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
91.2314 9.15576 mo
90.2114 9.15576 89.3813 9.98584 89.3813 11.0059 cv
89.3813 19.9595 li
89.3813 20.9795 90.2114 21.8096 91.2314 21.8096 cv
111.812 21.8096 li
112.832 21.8096 113.662 20.9795 113.662 19.9595 cv
113.662 11.0059 li
113.662 9.98584 112.832 9.15576 111.812 9.15576 cv
91.2314 9.15576 li
cp
111.812 22.1094 mo
91.2314 22.1094 li
90.0459 22.1094 89.0815 21.145 89.0815 19.9595 cv
89.0815 11.0059 li
89.0815 9.82031 90.0459 8.85596 91.2314 8.85596 cv
111.812 8.85596 li
112.998 8.85596 113.962 9.82031 113.962 11.0059 cv
113.962 19.9595 li
113.962 21.145 112.998 22.1094 111.812 22.1094 cv
cp
.4 .4 .4 rgb
f
139.238 21.9595 mo
118.709 21.9595 li
117.604 21.9595 116.709 21.064 116.709 19.9595 cv
116.709 11.0059 li
116.709 9.90137 117.604 9.00586 118.709 9.00586 cv
139.238 9.00586 li
140.342 9.00586 141.238 9.90137 141.238 11.0059 cv
141.238 19.9595 li
141.238 21.064 140.342 21.9595 139.238 21.9595 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 128.973 21.9595 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 128.973 21.9595 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
118.709 9.15576 mo
117.689 9.15576 116.859 9.98584 116.859 11.0059 cv
116.859 19.9595 li
116.859 20.9795 117.689 21.8096 118.709 21.8096 cv
139.238 21.8096 li
140.258 21.8096 141.088 20.9795 141.088 19.9595 cv
141.088 11.0059 li
141.088 9.98584 140.258 9.15576 139.238 9.15576 cv
118.709 9.15576 li
cp
139.238 22.1094 mo
118.709 22.1094 li
117.523 22.1094 116.559 21.145 116.559 19.9595 cv
116.559 11.0059 li
116.559 9.82031 117.523 8.85596 118.709 8.85596 cv
139.238 8.85596 li
140.423 8.85596 141.388 9.82031 141.388 11.0059 cv
141.388 19.9595 li
141.388 21.145 140.423 22.1094 139.238 22.1094 cv
cp
.4 .4 .4 rgb
f
166.663 21.959 mo
146.186 21.959 li
145.082 21.959 144.186 21.0635 144.186 19.959 cv
144.186 11.0059 li
144.186 9.90137 145.082 9.00586 146.186 9.00586 cv
166.663 9.00586 li
167.768 9.00586 168.663 9.90137 168.663 11.0059 cv
168.663 19.959 li
168.663 21.0635 167.768 21.959 166.663 21.959 cv
cp
level3{
gsave
clp
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 156.424 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 156.424 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
146.186 9.15576 mo
145.166 9.15576 144.336 9.98584 144.336 11.0059 cv
144.336 19.959 li
144.336 20.979 145.166 21.8091 146.186 21.8091 cv
166.663 21.8091 li
167.683 21.8091 168.513 20.979 168.513 19.959 cv
168.513 11.0059 li
168.513 9.98584 167.683 9.15576 166.663 9.15576 cv
146.186 9.15576 li
cp
166.663 22.1089 mo
146.186 22.1089 li
145 22.1089 144.036 21.1445 144.036 19.959 cv
144.036 11.0059 li
144.036 9.82031 145 8.85596 146.186 8.85596 cv
166.663 8.85596 li
167.849 8.85596 168.813 9.82031 168.813 11.0059 cv
168.813 19.959 li
168.813 21.1445 167.849 22.1089 166.663 22.1089 cv
cp
.4 .4 .4 rgb
f
194.088 21.959 mo
173.664 21.959 li
172.56 21.959 171.664 21.0635 171.664 19.959 cv
171.664 11.0059 li
171.664 9.90137 172.56 9.00586 173.664 9.00586 cv
194.088 9.00586 li
195.192 9.00586 196.088 9.90137 196.088 11.0059 cv
196.088 19.959 li
196.088 21.0635 195.192 21.959 194.088 21.959 cv
cp
level3{
gsave
clp
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 183.876 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 183.876 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
173.664 9.15576 mo
172.644 9.15576 171.814 9.98584 171.814 11.0059 cv
171.814 19.959 li
171.814 20.979 172.644 21.8091 173.664 21.8091 cv
194.088 21.8091 li
195.108 21.8091 195.938 20.979 195.938 19.959 cv
195.938 11.0059 li
195.938 9.98584 195.108 9.15576 194.088 9.15576 cv
173.664 9.15576 li
cp
194.088 22.1089 mo
173.664 22.1089 li
172.479 22.1089 171.514 21.1445 171.514 19.959 cv
171.514 11.0059 li
171.514 9.82031 172.479 8.85596 173.664 8.85596 cv
194.088 8.85596 li
195.273 8.85596 196.238 9.82031 196.238 11.0059 cv
196.238 19.959 li
196.238 21.1445 195.273 22.1089 194.088 22.1089 cv
cp
.4 .4 .4 rgb
f
221.513 21.959 mo
201.141 21.9595 li
200.037 21.9595 199.141 21.064 199.141 19.9595 cv
199.141 11.0059 li
199.141 9.90137 200.037 9.00586 201.141 9.00586 cv
221.513 9.00586 li
222.618 9.00586 223.513 9.90137 223.513 11.0059 cv
223.513 19.959 li
223.513 21.0635 222.618 21.959 221.513 21.959 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 211.327 21.9595 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 211.327 21.9595 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
201.141 9.15576 mo
200.121 9.15576 199.291 9.98584 199.291 11.0059 cv
199.291 19.9595 li
199.291 20.9795 200.121 21.8096 201.141 21.8096 cv
221.513 21.8091 li
222.533 21.8091 223.363 20.979 223.363 19.959 cv
223.363 11.0059 li
223.363 9.98584 222.533 9.15576 221.513 9.15576 cv
201.141 9.15576 li
cp
201.141 22.1094 mo
199.956 22.1094 198.991 21.145 198.991 19.9595 cv
198.991 11.0059 li
198.991 9.82031 199.956 8.85596 201.141 8.85596 cv
221.513 8.85596 li
222.699 8.85596 223.663 9.82031 223.663 11.0059 cv
223.663 19.959 li
223.663 21.1445 222.699 22.1089 221.513 22.1089 cv
201.141 22.1094 li
cp
.4 .4 .4 rgb
f
248.938 21.959 mo
228.619 21.959 li
227.515 21.959 226.619 21.0635 226.619 19.959 cv
226.619 11.0054 li
226.619 9.90088 227.515 9.00537 228.619 9.00537 cv
248.938 9.00537 li
250.043 9.00537 250.938 9.90088 250.938 11.0054 cv
250.938 19.959 li
250.938 21.0635 250.043 21.959 248.938 21.959 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 238.779 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 238.779 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
228.619 9.15527 mo
227.599 9.15527 226.77 9.98535 226.77 11.0054 cv
226.77 19.959 li
226.77 20.979 227.599 21.8091 228.619 21.8091 cv
248.938 21.8091 li
249.959 21.8091 250.788 20.979 250.788 19.959 cv
250.788 11.0054 li
250.788 9.98535 249.959 9.15527 248.938 9.15527 cv
228.619 9.15527 li
cp
248.938 22.1089 mo
228.619 22.1089 li
227.434 22.1089 226.469 21.1445 226.469 19.959 cv
226.469 11.0054 li
226.469 9.81982 227.434 8.85547 228.619 8.85547 cv
248.938 8.85547 li
250.124 8.85547 251.089 9.81982 251.089 11.0054 cv
251.089 19.959 li
251.089 21.1445 250.124 22.1089 248.938 22.1089 cv
cp
.4 .4 .4 rgb
f
276.363 21.959 mo
256.096 21.959 li
254.991 21.959 254.096 21.0635 254.096 19.959 cv
254.096 11.0054 li
254.096 9.90088 254.991 9.00537 256.096 9.00537 cv
276.363 9.00537 li
277.468 9.00537 278.363 9.90088 278.363 11.0054 cv
278.363 19.959 li
278.363 21.0635 277.468 21.959 276.363 21.959 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 266.229 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 266.229 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
256.096 9.15527 mo
255.075 9.15527 254.246 9.98535 254.246 11.0054 cv
254.246 19.959 li
254.246 20.979 255.075 21.8091 256.096 21.8091 cv
276.363 21.8091 li
277.384 21.8091 278.213 20.979 278.213 19.959 cv
278.213 11.0054 li
278.213 9.98535 277.384 9.15527 276.363 9.15527 cv
256.096 9.15527 li
cp
276.363 22.1089 mo
256.096 22.1089 li
254.91 22.1089 253.945 21.1445 253.945 19.959 cv
253.945 11.0054 li
253.945 9.81982 254.91 8.85547 256.096 8.85547 cv
276.363 8.85547 li
277.549 8.85547 278.514 9.81982 278.514 11.0054 cv
278.514 19.959 li
278.514 21.1445 277.549 22.1089 276.363 22.1089 cv
cp
.4 .4 .4 rgb
f
303.788 21.959 mo
283.573 21.959 li
282.469 21.959 281.573 21.0635 281.573 19.959 cv
281.573 11.0059 li
281.573 9.90137 282.469 9.00586 283.573 9.00586 cv
303.788 9.00537 li
304.893 9.00537 305.788 9.90088 305.788 11.0054 cv
305.788 19.959 li
305.788 21.0635 304.893 21.959 303.788 21.959 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 293.681 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 293.681 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
303.788 9.15527 mo
283.573 9.15576 li
282.553 9.15576 281.724 9.98584 281.724 11.0059 cv
281.724 19.959 li
281.724 20.979 282.553 21.8091 283.573 21.8091 cv
303.788 21.8091 li
304.809 21.8091 305.638 20.979 305.638 19.959 cv
305.638 11.0054 li
305.638 9.98535 304.809 9.15527 303.788 9.15527 cv
cp
303.788 22.1089 mo
283.573 22.1089 li
282.388 22.1089 281.423 21.1445 281.423 19.959 cv
281.423 11.0059 li
281.423 9.82031 282.388 8.85596 283.573 8.85596 cv
303.788 8.85547 li
304.974 8.85547 305.938 9.81982 305.938 11.0054 cv
305.938 19.959 li
305.938 21.1445 304.974 22.1089 303.788 22.1089 cv
cp
.4 .4 .4 rgb
f
331.213 21.959 mo
311.051 21.959 li
309.946 21.959 309.051 21.0635 309.051 19.959 cv
309.051 11.0059 li
309.051 9.90137 309.946 9.00586 311.051 9.00586 cv
331.213 9.00586 li
332.317 9.00586 333.213 9.90137 333.213 11.0059 cv
333.213 19.959 li
333.213 21.0635 332.317 21.959 331.213 21.959 cv
cp
level3{
gsave
clp
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 321.132 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 321.132 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
311.051 9.15576 mo
310.03 9.15576 309.201 9.98584 309.201 11.0059 cv
309.201 19.959 li
309.201 20.979 310.03 21.8091 311.051 21.8091 cv
331.213 21.8091 li
332.233 21.8091 333.063 20.979 333.063 19.959 cv
333.063 11.0059 li
333.063 9.98584 332.233 9.15576 331.213 9.15576 cv
311.051 9.15576 li
cp
331.213 22.1089 mo
311.051 22.1089 li
309.865 22.1089 308.9 21.1445 308.9 19.959 cv
308.9 11.0059 li
308.9 9.82031 309.865 8.85596 311.051 8.85596 cv
331.213 8.85596 li
332.398 8.85596 333.363 9.82031 333.363 11.0059 cv
333.363 19.959 li
333.363 21.1445 332.398 22.1089 331.213 22.1089 cv
cp
.4 .4 .4 rgb
f
358.639 21.959 mo
338.528 21.959 li
337.424 21.959 336.528 21.0635 336.528 19.959 cv
336.528 11.0059 li
336.528 9.90137 337.424 9.00586 338.528 9.00586 cv
358.639 9.00586 li
359.743 9.00586 360.639 9.90137 360.639 11.0059 cv
360.639 19.959 li
360.639 21.0635 359.743 21.959 358.639 21.959 cv
cp
level3{
gsave
clp
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 348.584 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 348.584 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
338.528 9.15576 mo
337.508 9.15576 336.679 9.98584 336.679 11.0059 cv
336.679 19.959 li
336.679 20.979 337.508 21.8091 338.528 21.8091 cv
358.639 21.8091 li
359.659 21.8091 360.488 20.979 360.488 19.959 cv
360.488 11.0059 li
360.488 9.98584 359.659 9.15576 358.639 9.15576 cv
338.528 9.15576 li
cp
358.639 22.1089 mo
338.528 22.1089 li
337.343 22.1089 336.378 21.1445 336.378 19.959 cv
336.378 11.0059 li
336.378 9.82031 337.343 8.85596 338.528 8.85596 cv
358.639 8.85596 li
359.824 8.85596 360.789 9.82031 360.789 11.0059 cv
360.789 19.959 li
360.789 21.1445 359.824 22.1089 358.639 22.1089 cv
cp
.4 .4 .4 rgb
f
386.064 21.959 mo
366.006 21.959 li
364.901 21.959 364.006 21.0635 364.006 19.959 cv
364.006 11.0059 li
364.006 9.90137 364.901 9.00586 366.006 9.00586 cv
386.064 9.00586 li
387.169 9.00586 388.064 9.90137 388.064 11.0059 cv
388.064 19.959 li
388.064 21.0635 387.169 21.959 386.064 21.959 cv
cp
level3{
gsave
clp
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 376.035 21.959 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.66199e-007 -12.9531 12.9531 -5.66199e-007 376.035 21.959 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
366.006 9.15576 mo
364.985 9.15576 364.156 9.98584 364.156 11.0059 cv
364.156 19.959 li
364.156 20.979 364.985 21.8091 366.006 21.8091 cv
386.064 21.8091 li
387.085 21.8091 387.914 20.979 387.914 19.959 cv
387.914 11.0059 li
387.914 9.98584 387.085 9.15576 386.064 9.15576 cv
366.006 9.15576 li
cp
386.064 22.1089 mo
366.006 22.1089 li
364.82 22.1089 363.855 21.1445 363.855 19.959 cv
363.855 11.0059 li
363.855 9.82031 364.82 8.85596 366.006 8.85596 cv
386.064 8.85596 li
387.25 8.85596 388.215 9.82031 388.215 11.0059 cv
388.215 19.959 li
388.215 21.1445 387.25 22.1089 386.064 22.1089 cv
cp
.4 .4 .4 rgb
f
413.489 21.959 mo
393.482 21.9595 li
392.378 21.9595 391.482 21.064 391.482 19.9595 cv
391.482 11.0059 li
391.482 9.90137 392.378 9.00586 393.482 9.00586 cv
413.489 9.00586 li
414.594 9.00586 415.489 9.90137 415.489 11.0059 cv
415.489 19.959 li
415.489 21.0635 414.594 21.959 413.489 21.959 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 403.486 21.9595 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 403.486 21.9595 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
393.482 9.15576 mo
392.462 9.15576 391.633 9.98584 391.633 11.0059 cv
391.633 19.9595 li
391.633 20.9795 392.462 21.8096 393.482 21.8096 cv
413.489 21.8091 li
414.51 21.8091 415.339 20.979 415.339 19.959 cv
415.339 11.0059 li
415.339 9.98584 414.51 9.15576 413.489 9.15576 cv
393.482 9.15576 li
cp
393.482 22.1094 mo
392.297 22.1094 391.332 21.145 391.332 19.9595 cv
391.332 11.0059 li
391.332 9.82031 392.297 8.85596 393.482 8.85596 cv
413.489 8.85596 li
414.675 8.85596 415.64 9.82031 415.64 11.0059 cv
415.64 19.959 li
415.64 21.1445 414.675 22.1089 413.489 22.1089 cv
393.482 22.1094 li
cp
.4 .4 .4 rgb
f
440.914 21.9595 mo
420.961 21.9595 li
419.856 21.9595 418.961 21.064 418.961 19.9595 cv
418.961 11.0059 li
418.961 9.90137 419.856 9.00586 420.961 9.00586 cv
440.914 9.00586 li
442.019 9.00586 442.914 9.90137 442.914 11.0059 cv
442.914 19.9595 li
442.914 21.064 442.019 21.9595 440.914 21.9595 cv
cp
level3{
gsave
clp
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 430.938 21.9595 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.6622e-007 -12.9536 12.9536 -5.6622e-007 430.938 21.9595 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
420.961 9.15576 mo
419.94 9.15576 419.111 9.98584 419.111 11.0059 cv
419.111 19.9595 li
419.111 20.9795 419.94 21.8096 420.961 21.8096 cv
440.914 21.8096 li
441.935 21.8096 442.764 20.9795 442.764 19.9595 cv
442.764 11.0059 li
442.764 9.98584 441.935 9.15576 440.914 9.15576 cv
420.961 9.15576 li
cp
440.914 22.1094 mo
420.961 22.1094 li
419.775 22.1094 418.811 21.145 418.811 19.9595 cv
418.811 11.0059 li
418.811 9.82031 419.775 8.85596 420.961 8.85596 cv
440.914 8.85596 li
442.1 8.85596 443.064 9.82031 443.064 11.0059 cv
443.064 19.9595 li
443.064 21.145 442.1 22.1094 440.914 22.1094 cv
cp
.4 .4 .4 rgb
f
31.8901 51.7168 mo
8.79883 51.7168 li
7.69434 51.7168 6.79883 50.8213 6.79883 49.7168 cv
6.79883 26.6255 li
6.79883 25.521 7.69434 24.6255 8.79883 24.6255 cv
31.8901 24.6255 li
32.9946 24.6255 33.8901 25.521 33.8901 26.6255 cv
33.8901 49.7168 li
33.8901 50.8213 32.9946 51.7168 31.8901 51.7168 cv
cp
level3{
gsave
clp
[-1.1842e-006 -27.0913 27.0913 -1.1842e-006 20.3442 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1842e-006 -27.0913 27.0913 -1.1842e-006 20.3442 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
8.79883 24.7754 mo
7.77881 24.7754 6.94873 25.6055 6.94873 26.6255 cv
6.94873 49.7168 li
6.94873 50.7368 7.77881 51.5669 8.79883 51.5669 cv
31.8901 51.5669 li
32.9102 51.5669 33.7402 50.7368 33.7402 49.7168 cv
33.7402 26.6255 li
33.7402 25.6055 32.9102 24.7754 31.8901 24.7754 cv
8.79883 24.7754 li
cp
31.8901 51.8667 mo
8.79883 51.8667 li
7.61328 51.8667 6.64893 50.9023 6.64893 49.7168 cv
6.64893 26.6255 li
6.64893 25.4399 7.61328 24.4756 8.79883 24.4756 cv
31.8901 24.4756 li
33.0757 24.4756 34.04 25.4399 34.04 26.6255 cv
34.04 49.7168 li
34.04 50.9023 33.0757 51.8667 31.8901 51.8667 cv
cp
.4 .4 .4 rgb
f
62.2329 51.7168 mo
39.1411 51.7168 li
38.0366 51.7168 37.1411 50.8213 37.1411 49.7168 cv
37.1411 26.625 li
37.1411 25.5205 38.0366 24.625 39.1411 24.625 cv
62.2329 24.625 li
63.3374 24.625 64.2329 25.5205 64.2329 26.625 cv
64.2329 49.7168 li
64.2329 50.8213 63.3374 51.7168 62.2329 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 50.687 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 50.687 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
39.1411 24.7749 mo
38.1211 24.7749 37.291 25.605 37.291 26.625 cv
37.291 49.7168 li
37.291 50.7368 38.1211 51.5669 39.1411 51.5669 cv
62.2329 51.5669 li
63.2529 51.5669 64.083 50.7368 64.083 49.7168 cv
64.083 26.625 li
64.083 25.605 63.2529 24.7749 62.2329 24.7749 cv
39.1411 24.7749 li
cp
62.2329 51.8667 mo
39.1411 51.8667 li
37.9556 51.8667 36.9912 50.9023 36.9912 49.7168 cv
36.9912 26.625 li
36.9912 25.4395 37.9556 24.4751 39.1411 24.4751 cv
62.2329 24.4751 li
63.4185 24.4751 64.3828 25.4395 64.3828 26.625 cv
64.3828 49.7168 li
64.3828 50.9023 63.4185 51.8667 62.2329 51.8667 cv
cp
.4 .4 .4 rgb
f
92.5747 51.7163 mo
69.4834 51.7163 li
68.3789 51.7163 67.4834 50.8208 67.4834 49.7163 cv
67.4834 26.6255 li
67.4834 25.521 68.3789 24.6255 69.4834 24.6255 cv
92.5747 24.6255 li
93.6792 24.6255 94.5747 25.521 94.5747 26.6255 cv
94.5747 49.7163 li
94.5747 50.8208 93.6792 51.7163 92.5747 51.7163 cv
cp
level3{
gsave
clp
[-1.18418e-006 -27.0908 27.0908 -1.18418e-006 81.0288 51.7163 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18418e-006 -27.0908 27.0908 -1.18418e-006 81.0288 51.7163 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
69.4834 24.7754 mo
68.4634 24.7754 67.6333 25.6055 67.6333 26.6255 cv
67.6333 49.7163 li
67.6333 50.7363 68.4634 51.5664 69.4834 51.5664 cv
92.5747 51.5664 li
93.5947 51.5664 94.4248 50.7363 94.4248 49.7163 cv
94.4248 26.6255 li
94.4248 25.6055 93.5947 24.7754 92.5747 24.7754 cv
69.4834 24.7754 li
cp
92.5747 51.8662 mo
69.4834 51.8662 li
68.2979 51.8662 67.3335 50.9019 67.3335 49.7163 cv
67.3335 26.6255 li
67.3335 25.4399 68.2979 24.4756 69.4834 24.4756 cv
92.5747 24.4756 li
93.7603 24.4756 94.7246 25.4399 94.7246 26.6255 cv
94.7246 49.7163 li
94.7246 50.9019 93.7603 51.8662 92.5747 51.8662 cv
cp
.4 .4 .4 rgb
f
122.917 51.7168 mo
99.8257 51.7168 li
98.7212 51.7168 97.8257 50.8213 97.8257 49.7168 cv
97.8257 26.6255 li
97.8257 25.521 98.7212 24.6255 99.8257 24.6255 cv
122.917 24.6255 li
124.021 24.6255 124.917 25.521 124.917 26.6255 cv
124.917 49.7168 li
124.917 50.8213 124.021 51.7168 122.917 51.7168 cv
cp
level3{
gsave
clp
[-1.1842e-006 -27.0913 27.0913 -1.1842e-006 111.371 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1842e-006 -27.0913 27.0913 -1.1842e-006 111.371 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
99.8257 24.7754 mo
98.8057 24.7754 97.9756 25.6055 97.9756 26.6255 cv
97.9756 49.7168 li
97.9756 50.7368 98.8057 51.5669 99.8257 51.5669 cv
122.917 51.5669 li
123.937 51.5669 124.767 50.7368 124.767 49.7168 cv
124.767 26.6255 li
124.767 25.6055 123.937 24.7754 122.917 24.7754 cv
99.8257 24.7754 li
cp
122.917 51.8667 mo
99.8257 51.8667 li
98.6401 51.8667 97.6758 50.9023 97.6758 49.7168 cv
97.6758 26.6255 li
97.6758 25.4399 98.6401 24.4756 99.8257 24.4756 cv
122.917 24.4756 li
124.102 24.4756 125.066 25.4399 125.066 26.6255 cv
125.066 49.7168 li
125.066 50.9023 124.102 51.8667 122.917 51.8667 cv
cp
.4 .4 .4 rgb
f
153.259 51.7168 mo
130.167 51.7168 li
129.063 51.7168 128.167 50.8213 128.167 49.7168 cv
128.167 26.625 li
128.167 25.5205 129.063 24.625 130.167 24.625 cv
153.259 24.625 li
154.364 24.625 155.259 25.5205 155.259 26.625 cv
155.259 49.7168 li
155.259 50.8213 154.364 51.7168 153.259 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 141.713 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 141.713 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
130.167 24.7749 mo
129.147 24.7749 128.317 25.605 128.317 26.625 cv
128.317 49.7168 li
128.317 50.7368 129.147 51.5669 130.167 51.5669 cv
153.259 51.5669 li
154.279 51.5669 155.109 50.7368 155.109 49.7168 cv
155.109 26.625 li
155.109 25.605 154.279 24.7749 153.259 24.7749 cv
130.167 24.7749 li
cp
153.259 51.8667 mo
130.167 51.8667 li
128.982 51.8667 128.018 50.9023 128.018 49.7168 cv
128.018 26.625 li
128.018 25.4395 128.982 24.4751 130.167 24.4751 cv
153.259 24.4751 li
154.445 24.4751 155.409 25.4395 155.409 26.625 cv
155.409 49.7168 li
155.409 50.9023 154.445 51.8667 153.259 51.8667 cv
cp
.4 .4 .4 rgb
f
183.601 51.7168 mo
160.509 51.7168 li
159.405 51.7168 158.509 50.8213 158.509 49.7168 cv
158.509 26.625 li
158.509 25.5205 159.405 24.625 160.509 24.625 cv
183.601 24.625 li
184.706 24.625 185.601 25.5205 185.601 26.625 cv
185.601 49.7168 li
185.601 50.8213 184.706 51.7168 183.601 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 172.055 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 172.055 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
160.509 24.7749 mo
159.489 24.7749 158.659 25.605 158.659 26.625 cv
158.659 49.7168 li
158.659 50.7368 159.489 51.5669 160.509 51.5669 cv
183.601 51.5669 li
184.621 51.5669 185.451 50.7368 185.451 49.7168 cv
185.451 26.625 li
185.451 25.605 184.621 24.7749 183.601 24.7749 cv
160.509 24.7749 li
cp
183.601 51.8667 mo
160.509 51.8667 li
159.324 51.8667 158.359 50.9023 158.359 49.7168 cv
158.359 26.625 li
158.359 25.4395 159.324 24.4751 160.509 24.4751 cv
183.601 24.4751 li
184.787 24.4751 185.751 25.4395 185.751 26.625 cv
185.751 49.7168 li
185.751 50.9023 184.787 51.8667 183.601 51.8667 cv
cp
.4 .4 .4 rgb
f
213.943 51.7168 mo
190.852 51.7168 li
189.747 51.7168 188.852 50.8213 188.852 49.7168 cv
188.852 26.625 li
188.852 25.5205 189.747 24.625 190.852 24.625 cv
213.943 24.625 li
215.048 24.625 215.943 25.5205 215.943 26.625 cv
215.943 49.7168 li
215.943 50.8213 215.048 51.7168 213.943 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 202.397 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 202.397 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
190.852 24.7749 mo
189.832 24.7749 189.001 25.605 189.001 26.625 cv
189.001 49.7168 li
189.001 50.7368 189.832 51.5669 190.852 51.5669 cv
213.943 51.5669 li
214.963 51.5669 215.793 50.7368 215.793 49.7168 cv
215.793 26.625 li
215.793 25.605 214.963 24.7749 213.943 24.7749 cv
190.852 24.7749 li
cp
213.943 51.8667 mo
190.852 51.8667 li
189.666 51.8667 188.702 50.9023 188.702 49.7168 cv
188.702 26.625 li
188.702 25.4395 189.666 24.4751 190.852 24.4751 cv
213.943 24.4751 li
215.129 24.4751 216.093 25.4395 216.093 26.625 cv
216.093 49.7168 li
216.093 50.9023 215.129 51.8667 213.943 51.8667 cv
cp
.4 .4 .4 rgb
f
244.285 51.7168 mo
221.194 51.7168 li
220.089 51.7168 219.194 50.8213 219.194 49.7168 cv
219.194 26.625 li
219.194 25.5205 220.089 24.625 221.194 24.625 cv
244.285 24.625 li
245.39 24.625 246.285 25.5205 246.285 26.625 cv
246.285 49.7168 li
246.285 50.8213 245.39 51.7168 244.285 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 232.739 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 232.739 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
221.194 24.7749 mo
220.174 24.7749 219.344 25.605 219.344 26.625 cv
219.344 49.7168 li
219.344 50.7368 220.174 51.5669 221.194 51.5669 cv
244.285 51.5669 li
245.306 51.5669 246.135 50.7368 246.135 49.7168 cv
246.135 26.625 li
246.135 25.605 245.306 24.7749 244.285 24.7749 cv
221.194 24.7749 li
cp
244.285 51.8667 mo
221.194 51.8667 li
220.008 51.8667 219.044 50.9023 219.044 49.7168 cv
219.044 26.625 li
219.044 25.4395 220.008 24.4751 221.194 24.4751 cv
244.285 24.4751 li
245.471 24.4751 246.436 25.4395 246.436 26.625 cv
246.436 49.7168 li
246.436 50.9023 245.471 51.8667 244.285 51.8667 cv
cp
.4 .4 .4 rgb
f
274.627 51.7168 mo
251.536 51.7168 li
250.432 51.7168 249.536 50.8213 249.536 49.7168 cv
249.536 26.625 li
249.536 25.5205 250.432 24.625 251.536 24.625 cv
274.627 24.625 li
275.731 24.625 276.627 25.5205 276.627 26.625 cv
276.627 49.7168 li
276.627 50.8213 275.731 51.7168 274.627 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 263.082 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 263.082 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
251.536 24.7749 mo
250.516 24.7749 249.687 25.605 249.687 26.625 cv
249.687 49.7168 li
249.687 50.7368 250.516 51.5669 251.536 51.5669 cv
274.627 51.5669 li
275.647 51.5669 276.477 50.7368 276.477 49.7168 cv
276.477 26.625 li
276.477 25.605 275.647 24.7749 274.627 24.7749 cv
251.536 24.7749 li
cp
274.627 51.8667 mo
251.536 51.8667 li
250.351 51.8667 249.386 50.9023 249.386 49.7168 cv
249.386 26.625 li
249.386 25.4395 250.351 24.4751 251.536 24.4751 cv
274.627 24.4751 li
275.813 24.4751 276.777 25.4395 276.777 26.625 cv
276.777 49.7168 li
276.777 50.9023 275.813 51.8667 274.627 51.8667 cv
cp
.4 .4 .4 rgb
f
304.97 51.7168 mo
281.878 51.7168 li
280.773 51.7168 279.878 50.8213 279.878 49.7168 cv
279.878 26.625 li
279.878 25.5205 280.773 24.625 281.878 24.625 cv
304.97 24.625 li
306.074 24.625 306.97 25.5205 306.97 26.625 cv
306.97 49.7168 li
306.97 50.8213 306.074 51.7168 304.97 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 293.424 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 293.424 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
281.878 24.7749 mo
280.857 24.7749 280.028 25.605 280.028 26.625 cv
280.028 49.7168 li
280.028 50.7368 280.857 51.5669 281.878 51.5669 cv
304.97 51.5669 li
305.99 51.5669 306.819 50.7368 306.819 49.7168 cv
306.819 26.625 li
306.819 25.605 305.99 24.7749 304.97 24.7749 cv
281.878 24.7749 li
cp
304.97 51.8667 mo
281.878 51.8667 li
280.692 51.8667 279.728 50.9023 279.728 49.7168 cv
279.728 26.625 li
279.728 25.4395 280.692 24.4751 281.878 24.4751 cv
304.97 24.4751 li
306.155 24.4751 307.12 25.4395 307.12 26.625 cv
307.12 49.7168 li
307.12 50.9023 306.155 51.8667 304.97 51.8667 cv
cp
.4 .4 .4 rgb
f
335.312 51.7168 mo
312.22 51.7168 li
311.115 51.7168 310.22 50.8213 310.22 49.7168 cv
310.22 26.625 li
310.22 25.5205 311.115 24.625 312.22 24.625 cv
335.312 24.625 li
336.416 24.625 337.312 25.5205 337.312 26.625 cv
337.312 49.7168 li
337.312 50.8213 336.416 51.7168 335.312 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 323.766 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 323.766 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
312.22 24.7749 mo
311.199 24.7749 310.37 25.605 310.37 26.625 cv
310.37 49.7168 li
310.37 50.7368 311.199 51.5669 312.22 51.5669 cv
335.312 51.5669 li
336.332 51.5669 337.161 50.7368 337.161 49.7168 cv
337.161 26.625 li
337.161 25.605 336.332 24.7749 335.312 24.7749 cv
312.22 24.7749 li
cp
335.312 51.8667 mo
312.22 51.8667 li
311.034 51.8667 310.069 50.9023 310.069 49.7168 cv
310.069 26.625 li
310.069 25.4395 311.034 24.4751 312.22 24.4751 cv
335.312 24.4751 li
336.497 24.4751 337.462 25.4395 337.462 26.625 cv
337.462 49.7168 li
337.462 50.9023 336.497 51.8667 335.312 51.8667 cv
cp
.4 .4 .4 rgb
f
365.654 51.7168 mo
342.563 51.7168 li
341.458 51.7168 340.563 50.8213 340.563 49.7168 cv
340.563 26.625 li
340.563 25.5205 341.458 24.625 342.563 24.625 cv
365.654 24.625 li
366.759 24.625 367.654 25.5205 367.654 26.625 cv
367.654 49.7168 li
367.654 50.8213 366.759 51.7168 365.654 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 354.108 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 354.108 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
342.563 24.7749 mo
341.542 24.7749 340.713 25.605 340.713 26.625 cv
340.713 49.7168 li
340.713 50.7368 341.542 51.5669 342.563 51.5669 cv
365.654 51.5669 li
366.675 51.5669 367.504 50.7368 367.504 49.7168 cv
367.504 26.625 li
367.504 25.605 366.675 24.7749 365.654 24.7749 cv
342.563 24.7749 li
cp
365.654 51.8667 mo
342.563 51.8667 li
341.377 51.8667 340.412 50.9023 340.412 49.7168 cv
340.412 26.625 li
340.412 25.4395 341.377 24.4751 342.563 24.4751 cv
365.654 24.4751 li
366.84 24.4751 367.805 25.4395 367.805 26.625 cv
367.805 49.7168 li
367.805 50.9023 366.84 51.8667 365.654 51.8667 cv
cp
.4 .4 .4 rgb
f
395.996 51.7168 mo
372.904 51.7168 li
371.8 51.7168 370.904 50.8213 370.904 49.7168 cv
370.904 26.625 li
370.904 25.5205 371.8 24.625 372.904 24.625 cv
395.996 24.625 li
397.101 24.625 397.996 25.5205 397.996 26.625 cv
397.996 49.7168 li
397.996 50.8213 397.101 51.7168 395.996 51.7168 cv
cp
level3{
gsave
clp
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 384.45 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.18422e-006 -27.0918 27.0918 -1.18422e-006 384.45 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
372.904 24.7749 mo
371.884 24.7749 371.055 25.605 371.055 26.625 cv
371.055 49.7168 li
371.055 50.7368 371.884 51.5669 372.904 51.5669 cv
395.996 51.5669 li
397.017 51.5669 397.846 50.7368 397.846 49.7168 cv
397.846 26.625 li
397.846 25.605 397.017 24.7749 395.996 24.7749 cv
372.904 24.7749 li
cp
395.996 51.8667 mo
372.904 51.8667 li
371.719 51.8667 370.754 50.9023 370.754 49.7168 cv
370.754 26.625 li
370.754 25.4395 371.719 24.4751 372.904 24.4751 cv
395.996 24.4751 li
397.182 24.4751 398.146 25.4395 398.146 26.625 cv
398.146 49.7168 li
398.146 50.9023 397.182 51.8667 395.996 51.8667 cv
cp
.4 .4 .4 rgb
f
440.914 51.7168 mo
403.269 51.7168 li
402.164 51.7168 401.269 50.8213 401.269 49.7168 cv
401.269 26.6255 li
401.269 25.521 402.164 24.6255 403.269 24.6255 cv
440.914 24.6255 li
442.019 24.6255 442.914 25.521 442.914 26.6255 cv
442.914 49.7168 li
442.914 50.8213 442.019 51.7168 440.914 51.7168 cv
cp
level3{
gsave
clp
[-1.1842e-006 -27.0913 27.0913 -1.1842e-006 422.092 51.7168 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1842e-006 -27.0913 27.0913 -1.1842e-006 422.092 51.7168 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
403.269 24.7754 mo
402.248 24.7754 401.419 25.6055 401.419 26.6255 cv
401.419 49.7168 li
401.419 50.7368 402.248 51.5669 403.269 51.5669 cv
440.914 51.5669 li
441.935 51.5669 442.764 50.7368 442.764 49.7168 cv
442.764 26.6255 li
442.764 25.6055 441.935 24.7754 440.914 24.7754 cv
403.269 24.7754 li
cp
440.914 51.8667 mo
403.269 51.8667 li
402.083 51.8667 401.118 50.9023 401.118 49.7168 cv
401.118 26.6255 li
401.118 25.4399 402.083 24.4756 403.269 24.4756 cv
440.914 24.4756 li
442.1 24.4756 443.064 25.4399 443.064 26.6255 cv
443.064 49.7168 li
443.064 50.9023 442.1 51.8667 440.914 51.8667 cv
cp
.4 .4 .4 rgb
f
77.3022 81.3525 mo
53.9268 81.3525 li
52.8223 81.3525 51.9268 80.457 51.9268 79.3525 cv
51.9268 55.9771 li
51.9268 54.8726 52.8223 53.9771 53.9268 53.9771 cv
77.3022 53.9771 li
78.4067 53.9771 79.3022 54.8726 79.3022 55.9771 cv
79.3022 79.3525 li
79.3022 80.457 78.4067 81.3525 77.3022 81.3525 cv
cp
level3{
gsave
clp
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 65.6147 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 65.6147 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
53.9268 54.127 mo
52.9067 54.127 52.0767 54.957 52.0767 55.9771 cv
52.0767 79.3525 li
52.0767 80.3726 52.9067 81.2026 53.9268 81.2026 cv
77.3022 81.2026 li
78.3223 81.2026 79.1523 80.3726 79.1523 79.3525 cv
79.1523 55.9771 li
79.1523 54.957 78.3223 54.127 77.3022 54.127 cv
53.9268 54.127 li
cp
77.3022 81.5024 mo
53.9268 81.5024 li
52.7412 81.5024 51.7769 80.5381 51.7769 79.3525 cv
51.7769 55.9771 li
51.7769 54.7915 52.7412 53.8271 53.9268 53.8271 cv
77.3022 53.8271 li
78.4878 53.8271 79.4521 54.7915 79.4521 55.9771 cv
79.4521 79.3525 li
79.4521 80.5381 78.4878 81.5024 77.3022 81.5024 cv
cp
.4 .4 .4 rgb
f
107.603 81.3525 mo
84.2275 81.353 li
83.123 81.353 82.2275 80.4575 82.2275 79.353 cv
82.2275 55.9775 li
82.2275 54.873 83.123 53.9775 84.2275 53.9775 cv
107.603 53.9775 li
108.707 53.9775 109.603 54.873 109.603 55.9775 cv
109.603 79.3525 li
109.603 80.457 108.707 81.3525 107.603 81.3525 cv
cp
level3{
gsave
clp
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 95.915 81.353 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 95.915 81.353 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
84.2275 54.1274 mo
83.2075 54.1274 82.3774 54.9575 82.3774 55.9775 cv
82.3774 79.353 li
82.3774 80.373 83.2075 81.2031 84.2275 81.2031 cv
107.603 81.2026 li
108.623 81.2026 109.453 80.3726 109.453 79.3525 cv
109.453 55.9775 li
109.453 54.9575 108.623 54.1274 107.603 54.1274 cv
84.2275 54.1274 li
cp
84.2275 81.5029 mo
83.042 81.5029 82.0776 80.5386 82.0776 79.353 cv
82.0776 55.9775 li
82.0776 54.792 83.042 53.8276 84.2275 53.8276 cv
107.603 53.8276 li
108.788 53.8276 109.752 54.792 109.752 55.9775 cv
109.752 79.3525 li
109.752 80.5381 108.788 81.5024 107.603 81.5024 cv
84.2275 81.5029 li
cp
.4 .4 .4 rgb
f
137.904 81.353 mo
114.528 81.353 li
113.424 81.353 112.528 80.4575 112.528 79.353 cv
112.528 55.9775 li
112.528 54.873 113.424 53.9775 114.528 53.9775 cv
137.904 53.9775 li
139.009 53.9775 139.904 54.873 139.904 55.9775 cv
139.904 79.353 li
139.904 80.4575 139.009 81.353 137.904 81.353 cv
cp
level3{
gsave
clp
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 126.216 81.353 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 126.216 81.353 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
114.528 54.1274 mo
113.508 54.1274 112.678 54.9575 112.678 55.9775 cv
112.678 79.353 li
112.678 80.373 113.508 81.2031 114.528 81.2031 cv
137.904 81.2031 li
138.924 81.2031 139.754 80.373 139.754 79.353 cv
139.754 55.9775 li
139.754 54.9575 138.924 54.1274 137.904 54.1274 cv
114.528 54.1274 li
cp
137.904 81.5029 mo
114.528 81.5029 li
113.343 81.5029 112.378 80.5386 112.378 79.353 cv
112.378 55.9775 li
112.378 54.792 113.343 53.8276 114.528 53.8276 cv
137.904 53.8276 li
139.09 53.8276 140.054 54.792 140.054 55.9775 cv
140.054 79.353 li
140.054 80.5386 139.09 81.5029 137.904 81.5029 cv
cp
.4 .4 .4 rgb
f
168.205 81.353 mo
144.83 81.353 li
143.725 81.353 142.83 80.4575 142.83 79.353 cv
142.83 55.9775 li
142.83 54.873 143.725 53.9775 144.83 53.9775 cv
168.205 53.9775 li
169.309 53.9775 170.205 54.873 170.205 55.9775 cv
170.205 79.353 li
170.205 80.4575 169.309 81.353 168.205 81.353 cv
cp
level3{
gsave
clp
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 156.517 81.353 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 156.517 81.353 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
144.83 54.1274 mo
143.81 54.1274 142.979 54.9575 142.979 55.9775 cv
142.979 79.353 li
142.979 80.373 143.81 81.2031 144.83 81.2031 cv
168.205 81.2031 li
169.225 81.2031 170.055 80.373 170.055 79.353 cv
170.055 55.9775 li
170.055 54.9575 169.225 54.1274 168.205 54.1274 cv
144.83 54.1274 li
cp
168.205 81.5029 mo
144.83 81.5029 li
143.644 81.5029 142.68 80.5386 142.68 79.353 cv
142.68 55.9775 li
142.68 54.792 143.644 53.8276 144.83 53.8276 cv
168.205 53.8276 li
169.39 53.8276 170.354 54.792 170.354 55.9775 cv
170.354 79.353 li
170.354 80.5386 169.39 81.5029 168.205 81.5029 cv
cp
.4 .4 .4 rgb
f
198.506 81.3525 mo
175.13 81.3525 li
174.026 81.3525 173.13 80.457 173.13 79.3525 cv
173.13 55.9775 li
173.13 54.873 174.026 53.9775 175.13 53.9775 cv
198.506 53.9775 li
199.61 53.9775 200.506 54.873 200.506 55.9775 cv
200.506 79.3525 li
200.506 80.457 199.61 81.3525 198.506 81.3525 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 186.818 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 186.818 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
175.13 54.1274 mo
174.11 54.1274 173.28 54.9575 173.28 55.9775 cv
173.28 79.3525 li
173.28 80.3726 174.11 81.2026 175.13 81.2026 cv
198.506 81.2026 li
199.526 81.2026 200.356 80.3726 200.356 79.3525 cv
200.356 55.9775 li
200.356 54.9575 199.526 54.1274 198.506 54.1274 cv
175.13 54.1274 li
cp
198.506 81.5024 mo
175.13 81.5024 li
173.945 81.5024 172.98 80.5381 172.98 79.3525 cv
172.98 55.9775 li
172.98 54.792 173.945 53.8276 175.13 53.8276 cv
198.506 53.8276 li
199.691 53.8276 200.656 54.792 200.656 55.9775 cv
200.656 79.3525 li
200.656 80.5381 199.691 81.5024 198.506 81.5024 cv
cp
.4 .4 .4 rgb
f
228.807 81.3525 mo
205.432 81.3525 li
204.327 81.3525 203.432 80.457 203.432 79.3525 cv
203.432 55.9775 li
203.432 54.873 204.327 53.9775 205.432 53.9775 cv
228.807 53.9775 li
229.911 53.9775 230.807 54.873 230.807 55.9775 cv
230.807 79.3525 li
230.807 80.457 229.911 81.3525 228.807 81.3525 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 217.12 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 217.12 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
205.432 54.1274 mo
204.412 54.1274 203.582 54.9575 203.582 55.9775 cv
203.582 79.3525 li
203.582 80.3726 204.412 81.2026 205.432 81.2026 cv
228.807 81.2026 li
229.827 81.2026 230.656 80.3726 230.656 79.3525 cv
230.656 55.9775 li
230.656 54.9575 229.827 54.1274 228.807 54.1274 cv
205.432 54.1274 li
cp
228.807 81.5024 mo
205.432 81.5024 li
204.246 81.5024 203.282 80.5381 203.282 79.3525 cv
203.282 55.9775 li
203.282 54.792 204.246 53.8276 205.432 53.8276 cv
228.807 53.8276 li
229.992 53.8276 230.957 54.792 230.957 55.9775 cv
230.957 79.3525 li
230.957 80.5381 229.992 81.5024 228.807 81.5024 cv
cp
.4 .4 .4 rgb
f
259.108 81.353 mo
235.732 81.353 li
234.628 81.353 233.732 80.4575 233.732 79.353 cv
233.732 55.9775 li
233.732 54.873 234.628 53.9775 235.732 53.9775 cv
259.108 53.9775 li
260.213 53.9775 261.108 54.873 261.108 55.9775 cv
261.108 79.353 li
261.108 80.4575 260.213 81.353 259.108 81.353 cv
cp
level3{
gsave
clp
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 247.42 81.353 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 247.42 81.353 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
235.732 54.1274 mo
234.712 54.1274 233.883 54.9575 233.883 55.9775 cv
233.883 79.353 li
233.883 80.373 234.712 81.2031 235.732 81.2031 cv
259.108 81.2031 li
260.129 81.2031 260.958 80.373 260.958 79.353 cv
260.958 55.9775 li
260.958 54.9575 260.129 54.1274 259.108 54.1274 cv
235.732 54.1274 li
cp
259.108 81.5029 mo
235.732 81.5029 li
234.547 81.5029 233.582 80.5386 233.582 79.353 cv
233.582 55.9775 li
233.582 54.792 234.547 53.8276 235.732 53.8276 cv
259.108 53.8276 li
260.294 53.8276 261.259 54.792 261.259 55.9775 cv
261.259 79.353 li
261.259 80.5386 260.294 81.5029 259.108 81.5029 cv
cp
.4 .4 .4 rgb
f
289.409 81.3525 mo
266.034 81.3525 li
264.93 81.3525 264.034 80.457 264.034 79.3525 cv
264.034 55.9775 li
264.034 54.873 264.93 53.9775 266.034 53.9775 cv
289.409 53.9775 li
290.514 53.9775 291.409 54.873 291.409 55.9775 cv
291.409 79.3525 li
291.409 80.457 290.514 81.3525 289.409 81.3525 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 277.722 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 277.722 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
266.034 54.1274 mo
265.014 54.1274 264.185 54.9575 264.185 55.9775 cv
264.185 79.3525 li
264.185 80.3726 265.014 81.2026 266.034 81.2026 cv
289.409 81.2026 li
290.43 81.2026 291.259 80.3726 291.259 79.3525 cv
291.259 55.9775 li
291.259 54.9575 290.43 54.1274 289.409 54.1274 cv
266.034 54.1274 li
cp
289.409 81.5024 mo
266.034 81.5024 li
264.849 81.5024 263.884 80.5381 263.884 79.3525 cv
263.884 55.9775 li
263.884 54.792 264.849 53.8276 266.034 53.8276 cv
289.409 53.8276 li
290.595 53.8276 291.56 54.792 291.56 55.9775 cv
291.56 79.3525 li
291.56 80.5381 290.595 81.5024 289.409 81.5024 cv
cp
.4 .4 .4 rgb
f
319.71 81.3525 mo
296.335 81.3525 li
295.23 81.3525 294.335 80.457 294.335 79.3525 cv
294.335 55.9775 li
294.335 54.873 295.23 53.9775 296.335 53.9775 cv
319.71 53.9775 li
320.814 53.9775 321.71 54.873 321.71 55.9775 cv
321.71 79.3525 li
321.71 80.457 320.814 81.3525 319.71 81.3525 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 308.022 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 308.022 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
296.335 54.1274 mo
295.314 54.1274 294.485 54.9575 294.485 55.9775 cv
294.485 79.3525 li
294.485 80.3726 295.314 81.2026 296.335 81.2026 cv
319.71 81.2026 li
320.73 81.2026 321.56 80.3726 321.56 79.3525 cv
321.56 55.9775 li
321.56 54.9575 320.73 54.1274 319.71 54.1274 cv
296.335 54.1274 li
cp
319.71 81.5024 mo
296.335 81.5024 li
295.149 81.5024 294.185 80.5381 294.185 79.3525 cv
294.185 55.9775 li
294.185 54.792 295.149 53.8276 296.335 53.8276 cv
319.71 53.8276 li
320.896 53.8276 321.86 54.792 321.86 55.9775 cv
321.86 79.3525 li
321.86 80.5381 320.896 81.5024 319.71 81.5024 cv
cp
.4 .4 .4 rgb
f
350.011 81.3525 mo
326.636 81.3525 li
325.531 81.3525 324.636 80.457 324.636 79.3525 cv
324.636 55.9775 li
324.636 54.873 325.531 53.9775 326.636 53.9775 cv
350.011 53.9775 li
351.115 53.9775 352.011 54.873 352.011 55.9775 cv
352.011 79.3525 li
352.011 80.457 351.115 81.3525 350.011 81.3525 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 338.323 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 338.323 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
326.636 54.1274 mo
325.615 54.1274 324.786 54.9575 324.786 55.9775 cv
324.786 79.3525 li
324.786 80.3726 325.615 81.2026 326.636 81.2026 cv
350.011 81.2026 li
351.031 81.2026 351.86 80.3726 351.86 79.3525 cv
351.86 55.9775 li
351.86 54.9575 351.031 54.1274 350.011 54.1274 cv
326.636 54.1274 li
cp
350.011 81.5024 mo
326.636 81.5024 li
325.45 81.5024 324.485 80.5381 324.485 79.3525 cv
324.485 55.9775 li
324.485 54.792 325.45 53.8276 326.636 53.8276 cv
350.011 53.8276 li
351.196 53.8276 352.161 54.792 352.161 55.9775 cv
352.161 79.3525 li
352.161 80.5381 351.196 81.5024 350.011 81.5024 cv
cp
.4 .4 .4 rgb
f
380.313 81.3525 mo
356.938 81.3525 li
355.833 81.3525 354.938 80.457 354.938 79.3525 cv
354.938 55.9775 li
354.938 54.873 355.833 53.9775 356.938 53.9775 cv
380.313 53.9775 li
381.417 53.9775 382.313 54.873 382.313 55.9775 cv
382.313 79.3525 li
382.313 80.457 381.417 81.3525 380.313 81.3525 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 368.625 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 368.625 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
356.938 54.1274 mo
355.917 54.1274 355.088 54.9575 355.088 55.9775 cv
355.088 79.3525 li
355.088 80.3726 355.917 81.2026 356.938 81.2026 cv
380.313 81.2026 li
381.333 81.2026 382.162 80.3726 382.162 79.3525 cv
382.162 55.9775 li
382.162 54.9575 381.333 54.1274 380.313 54.1274 cv
356.938 54.1274 li
cp
380.313 81.5024 mo
356.938 81.5024 li
355.752 81.5024 354.787 80.5381 354.787 79.3525 cv
354.787 55.9775 li
354.787 54.792 355.752 53.8276 356.938 53.8276 cv
380.313 53.8276 li
381.498 53.8276 382.463 54.792 382.463 55.9775 cv
382.463 79.3525 li
382.463 80.5381 381.498 81.5024 380.313 81.5024 cv
cp
.4 .4 .4 rgb
f
410.613 81.3525 mo
387.238 81.3525 li
386.134 81.3525 385.238 80.457 385.238 79.3525 cv
385.238 55.9775 li
385.238 54.873 386.134 53.9775 387.238 53.9775 cv
410.613 53.9775 li
411.718 53.9775 412.613 54.873 412.613 55.9775 cv
412.613 79.3525 li
412.613 80.457 411.718 81.3525 410.613 81.3525 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 398.926 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 398.926 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
387.238 54.1274 mo
386.218 54.1274 385.389 54.9575 385.389 55.9775 cv
385.389 79.3525 li
385.389 80.3726 386.218 81.2026 387.238 81.2026 cv
410.613 81.2026 li
411.634 81.2026 412.463 80.3726 412.463 79.3525 cv
412.463 55.9775 li
412.463 54.9575 411.634 54.1274 410.613 54.1274 cv
387.238 54.1274 li
cp
410.613 81.5024 mo
387.238 81.5024 li
386.053 81.5024 385.088 80.5381 385.088 79.3525 cv
385.088 55.9775 li
385.088 54.792 386.053 53.8276 387.238 53.8276 cv
410.613 53.8276 li
411.799 53.8276 412.764 54.792 412.764 55.9775 cv
412.764 79.3525 li
412.764 80.5381 411.799 81.5024 410.613 81.5024 cv
cp
.4 .4 .4 rgb
f
440.914 81.3525 mo
417.539 81.353 li
416.435 81.353 415.539 80.4575 415.539 79.353 cv
415.539 55.9775 li
415.539 54.873 416.435 53.9775 417.539 53.9775 cv
440.914 53.9775 li
442.019 53.9775 442.914 54.873 442.914 55.9775 cv
442.914 79.3525 li
442.914 80.457 442.019 81.3525 440.914 81.3525 cv
cp
level3{
gsave
clp
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 429.227 81.353 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 429.227 81.353 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
417.539 54.1274 mo
416.519 54.1274 415.689 54.9575 415.689 55.9775 cv
415.689 79.353 li
415.689 80.373 416.519 81.2031 417.539 81.2031 cv
440.914 81.2026 li
441.935 81.2026 442.764 80.3726 442.764 79.3525 cv
442.764 55.9775 li
442.764 54.9575 441.935 54.1274 440.914 54.1274 cv
417.539 54.1274 li
cp
417.539 81.5029 mo
416.354 81.5029 415.389 80.5386 415.389 79.353 cv
415.389 55.9775 li
415.389 54.792 416.354 53.8276 417.539 53.8276 cv
440.914 53.8276 li
442.1 53.8276 443.064 54.792 443.064 55.9775 cv
443.064 79.3525 li
443.064 80.5381 442.1 81.5024 440.914 81.5024 cv
417.539 81.5029 li
cp
.4 .4 .4 rgb
f
85.2368 111.203 mo
61.8613 111.203 li
60.7568 111.203 59.8613 110.309 59.8613 109.203 cv
59.8613 85.8276 li
59.8613 84.7231 60.7568 83.8276 61.8613 83.8276 cv
85.2368 83.8276 li
86.3413 83.8276 87.2368 84.7231 87.2368 85.8276 cv
87.2368 109.203 li
87.2368 110.309 86.3413 111.203 85.2368 111.203 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 73.5493 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 73.5493 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
61.8613 83.9775 mo
60.8413 83.9775 60.0112 84.8076 60.0112 85.8276 cv
60.0112 109.203 li
60.0112 110.224 60.8413 111.053 61.8613 111.053 cv
85.2368 111.053 li
86.2568 111.053 87.0869 110.224 87.0869 109.203 cv
87.0869 85.8276 li
87.0869 84.8076 86.2568 83.9775 85.2368 83.9775 cv
61.8613 83.9775 li
cp
85.2368 111.354 mo
61.8613 111.354 li
60.6758 111.354 59.7114 110.389 59.7114 109.203 cv
59.7114 85.8276 li
59.7114 84.6421 60.6758 83.6777 61.8613 83.6777 cv
85.2368 83.6777 li
86.4224 83.6777 87.3867 84.6421 87.3867 85.8276 cv
87.3867 109.203 li
87.3867 110.389 86.4224 111.354 85.2368 111.354 cv
cp
.4 .4 .4 rgb
f
114.972 111.203 mo
91.5967 111.203 li
90.4922 111.203 89.5967 110.309 89.5967 109.203 cv
89.5967 85.8281 li
89.5967 84.7236 90.4922 83.8281 91.5967 83.8281 cv
114.972 83.8281 li
116.077 83.8281 116.972 84.7236 116.972 85.8281 cv
116.972 109.203 li
116.972 110.309 116.077 111.203 114.972 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 103.285 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 103.285 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
91.5967 83.978 mo
90.5767 83.978 89.7466 84.8081 89.7466 85.8281 cv
89.7466 109.203 li
89.7466 110.224 90.5767 111.053 91.5967 111.053 cv
114.972 111.053 li
115.992 111.053 116.822 110.224 116.822 109.203 cv
116.822 85.8281 li
116.822 84.8081 115.992 83.978 114.972 83.978 cv
91.5967 83.978 li
cp
114.972 111.354 mo
91.5967 111.354 li
90.4111 111.354 89.4468 110.389 89.4468 109.203 cv
89.4468 85.8281 li
89.4468 84.6426 90.4111 83.6782 91.5967 83.6782 cv
114.972 83.6782 li
116.158 83.6782 117.122 84.6426 117.122 85.8281 cv
117.122 109.203 li
117.122 110.389 116.158 111.354 114.972 111.354 cv
cp
.4 .4 .4 rgb
f
144.708 111.203 mo
121.332 111.203 li
120.228 111.203 119.332 110.309 119.332 109.203 cv
119.332 85.8281 li
119.332 84.7236 120.228 83.8281 121.332 83.8281 cv
144.708 83.8281 li
145.812 83.8281 146.708 84.7236 146.708 85.8281 cv
146.708 109.203 li
146.708 110.309 145.812 111.203 144.708 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 133.02 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 133.02 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
121.332 83.978 mo
120.312 83.978 119.482 84.8081 119.482 85.8281 cv
119.482 109.203 li
119.482 110.224 120.312 111.053 121.332 111.053 cv
144.708 111.053 li
145.728 111.053 146.558 110.224 146.558 109.203 cv
146.558 85.8281 li
146.558 84.8081 145.728 83.978 144.708 83.978 cv
121.332 83.978 li
cp
144.708 111.354 mo
121.332 111.354 li
120.146 111.354 119.182 110.389 119.182 109.203 cv
119.182 85.8281 li
119.182 84.6426 120.146 83.6782 121.332 83.6782 cv
144.708 83.6782 li
145.893 83.6782 146.857 84.6426 146.857 85.8281 cv
146.857 109.203 li
146.857 110.389 145.893 111.354 144.708 111.354 cv
cp
.4 .4 .4 rgb
f
174.443 111.203 mo
151.068 111.203 li
149.963 111.203 149.068 110.309 149.068 109.203 cv
149.068 85.8281 li
149.068 84.7236 149.963 83.8281 151.068 83.8281 cv
174.443 83.8281 li
175.548 83.8281 176.443 84.7236 176.443 85.8281 cv
176.443 109.203 li
176.443 110.309 175.548 111.203 174.443 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 162.755 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 162.755 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
151.068 83.978 mo
150.048 83.978 149.218 84.8081 149.218 85.8281 cv
149.218 109.203 li
149.218 110.224 150.048 111.053 151.068 111.053 cv
174.443 111.053 li
175.463 111.053 176.293 110.224 176.293 109.203 cv
176.293 85.8281 li
176.293 84.8081 175.463 83.978 174.443 83.978 cv
151.068 83.978 li
cp
174.443 111.354 mo
151.068 111.354 li
149.882 111.354 148.918 110.389 148.918 109.203 cv
148.918 85.8281 li
148.918 84.6426 149.882 83.6782 151.068 83.6782 cv
174.443 83.6782 li
175.629 83.6782 176.593 84.6426 176.593 85.8281 cv
176.593 109.203 li
176.593 110.389 175.629 111.354 174.443 111.354 cv
cp
.4 .4 .4 rgb
f
204.179 111.203 mo
180.804 111.203 li
179.699 111.203 178.804 110.309 178.804 109.203 cv
178.804 85.8281 li
178.804 84.7236 179.699 83.8281 180.804 83.8281 cv
204.179 83.8281 li
205.283 83.8281 206.179 84.7236 206.179 85.8281 cv
206.179 109.203 li
206.179 110.309 205.283 111.203 204.179 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 192.491 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 192.491 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
180.804 83.978 mo
179.784 83.978 178.954 84.8081 178.954 85.8281 cv
178.954 109.203 li
178.954 110.224 179.784 111.053 180.804 111.053 cv
204.179 111.053 li
205.199 111.053 206.029 110.224 206.029 109.203 cv
206.029 85.8281 li
206.029 84.8081 205.199 83.978 204.179 83.978 cv
180.804 83.978 li
cp
204.179 111.354 mo
180.804 111.354 li
179.618 111.354 178.654 110.389 178.654 109.203 cv
178.654 85.8281 li
178.654 84.6426 179.618 83.6782 180.804 83.6782 cv
204.179 83.6782 li
205.364 83.6782 206.329 84.6426 206.329 85.8281 cv
206.329 109.203 li
206.329 110.389 205.364 111.354 204.179 111.354 cv
cp
.4 .4 .4 rgb
f
233.914 111.203 mo
210.539 111.203 li
209.435 111.203 208.539 110.309 208.539 109.203 cv
208.539 85.8281 li
208.539 84.7236 209.435 83.8281 210.539 83.8281 cv
233.914 83.8281 li
235.019 83.8281 235.914 84.7236 235.914 85.8281 cv
235.914 109.203 li
235.914 110.309 235.019 111.203 233.914 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 222.227 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 222.227 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
210.539 83.978 mo
209.519 83.978 208.689 84.8081 208.689 85.8281 cv
208.689 109.203 li
208.689 110.224 209.519 111.053 210.539 111.053 cv
233.914 111.053 li
234.935 111.053 235.764 110.224 235.764 109.203 cv
235.764 85.8281 li
235.764 84.8081 234.935 83.978 233.914 83.978 cv
210.539 83.978 li
cp
233.914 111.354 mo
210.539 111.354 li
209.354 111.354 208.389 110.389 208.389 109.203 cv
208.389 85.8281 li
208.389 84.6426 209.354 83.6782 210.539 83.6782 cv
233.914 83.6782 li
235.1 83.6782 236.064 84.6426 236.064 85.8281 cv
236.064 109.203 li
236.064 110.389 235.1 111.354 233.914 111.354 cv
cp
.4 .4 .4 rgb
f
263.65 111.203 mo
240.274 111.203 li
239.17 111.203 238.274 110.309 238.274 109.203 cv
238.274 85.8281 li
238.274 84.7236 239.17 83.8281 240.274 83.8281 cv
263.65 83.8281 li
264.755 83.8281 265.65 84.7236 265.65 85.8281 cv
265.65 109.203 li
265.65 110.309 264.755 111.203 263.65 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 251.963 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 251.963 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
240.274 83.978 mo
239.254 83.978 238.425 84.8081 238.425 85.8281 cv
238.425 109.203 li
238.425 110.224 239.254 111.053 240.274 111.053 cv
263.65 111.053 li
264.671 111.053 265.5 110.224 265.5 109.203 cv
265.5 85.8281 li
265.5 84.8081 264.671 83.978 263.65 83.978 cv
240.274 83.978 li
cp
263.65 111.354 mo
240.274 111.354 li
239.089 111.354 238.124 110.389 238.124 109.203 cv
238.124 85.8281 li
238.124 84.6426 239.089 83.6782 240.274 83.6782 cv
263.65 83.6782 li
264.836 83.6782 265.801 84.6426 265.801 85.8281 cv
265.801 109.203 li
265.801 110.389 264.836 111.354 263.65 111.354 cv
cp
.4 .4 .4 rgb
f
293.385 111.203 mo
270.01 111.203 li
268.905 111.203 268.01 110.309 268.01 109.203 cv
268.01 85.8281 li
268.01 84.7236 268.905 83.8281 270.01 83.8281 cv
293.385 83.8281 li
294.489 83.8281 295.385 84.7236 295.385 85.8281 cv
295.385 109.203 li
295.385 110.309 294.489 111.203 293.385 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 281.697 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 281.697 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
270.01 83.978 mo
268.989 83.978 268.16 84.8081 268.16 85.8281 cv
268.16 109.203 li
268.16 110.224 268.989 111.053 270.01 111.053 cv
293.385 111.053 li
294.405 111.053 295.234 110.224 295.234 109.203 cv
295.234 85.8281 li
295.234 84.8081 294.405 83.978 293.385 83.978 cv
270.01 83.978 li
cp
293.385 111.354 mo
270.01 111.354 li
268.824 111.354 267.859 110.389 267.859 109.203 cv
267.859 85.8281 li
267.859 84.6426 268.824 83.6782 270.01 83.6782 cv
293.385 83.6782 li
294.57 83.6782 295.535 84.6426 295.535 85.8281 cv
295.535 109.203 li
295.535 110.389 294.57 111.354 293.385 111.354 cv
cp
.4 .4 .4 rgb
f
323.121 111.203 mo
299.746 111.203 li
298.642 111.203 297.746 110.309 297.746 109.203 cv
297.746 85.8281 li
297.746 84.7236 298.642 83.8281 299.746 83.8281 cv
323.121 83.8281 li
324.226 83.8281 325.121 84.7236 325.121 85.8281 cv
325.121 109.203 li
325.121 110.309 324.226 111.203 323.121 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 311.434 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 311.434 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
299.746 83.978 mo
298.726 83.978 297.896 84.8081 297.896 85.8281 cv
297.896 109.203 li
297.896 110.224 298.726 111.053 299.746 111.053 cv
323.121 111.053 li
324.142 111.053 324.971 110.224 324.971 109.203 cv
324.971 85.8281 li
324.971 84.8081 324.142 83.978 323.121 83.978 cv
299.746 83.978 li
cp
323.121 111.354 mo
299.746 111.354 li
298.561 111.354 297.596 110.389 297.596 109.203 cv
297.596 85.8281 li
297.596 84.6426 298.561 83.6782 299.746 83.6782 cv
323.121 83.6782 li
324.307 83.6782 325.271 84.6426 325.271 85.8281 cv
325.271 109.203 li
325.271 110.389 324.307 111.354 323.121 111.354 cv
cp
.4 .4 .4 rgb
f
352.856 111.203 mo
329.481 111.203 li
328.377 111.203 327.481 110.309 327.481 109.203 cv
327.481 85.8281 li
327.481 84.7236 328.377 83.8281 329.481 83.8281 cv
352.856 83.8281 li
353.961 83.8281 354.856 84.7236 354.856 85.8281 cv
354.856 109.203 li
354.856 110.309 353.961 111.203 352.856 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 341.169 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 341.169 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
329.481 83.978 mo
328.461 83.978 327.632 84.8081 327.632 85.8281 cv
327.632 109.203 li
327.632 110.224 328.461 111.053 329.481 111.053 cv
352.856 111.053 li
353.877 111.053 354.706 110.224 354.706 109.203 cv
354.706 85.8281 li
354.706 84.8081 353.877 83.978 352.856 83.978 cv
329.481 83.978 li
cp
352.856 111.354 mo
329.481 111.354 li
328.296 111.354 327.331 110.389 327.331 109.203 cv
327.331 85.8281 li
327.331 84.6426 328.296 83.6782 329.481 83.6782 cv
352.856 83.6782 li
354.042 83.6782 355.007 84.6426 355.007 85.8281 cv
355.007 109.203 li
355.007 110.389 354.042 111.354 352.856 111.354 cv
cp
.4 .4 .4 rgb
f
382.592 111.203 mo
359.217 111.203 li
358.112 111.203 357.217 110.309 357.217 109.203 cv
357.217 85.8281 li
357.217 84.7236 358.112 83.8281 359.217 83.8281 cv
382.592 83.8281 li
383.696 83.8281 384.592 84.7236 384.592 85.8281 cv
384.592 109.203 li
384.592 110.309 383.696 111.203 382.592 111.203 cv
cp
level3{
gsave
clp
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 370.904 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19658e-006 -27.3745 27.3745 -1.19658e-006 370.904 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
359.217 83.978 mo
358.196 83.978 357.367 84.8081 357.367 85.8281 cv
357.367 109.203 li
357.367 110.224 358.196 111.053 359.217 111.053 cv
382.592 111.053 li
383.612 111.053 384.441 110.224 384.441 109.203 cv
384.441 85.8281 li
384.441 84.8081 383.612 83.978 382.592 83.978 cv
359.217 83.978 li
cp
382.592 111.354 mo
359.217 111.354 li
358.031 111.354 357.066 110.389 357.066 109.203 cv
357.066 85.8281 li
357.066 84.6426 358.031 83.6782 359.217 83.6782 cv
382.592 83.6782 li
383.777 83.6782 384.742 84.6426 384.742 85.8281 cv
384.742 109.203 li
384.742 110.389 383.777 111.354 382.592 111.354 cv
cp
.4 .4 .4 rgb
f
100.827 140.746 mo
77.4512 140.746 li
76.3467 140.746 75.4512 139.852 75.4512 138.746 cv
75.4512 115.371 li
75.4512 114.266 76.3467 113.371 77.4512 113.371 cv
100.827 113.371 li
101.931 113.371 102.827 114.266 102.827 115.371 cv
102.827 138.746 li
102.827 139.852 101.931 140.746 100.827 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 89.1392 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 89.1392 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
77.4512 113.521 mo
76.4312 113.521 75.6011 114.351 75.6011 115.371 cv
75.6011 138.746 li
75.6011 139.767 76.4312 140.596 77.4512 140.596 cv
100.827 140.596 li
101.847 140.596 102.677 139.767 102.677 138.746 cv
102.677 115.371 li
102.677 114.351 101.847 113.521 100.827 113.521 cv
77.4512 113.521 li
cp
100.827 140.896 mo
77.4512 140.896 li
76.2656 140.896 75.3013 139.932 75.3013 138.746 cv
75.3013 115.371 li
75.3013 114.186 76.2656 113.221 77.4512 113.221 cv
100.827 113.221 li
102.012 113.221 102.977 114.186 102.977 115.371 cv
102.977 138.746 li
102.977 139.932 102.012 140.896 100.827 140.896 cv
cp
.4 .4 .4 rgb
f
131.277 140.746 mo
107.902 140.746 li
106.798 140.746 105.902 139.852 105.902 138.746 cv
105.902 115.371 li
105.902 114.268 106.798 113.371 107.902 113.371 cv
131.277 113.371 li
132.382 113.371 133.277 114.268 133.277 115.371 cv
133.277 138.746 li
133.277 139.852 132.382 140.746 131.277 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 119.59 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 119.59 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
107.902 113.521 mo
106.882 113.521 106.052 114.351 106.052 115.371 cv
106.052 138.746 li
106.052 139.767 106.882 140.596 107.902 140.596 cv
131.277 140.596 li
132.297 140.596 133.127 139.767 133.127 138.746 cv
133.127 115.371 li
133.127 114.351 132.297 113.521 131.277 113.521 cv
107.902 113.521 li
cp
131.277 140.896 mo
107.902 140.896 li
106.717 140.896 105.752 139.932 105.752 138.746 cv
105.752 115.371 li
105.752 114.186 106.717 113.221 107.902 113.221 cv
131.277 113.221 li
132.463 113.221 133.427 114.186 133.427 115.371 cv
133.427 138.746 li
133.427 139.932 132.463 140.896 131.277 140.896 cv
cp
.4 .4 .4 rgb
f
161.729 140.746 mo
138.353 140.746 li
137.249 140.746 136.353 139.852 136.353 138.746 cv
136.353 115.371 li
136.353 114.268 137.249 113.371 138.353 113.371 cv
161.729 113.371 li
162.833 113.371 163.729 114.268 163.729 115.371 cv
163.729 138.746 li
163.729 139.852 162.833 140.746 161.729 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 150.041 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 150.041 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
138.353 113.521 mo
137.333 113.521 136.503 114.351 136.503 115.371 cv
136.503 138.746 li
136.503 139.767 137.333 140.596 138.353 140.596 cv
161.729 140.596 li
162.749 140.596 163.579 139.767 163.579 138.746 cv
163.579 115.371 li
163.579 114.351 162.749 113.521 161.729 113.521 cv
138.353 113.521 li
cp
161.729 140.896 mo
138.353 140.896 li
137.167 140.896 136.203 139.932 136.203 138.746 cv
136.203 115.371 li
136.203 114.186 137.167 113.221 138.353 113.221 cv
161.729 113.221 li
162.914 113.221 163.878 114.186 163.878 115.371 cv
163.878 138.746 li
163.878 139.932 162.914 140.896 161.729 140.896 cv
cp
.4 .4 .4 rgb
f
192.18 140.746 mo
168.805 140.746 li
167.7 140.746 166.805 139.852 166.805 138.746 cv
166.805 115.371 li
166.805 114.268 167.7 113.371 168.805 113.371 cv
192.18 113.371 li
193.284 113.371 194.18 114.268 194.18 115.371 cv
194.18 138.746 li
194.18 139.852 193.284 140.746 192.18 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 180.492 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 180.492 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
168.805 113.521 mo
167.785 113.521 166.955 114.351 166.955 115.371 cv
166.955 138.746 li
166.955 139.767 167.785 140.596 168.805 140.596 cv
192.18 140.596 li
193.2 140.596 194.03 139.767 194.03 138.746 cv
194.03 115.371 li
194.03 114.351 193.2 113.521 192.18 113.521 cv
168.805 113.521 li
cp
192.18 140.896 mo
168.805 140.896 li
167.619 140.896 166.655 139.932 166.655 138.746 cv
166.655 115.371 li
166.655 114.186 167.619 113.221 168.805 113.221 cv
192.18 113.221 li
193.365 113.221 194.33 114.186 194.33 115.371 cv
194.33 138.746 li
194.33 139.932 193.365 140.896 192.18 140.896 cv
cp
.4 .4 .4 rgb
f
222.631 140.746 mo
199.256 140.746 li
198.151 140.746 197.256 139.852 197.256 138.746 cv
197.256 115.371 li
197.256 114.268 198.151 113.371 199.256 113.371 cv
222.631 113.371 li
223.735 113.371 224.631 114.268 224.631 115.371 cv
224.631 138.746 li
224.631 139.852 223.735 140.746 222.631 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 210.943 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 210.943 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
199.256 113.521 mo
198.236 113.521 197.406 114.351 197.406 115.371 cv
197.406 138.746 li
197.406 139.767 198.236 140.596 199.256 140.596 cv
222.631 140.596 li
223.651 140.596 224.481 139.767 224.481 138.746 cv
224.481 115.371 li
224.481 114.351 223.651 113.521 222.631 113.521 cv
199.256 113.521 li
cp
222.631 140.896 mo
199.256 140.896 li
198.07 140.896 197.106 139.932 197.106 138.746 cv
197.106 115.371 li
197.106 114.186 198.07 113.221 199.256 113.221 cv
222.631 113.221 li
223.816 113.221 224.781 114.186 224.781 115.371 cv
224.781 138.746 li
224.781 139.932 223.816 140.896 222.631 140.896 cv
cp
.4 .4 .4 rgb
f
253.082 140.746 mo
229.707 140.746 li
228.603 140.746 227.707 139.852 227.707 138.746 cv
227.707 115.371 li
227.707 114.268 228.603 113.371 229.707 113.371 cv
253.082 113.371 li
254.187 113.371 255.082 114.268 255.082 115.371 cv
255.082 138.746 li
255.082 139.852 254.187 140.746 253.082 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 241.395 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 241.395 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
229.707 113.521 mo
228.687 113.521 227.857 114.351 227.857 115.371 cv
227.857 138.746 li
227.857 139.767 228.687 140.596 229.707 140.596 cv
253.082 140.596 li
254.103 140.596 254.932 139.767 254.932 138.746 cv
254.932 115.371 li
254.932 114.351 254.103 113.521 253.082 113.521 cv
229.707 113.521 li
cp
253.082 140.896 mo
229.707 140.896 li
228.521 140.896 227.557 139.932 227.557 138.746 cv
227.557 115.371 li
227.557 114.186 228.521 113.221 229.707 113.221 cv
253.082 113.221 li
254.268 113.221 255.232 114.186 255.232 115.371 cv
255.232 138.746 li
255.232 139.932 254.268 140.896 253.082 140.896 cv
cp
.4 .4 .4 rgb
f
283.533 140.746 mo
260.158 140.746 li
259.054 140.746 258.158 139.852 258.158 138.746 cv
258.158 115.371 li
258.158 114.268 259.054 113.371 260.158 113.371 cv
283.533 113.371 li
284.638 113.371 285.533 114.268 285.533 115.371 cv
285.533 138.746 li
285.533 139.852 284.638 140.746 283.533 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 271.846 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 271.846 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
260.158 113.521 mo
259.138 113.521 258.309 114.351 258.309 115.371 cv
258.309 138.746 li
258.309 139.767 259.138 140.596 260.158 140.596 cv
283.533 140.596 li
284.554 140.596 285.383 139.767 285.383 138.746 cv
285.383 115.371 li
285.383 114.351 284.554 113.521 283.533 113.521 cv
260.158 113.521 li
cp
283.533 140.896 mo
260.158 140.896 li
258.973 140.896 258.008 139.932 258.008 138.746 cv
258.008 115.371 li
258.008 114.186 258.973 113.221 260.158 113.221 cv
283.533 113.221 li
284.719 113.221 285.684 114.186 285.684 115.371 cv
285.684 138.746 li
285.684 139.932 284.719 140.896 283.533 140.896 cv
cp
.4 .4 .4 rgb
f
313.984 140.746 mo
290.609 140.746 li
289.505 140.746 288.609 139.852 288.609 138.746 cv
288.609 115.371 li
288.609 114.268 289.505 113.371 290.609 113.371 cv
313.984 113.371 li
315.089 113.371 315.984 114.268 315.984 115.371 cv
315.984 138.746 li
315.984 139.852 315.089 140.746 313.984 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 302.297 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 302.297 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
290.609 113.521 mo
289.589 113.521 288.76 114.351 288.76 115.371 cv
288.76 138.746 li
288.76 139.767 289.589 140.596 290.609 140.596 cv
313.984 140.596 li
315.005 140.596 315.834 139.767 315.834 138.746 cv
315.834 115.371 li
315.834 114.351 315.005 113.521 313.984 113.521 cv
290.609 113.521 li
cp
313.984 140.896 mo
290.609 140.896 li
289.424 140.896 288.459 139.932 288.459 138.746 cv
288.459 115.371 li
288.459 114.186 289.424 113.221 290.609 113.221 cv
313.984 113.221 li
315.17 113.221 316.135 114.186 316.135 115.371 cv
316.135 138.746 li
316.135 139.932 315.17 140.896 313.984 140.896 cv
cp
.4 .4 .4 rgb
f
344.436 140.746 mo
321.061 140.746 li
319.956 140.746 319.061 139.852 319.061 138.746 cv
319.061 115.371 li
319.061 114.268 319.956 113.371 321.061 113.371 cv
344.436 113.371 li
345.54 113.371 346.436 114.268 346.436 115.371 cv
346.436 138.746 li
346.436 139.852 345.54 140.746 344.436 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 332.748 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 332.748 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
321.061 113.521 mo
320.04 113.521 319.211 114.351 319.211 115.371 cv
319.211 138.746 li
319.211 139.767 320.04 140.596 321.061 140.596 cv
344.436 140.596 li
345.456 140.596 346.285 139.767 346.285 138.746 cv
346.285 115.371 li
346.285 114.351 345.456 113.521 344.436 113.521 cv
321.061 113.521 li
cp
344.436 140.896 mo
321.061 140.896 li
319.875 140.896 318.91 139.932 318.91 138.746 cv
318.91 115.371 li
318.91 114.186 319.875 113.221 321.061 113.221 cv
344.436 113.221 li
345.621 113.221 346.586 114.186 346.586 115.371 cv
346.586 138.746 li
346.586 139.932 345.621 140.896 344.436 140.896 cv
cp
.4 .4 .4 rgb
f
380.313 140.746 mo
351.512 140.746 li
350.407 140.746 349.512 139.852 349.512 138.746 cv
349.512 115.371 li
349.512 114.268 350.407 113.371 351.512 113.371 cv
380.313 113.371 li
381.417 113.371 382.313 114.268 382.313 115.371 cv
382.313 138.746 li
382.313 139.852 381.417 140.746 380.313 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 365.912 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 365.912 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
351.512 113.521 mo
350.491 113.521 349.662 114.351 349.662 115.371 cv
349.662 138.746 li
349.662 139.767 350.491 140.596 351.512 140.596 cv
380.313 140.596 li
381.333 140.596 382.162 139.767 382.162 138.746 cv
382.162 115.371 li
382.162 114.351 381.333 113.521 380.313 113.521 cv
351.512 113.521 li
cp
380.313 140.896 mo
351.512 140.896 li
350.326 140.896 349.361 139.932 349.361 138.746 cv
349.361 115.371 li
349.361 114.186 350.326 113.221 351.512 113.221 cv
380.313 113.221 li
381.498 113.221 382.463 114.186 382.463 115.371 cv
382.463 138.746 li
382.463 139.932 381.498 140.896 380.313 140.896 cv
cp
.4 .4 .4 rgb
f
8.79883 81.3525 mo
46.8359 81.3525 li
47.9404 81.3525 48.8359 80.457 48.8359 79.3525 cv
48.8359 55.9771 li
48.8359 54.8726 47.9404 53.9771 46.8359 53.9771 cv
8.79883 53.9771 li
7.69434 53.9771 6.79883 54.8726 6.79883 55.9771 cv
6.79883 79.3525 li
6.79883 80.457 7.69434 81.3525 8.79883 81.3525 cv
cp
level3{
gsave
clp
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 27.8174 81.3525 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.19662e-006 -27.3755 27.3755 -1.19662e-006 27.8174 81.3525 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
8.79883 54.127 mo
7.77881 54.127 6.94873 54.957 6.94873 55.9771 cv
6.94873 79.3525 li
6.94873 80.3726 7.77881 81.2026 8.79883 81.2026 cv
46.8359 81.2026 li
47.856 81.2026 48.686 80.3726 48.686 79.3525 cv
48.686 55.9771 li
48.686 54.957 47.856 54.127 46.8359 54.127 cv
8.79883 54.127 li
cp
46.8359 81.5024 mo
8.79883 81.5024 li
7.61328 81.5024 6.64893 80.5381 6.64893 79.3525 cv
6.64893 55.9771 li
6.64893 54.7915 7.61328 53.8271 8.79883 53.8271 cv
46.8359 53.8271 li
48.0215 53.8271 48.9858 54.7915 48.9858 55.9771 cv
48.9858 79.3525 li
48.9858 80.5381 48.0215 81.5024 46.8359 81.5024 cv
cp
.4 .4 .4 rgb
f
8.79883 111.203 mo
54.79 111.203 li
55.8945 111.203 56.79 110.309 56.79 109.203 cv
56.79 85.8276 li
56.79 84.7231 55.8945 83.8276 54.79 83.8276 cv
8.79883 83.8276 li
7.69434 83.8276 6.79883 84.7231 6.79883 85.8276 cv
6.79883 109.203 li
6.79883 110.309 7.69434 111.203 8.79883 111.203 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 31.7944 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 31.7944 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
8.79883 83.9775 mo
7.77881 83.9775 6.94873 84.8076 6.94873 85.8276 cv
6.94873 109.203 li
6.94873 110.224 7.77881 111.053 8.79883 111.053 cv
54.79 111.053 li
55.8101 111.053 56.6401 110.224 56.6401 109.203 cv
56.6401 85.8276 li
56.6401 84.8076 55.8101 83.9775 54.79 83.9775 cv
8.79883 83.9775 li
cp
54.79 111.354 mo
8.79883 111.354 li
7.61328 111.354 6.64893 110.389 6.64893 109.203 cv
6.64893 85.8276 li
6.64893 84.6421 7.61328 83.6777 8.79883 83.6777 cv
54.79 83.6777 li
55.9756 83.6777 56.9399 84.6421 56.9399 85.8276 cv
56.9399 109.203 li
56.9399 110.389 55.9756 111.354 54.79 111.354 cv
cp
.4 .4 .4 rgb
f
8.79883 140.746 mo
70.5913 140.746 li
71.6958 140.746 72.5913 139.852 72.5913 138.746 cv
72.5913 115.371 li
72.5913 114.266 71.6958 113.371 70.5913 113.371 cv
8.79883 113.371 li
7.69434 113.371 6.79883 114.266 6.79883 115.371 cv
6.79883 138.746 li
6.79883 139.852 7.69434 140.746 8.79883 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 39.6948 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 39.6948 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
8.79883 113.521 mo
7.77881 113.521 6.94873 114.351 6.94873 115.371 cv
6.94873 138.746 li
6.94873 139.767 7.77881 140.596 8.79883 140.596 cv
70.5913 140.596 li
71.6113 140.596 72.4414 139.767 72.4414 138.746 cv
72.4414 115.371 li
72.4414 114.351 71.6113 113.521 70.5913 113.521 cv
8.79883 113.521 li
cp
70.5913 140.896 mo
8.79883 140.896 li
7.61328 140.896 6.64893 139.932 6.64893 138.746 cv
6.64893 115.371 li
6.64893 114.186 7.61328 113.221 8.79883 113.221 cv
70.5913 113.221 li
71.7769 113.221 72.7412 114.186 72.7412 115.371 cv
72.7412 138.746 li
72.7412 139.932 71.7769 140.896 70.5913 140.896 cv
cp
.4 .4 .4 rgb
f
389.337 111.203 mo
440.914 111.203 li
442.019 111.203 442.914 110.309 442.914 109.203 cv
442.914 85.8276 li
442.914 84.7231 442.019 83.8276 440.914 83.8276 cv
389.337 83.8276 li
388.232 83.8276 387.337 84.7231 387.337 85.8276 cv
387.337 109.203 li
387.337 110.309 388.232 111.203 389.337 111.203 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 415.125 111.203 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 415.125 111.203 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
389.337 83.9775 mo
388.316 83.9775 387.487 84.8076 387.487 85.8276 cv
387.487 109.203 li
387.487 110.224 388.316 111.053 389.337 111.053 cv
440.914 111.053 li
441.935 111.053 442.764 110.224 442.764 109.203 cv
442.764 85.8276 li
442.764 84.8076 441.935 83.9775 440.914 83.9775 cv
389.337 83.9775 li
cp
440.914 111.354 mo
389.337 111.354 li
388.151 111.354 387.187 110.389 387.187 109.203 cv
387.187 85.8276 li
387.187 84.6421 388.151 83.6777 389.337 83.6777 cv
440.914 83.6777 li
442.1 83.6777 443.064 84.6421 443.064 85.8276 cv
443.064 109.203 li
443.064 110.389 442.1 111.354 440.914 111.354 cv
cp
.4 .4 .4 rgb
f
42.2822 170.137 mo
8.65674 170.137 li
7.55225 170.137 6.65674 169.24 6.65674 168.137 cv
6.65674 144.762 li
6.65674 143.656 7.55225 142.762 8.65674 142.762 cv
42.2822 142.762 li
43.3867 142.762 44.2822 143.656 44.2822 144.762 cv
44.2822 168.137 li
44.2822 169.24 43.3867 170.137 42.2822 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 25.4692 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 25.4692 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
8.65674 142.912 mo
7.63672 142.912 6.80664 143.741 6.80664 144.762 cv
6.80664 168.137 li
6.80664 169.157 7.63672 169.986 8.65674 169.986 cv
42.2822 169.986 li
43.3022 169.986 44.1323 169.157 44.1323 168.137 cv
44.1323 144.762 li
44.1323 143.741 43.3022 142.912 42.2822 142.912 cv
8.65674 142.912 li
cp
42.2822 170.287 mo
8.65674 170.287 li
7.47119 170.287 6.50684 169.322 6.50684 168.137 cv
6.50684 144.762 li
6.50684 143.576 7.47119 142.611 8.65674 142.611 cv
42.2822 142.611 li
43.4678 142.611 44.4321 143.576 44.4321 144.762 cv
44.4321 168.137 li
44.4321 169.322 43.4678 170.287 42.2822 170.287 cv
cp
.4 .4 .4 rgb
f
72.0254 170.137 mo
48.6499 170.137 li
47.5454 170.137 46.6499 169.24 46.6499 168.137 cv
46.6499 144.762 li
46.6499 143.656 47.5454 142.762 48.6499 142.762 cv
72.0254 142.762 li
73.1299 142.762 74.0254 143.656 74.0254 144.762 cv
74.0254 168.137 li
74.0254 169.24 73.1299 170.137 72.0254 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 60.3374 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 60.3374 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
48.6499 142.912 mo
47.6299 142.912 46.7998 143.741 46.7998 144.762 cv
46.7998 168.137 li
46.7998 169.157 47.6299 169.986 48.6499 169.986 cv
72.0254 169.986 li
73.0454 169.986 73.8755 169.157 73.8755 168.137 cv
73.8755 144.762 li
73.8755 143.741 73.0454 142.912 72.0254 142.912 cv
48.6499 142.912 li
cp
72.0254 170.287 mo
48.6499 170.287 li
47.4644 170.287 46.5 169.322 46.5 168.137 cv
46.5 144.762 li
46.5 143.576 47.4644 142.611 48.6499 142.611 cv
72.0254 142.611 li
73.2109 142.611 74.1753 143.576 74.1753 144.762 cv
74.1753 168.137 li
74.1753 169.322 73.2109 170.287 72.0254 170.287 cv
cp
.4 .4 .4 rgb
f
101.948 170.137 mo
78.5723 170.137 li
77.4678 170.137 76.5723 169.24 76.5723 168.137 cv
76.5723 144.762 li
76.5723 143.656 77.4678 142.762 78.5723 142.762 cv
101.948 142.762 li
103.052 142.762 103.948 143.656 103.948 144.762 cv
103.948 168.137 li
103.948 169.24 103.052 170.137 101.948 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 90.2603 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 90.2603 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
78.5723 142.912 mo
77.5522 142.912 76.7222 143.741 76.7222 144.762 cv
76.7222 168.137 li
76.7222 169.157 77.5522 169.986 78.5723 169.986 cv
101.948 169.986 li
102.968 169.986 103.798 169.157 103.798 168.137 cv
103.798 144.762 li
103.798 143.741 102.968 142.912 101.948 142.912 cv
78.5723 142.912 li
cp
101.948 170.287 mo
78.5723 170.287 li
77.3867 170.287 76.4224 169.322 76.4224 168.137 cv
76.4224 144.762 li
76.4224 143.576 77.3867 142.611 78.5723 142.611 cv
101.948 142.611 li
103.133 142.611 104.098 143.576 104.098 144.762 cv
104.098 168.137 li
104.098 169.322 103.133 170.287 101.948 170.287 cv
cp
.4 .4 .4 rgb
f
131.87 170.137 mo
108.495 170.137 li
107.39 170.137 106.495 169.24 106.495 168.137 cv
106.495 144.762 li
106.495 143.656 107.39 142.762 108.495 142.762 cv
131.87 142.762 li
132.975 142.762 133.87 143.656 133.87 144.762 cv
133.87 168.137 li
133.87 169.24 132.975 170.137 131.87 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 120.182 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 120.182 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
108.495 142.912 mo
107.475 142.912 106.645 143.741 106.645 144.762 cv
106.645 168.137 li
106.645 169.157 107.475 169.986 108.495 169.986 cv
131.87 169.986 li
132.89 169.986 133.72 169.157 133.72 168.137 cv
133.72 144.762 li
133.72 143.741 132.89 142.912 131.87 142.912 cv
108.495 142.912 li
cp
131.87 170.287 mo
108.495 170.287 li
107.309 170.287 106.345 169.322 106.345 168.137 cv
106.345 144.762 li
106.345 143.576 107.309 142.611 108.495 142.611 cv
131.87 142.611 li
133.056 142.611 134.02 143.576 134.02 144.762 cv
134.02 168.137 li
134.02 169.322 133.056 170.287 131.87 170.287 cv
cp
.4 .4 .4 rgb
f
283.49 170.137 mo
138.205 170.137 li
137.101 170.137 136.205 169.24 136.205 168.137 cv
136.205 144.762 li
136.205 143.656 137.101 142.762 138.205 142.762 cv
283.49 142.762 li
284.595 142.762 285.49 143.656 285.49 144.762 cv
285.49 168.137 li
285.49 169.24 284.595 170.137 283.49 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 210.848 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 210.848 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
138.205 142.912 mo
137.185 142.912 136.355 143.741 136.355 144.762 cv
136.355 168.137 li
136.355 169.157 137.185 169.986 138.205 169.986 cv
283.49 169.986 li
284.511 169.986 285.34 169.157 285.34 168.137 cv
285.34 144.762 li
285.34 143.741 284.511 142.912 283.49 142.912 cv
138.205 142.912 li
cp
283.49 170.287 mo
138.205 170.287 li
137.02 170.287 136.055 169.322 136.055 168.137 cv
136.055 144.762 li
136.055 143.576 137.02 142.611 138.205 142.611 cv
283.49 142.611 li
284.676 142.611 285.641 143.576 285.641 144.762 cv
285.641 168.137 li
285.641 169.322 284.676 170.287 283.49 170.287 cv
cp
.4 .4 .4 rgb
f
440.914 140.746 mo
417.539 140.746 li
416.435 140.746 415.539 139.852 415.539 138.746 cv
415.539 115.371 li
415.539 114.266 416.435 113.371 417.539 113.371 cv
440.914 113.371 li
442.019 113.371 442.914 114.266 442.914 115.371 cv
442.914 138.746 li
442.914 139.852 442.019 140.746 440.914 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 429.227 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 429.227 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
417.539 113.521 mo
416.519 113.521 415.689 114.351 415.689 115.371 cv
415.689 138.746 li
415.689 139.767 416.519 140.596 417.539 140.596 cv
440.914 140.596 li
441.935 140.596 442.764 139.767 442.764 138.746 cv
442.764 115.371 li
442.764 114.351 441.935 113.521 440.914 113.521 cv
417.539 113.521 li
cp
440.914 140.896 mo
417.539 140.896 li
416.354 140.896 415.389 139.932 415.389 138.746 cv
415.389 115.371 li
415.389 114.186 416.354 113.221 417.539 113.221 cv
440.914 113.221 li
442.1 113.221 443.064 114.186 443.064 115.371 cv
443.064 138.746 li
443.064 139.932 442.1 140.896 440.914 140.896 cv
cp
.4 .4 .4 rgb
f
440.914 170.137 mo
417.539 170.137 li
416.435 170.137 415.539 169.242 415.539 168.137 cv
415.539 144.762 li
415.539 143.656 416.435 142.762 417.539 142.762 cv
440.914 142.762 li
442.019 142.762 442.914 143.656 442.914 144.762 cv
442.914 168.137 li
442.914 169.242 442.019 170.137 440.914 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 429.227 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 429.227 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
417.539 142.912 mo
416.519 142.912 415.689 143.741 415.689 144.762 cv
415.689 168.137 li
415.689 169.157 416.519 169.986 417.539 169.986 cv
440.914 169.986 li
441.935 169.986 442.764 169.157 442.764 168.137 cv
442.764 144.762 li
442.764 143.741 441.935 142.912 440.914 142.912 cv
417.539 142.912 li
cp
440.914 170.287 mo
417.539 170.287 li
416.354 170.287 415.389 169.322 415.389 168.137 cv
415.389 144.762 li
415.389 143.576 416.354 142.611 417.539 142.611 cv
440.914 142.611 li
442.1 142.611 443.064 143.576 443.064 144.762 cv
443.064 168.137 li
443.064 169.322 442.1 170.287 440.914 170.287 cv
cp
.4 .4 .4 rgb
f
410.972 170.137 mo
387.597 170.137 li
386.492 170.137 385.597 169.242 385.597 168.137 cv
385.597 144.762 li
385.597 143.656 386.492 142.762 387.597 142.762 cv
410.972 142.762 li
412.076 142.762 412.972 143.656 412.972 144.762 cv
412.972 168.137 li
412.972 169.242 412.076 170.137 410.972 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 399.284 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 399.284 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
387.597 142.912 mo
386.576 142.912 385.747 143.741 385.747 144.762 cv
385.747 168.137 li
385.747 169.157 386.576 169.986 387.597 169.986 cv
410.972 169.986 li
411.992 169.986 412.821 169.157 412.821 168.137 cv
412.821 144.762 li
412.821 143.741 411.992 142.912 410.972 142.912 cv
387.597 142.912 li
cp
410.972 170.287 mo
387.597 170.287 li
386.411 170.287 385.446 169.322 385.446 168.137 cv
385.446 144.762 li
385.446 143.576 386.411 142.611 387.597 142.611 cv
410.972 142.611 li
412.157 142.611 413.122 143.576 413.122 144.762 cv
413.122 168.137 li
413.122 169.322 412.157 170.287 410.972 170.287 cv
cp
.4 .4 .4 rgb
f
410.972 140.746 mo
387.597 140.746 li
386.492 140.746 385.597 139.852 385.597 138.746 cv
385.597 115.371 li
385.597 114.266 386.492 113.371 387.597 113.371 cv
410.972 113.371 li
412.076 113.371 412.972 114.266 412.972 115.371 cv
412.972 138.746 li
412.972 139.852 412.076 140.746 410.972 140.746 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 399.284 140.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 399.284 140.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
387.597 113.521 mo
386.576 113.521 385.747 114.351 385.747 115.371 cv
385.747 138.746 li
385.747 139.767 386.576 140.596 387.597 140.596 cv
410.972 140.596 li
411.992 140.596 412.821 139.767 412.821 138.746 cv
412.821 115.371 li
412.821 114.351 411.992 113.521 410.972 113.521 cv
387.597 113.521 li
cp
410.972 140.896 mo
387.597 140.896 li
386.411 140.896 385.446 139.932 385.446 138.746 cv
385.446 115.371 li
385.446 114.186 386.411 113.221 387.597 113.221 cv
410.972 113.221 li
412.157 113.221 413.122 114.186 413.122 115.371 cv
413.122 138.746 li
413.122 139.932 412.157 140.896 410.972 140.896 cv
cp
.4 .4 .4 rgb
f
380.313 170.137 mo
356.938 170.137 li
355.833 170.137 354.938 169.242 354.938 168.137 cv
354.938 144.762 li
354.938 143.656 355.833 142.762 356.938 142.762 cv
380.313 142.762 li
381.417 142.762 382.313 143.656 382.313 144.762 cv
382.313 168.137 li
382.313 169.242 381.417 170.137 380.313 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 368.625 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 368.625 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
356.938 142.912 mo
355.917 142.912 355.088 143.741 355.088 144.762 cv
355.088 168.137 li
355.088 169.157 355.917 169.986 356.938 169.986 cv
380.313 169.986 li
381.333 169.986 382.162 169.157 382.162 168.137 cv
382.162 144.762 li
382.162 143.741 381.333 142.912 380.313 142.912 cv
356.938 142.912 li
cp
380.313 170.287 mo
356.938 170.287 li
355.752 170.287 354.787 169.322 354.787 168.137 cv
354.787 144.762 li
354.787 143.576 355.752 142.611 356.938 142.611 cv
380.313 142.611 li
381.498 142.611 382.463 143.576 382.463 144.762 cv
382.463 168.137 li
382.463 169.322 381.498 170.287 380.313 170.287 cv
cp
.4 .4 .4 rgb
f
350.496 170.137 mo
327.121 170.137 li
326.017 170.137 325.121 169.242 325.121 168.137 cv
325.121 144.762 li
325.121 143.656 326.017 142.762 327.121 142.762 cv
350.496 142.762 li
351.601 142.762 352.496 143.656 352.496 144.762 cv
352.496 168.137 li
352.496 169.242 351.601 170.137 350.496 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 338.809 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 338.809 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
327.121 142.912 mo
326.101 142.912 325.271 143.741 325.271 144.762 cv
325.271 168.137 li
325.271 169.157 326.101 169.986 327.121 169.986 cv
350.496 169.986 li
351.517 169.986 352.346 169.157 352.346 168.137 cv
352.346 144.762 li
352.346 143.741 351.517 142.912 350.496 142.912 cv
327.121 142.912 li
cp
350.496 170.287 mo
327.121 170.287 li
325.936 170.287 324.971 169.322 324.971 168.137 cv
324.971 144.762 li
324.971 143.576 325.936 142.611 327.121 142.611 cv
350.496 142.611 li
351.682 142.611 352.646 143.576 352.646 144.762 cv
352.646 168.137 li
352.646 169.322 351.682 170.287 350.496 170.287 cv
cp
.4 .4 .4 rgb
f
320.175 170.137 mo
289.985 170.137 li
288.881 170.137 287.985 169.242 287.985 168.137 cv
287.985 144.762 li
287.985 143.656 288.881 142.762 289.985 142.762 cv
320.175 142.762 li
321.279 142.762 322.175 143.656 322.175 144.762 cv
322.175 168.137 li
322.175 169.242 321.279 170.137 320.175 170.137 cv
cp
level3{
gsave
clp
[-1.1966e-006 -27.375 27.375 -1.1966e-006 305.08 170.137 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.1966e-006 -27.375 27.375 -1.1966e-006 305.08 170.137 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
289.985 142.912 mo
288.965 142.912 288.136 143.741 288.136 144.762 cv
288.136 168.137 li
288.136 169.157 288.965 169.986 289.985 169.986 cv
320.175 169.986 li
321.195 169.986 322.024 169.157 322.024 168.137 cv
322.024 144.762 li
322.024 143.741 321.195 142.912 320.175 142.912 cv
289.985 142.912 li
cp
320.175 170.287 mo
289.985 170.287 li
288.8 170.287 287.835 169.322 287.835 168.137 cv
287.835 144.762 li
287.835 143.576 288.8 142.611 289.985 142.611 cv
320.175 142.611 li
321.36 142.611 322.325 143.576 322.325 144.762 cv
322.325 168.137 li
322.325 169.322 321.36 170.287 320.175 170.287 cv
cp
.4 .4 .4 rgb
f
12.4067 17.7827 mo
10.6548 17.7827 li
10.6548 19.3091 li
12.7056 19.3091 li
12.7056 19.7603 li
10.0776 19.7603 li
10.0776 15.4946 li
12.6733 15.4946 li
12.6733 15.9487 li
10.6548 15.9487 li
10.6548 17.3286 li
12.4067 17.3286 li
12.4067 17.7827 li
cp
0 0 0 rgb
f
15.1519 18.9077 mo
15.1519 18.7808 15.1035 18.6772 15.0068 18.5972 cv
14.9102 18.5171 14.7271 18.4468 14.4575 18.3862 cv
14.0845 18.3062 13.7979 18.1938 13.5977 18.0493 cv
13.3975 17.9048 13.2974 17.7114 13.2974 17.4692 cv
13.2974 17.2114 13.4072 16.9907 13.627 16.8071 cv
13.8467 16.6235 14.1313 16.5317 14.481 16.5317 cv
14.8403 16.5317 15.1313 16.6294 15.354 16.8247 cv
15.5767 17.02 15.6831 17.2476 15.6733 17.5073 cv
15.6675 17.5249 li
15.1167 17.5249 li
15.1167 17.3882 15.0566 17.2642 14.9365 17.1528 cv
14.8164 17.0415 14.6646 16.9858 14.481 16.9858 cv
14.2778 16.9858 14.126 17.0317 14.0254 17.1235 cv
13.9248 17.2153 13.8745 17.3247 13.8745 17.4517 cv
13.8745 17.5767 13.918 17.6733 14.0049 17.7417 cv
14.0918 17.8101 14.271 17.8726 14.5425 17.9292 cv
14.9312 18.0112 15.2261 18.1274 15.4272 18.2778 cv
15.6284 18.4282 15.729 18.6245 15.729 18.8667 cv
15.729 19.1479 15.6152 19.3774 15.3877 19.5552 cv
15.1602 19.7329 14.8628 19.8218 14.4956 19.8218 cv
14.0913 19.8218 13.7729 19.7192 13.5405 19.5142 cv
13.3081 19.3091 13.1978 19.0698 13.2095 18.7964 cv
13.2153 18.7788 li
13.7661 18.7788 li
13.7759 18.9839 13.8521 19.1338 13.9946 19.2285 cv
14.1372 19.3232 14.3042 19.3706 14.4956 19.3706 cv
14.7007 19.3706 14.8613 19.3271 14.9775 19.2402 cv
15.0938 19.1533 15.1519 19.0425 15.1519 18.9077 cv
cp
f
17.7065 19.3706 mo
17.8843 19.3706 18.0396 19.3115 18.1724 19.1934 cv
18.3052 19.0752 18.3716 18.9302 18.3716 18.7583 cv
18.8931 18.7583 li
18.9019 18.7759 li
18.9097 19.0493 18.7925 19.292 18.5503 19.5039 cv
18.3081 19.7158 18.0269 19.8218 17.7065 19.8218 cv
17.2612 19.8218 16.9175 19.6704 16.6753 19.3677 cv
16.4331 19.0649 16.312 18.688 16.312 18.2368 cv
16.312 18.1138 li
16.312 17.6665 16.4336 17.291 16.6768 16.9873 cv
16.9199 16.6836 17.2632 16.5317 17.7065 16.5317 cv
18.0601 16.5317 18.3496 16.6411 18.5752 16.8599 cv
18.8008 17.0786 18.9097 17.3472 18.9019 17.6655 cv
18.896 17.6831 li
18.3716 17.6831 li
18.3716 17.4897 18.3086 17.3252 18.1826 17.1895 cv
18.0566 17.0537 17.8979 16.9858 17.7065 16.9858 cv
17.4233 16.9858 17.2168 17.0957 17.0869 17.3154 cv
16.957 17.5352 16.8921 17.8013 16.8921 18.1138 cv
16.8921 18.2368 li
16.8921 18.5552 16.9561 18.8237 17.084 19.0425 cv
17.2119 19.2612 17.4194 19.3706 17.7065 19.3706 cv
cp
f
13.8579 73.6968 mo
12.4517 73.6968 li
12.4517 77.5083 li
11.8745 77.5083 li
11.8745 73.6968 li
10.4858 73.6968 li
10.4858 73.2427 li
13.8579 73.2427 li
13.8579 73.6968 li
cp
f
15.0444 77.0864 mo
15.2534 77.0864 15.4419 77.0327 15.6099 76.9253 cv
15.7778 76.8179 15.8872 76.6948 15.938 76.5562 cv
15.938 76.0405 li
15.2905 76.0405 li
15.0581 76.0405 14.8721 76.0991 14.7324 76.2163 cv
14.5928 76.3335 14.5229 76.4712 14.5229 76.6294 cv
14.5229 76.77 14.5669 76.8813 14.6548 76.9634 cv
14.7427 77.0454 14.8726 77.0864 15.0444 77.0864 cv
cp
16.0024 77.5083 mo
15.9829 77.4126 15.9678 77.3281 15.957 77.2549 cv
15.9463 77.1816 15.9399 77.1079 15.938 77.0337 cv
15.8306 77.186 15.6904 77.3135 15.5176 77.416 cv
15.3447 77.5186 15.1587 77.5698 14.9595 77.5698 cv
14.6294 77.5698 14.3779 77.4854 14.2051 77.3164 cv
14.0322 77.1475 13.9458 76.9146 13.9458 76.6177 cv
13.9458 76.3149 14.0684 76.0781 14.3135 75.9072 cv
14.5586 75.7363 14.8911 75.6509 15.311 75.6509 cv
15.938 75.6509 li
15.938 75.3374 li
15.938 75.1519 15.8813 75.0049 15.7681 74.8965 cv
15.6548 74.7881 15.4946 74.7339 15.2876 74.7339 cv
15.1001 74.7339 14.9487 74.7808 14.8335 74.8745 cv
14.7183 74.9683 14.6606 75.0806 14.6606 75.2114 cv
14.1128 75.2173 li
14.1069 75.1997 li
14.0933 74.9692 14.2012 74.7583 14.4307 74.5669 cv
14.6602 74.3755 14.9565 74.2798 15.3198 74.2798 cv
15.6792 74.2798 15.9683 74.3711 16.187 74.5537 cv
16.4058 74.7363 16.5151 74.9995 16.5151 75.3433 cv
16.5151 76.8696 li
16.5151 76.9829 16.521 77.0923 16.5327 77.1978 cv
16.5444 77.3032 16.5659 77.4067 16.5972 77.5083 cv
16.0024 77.5083 li
cp
f
19.4829 75.9819 mo
19.4829 75.6187 19.416 75.3223 19.2822 75.0928 cv
19.1484 74.8633 18.9448 74.7485 18.6714 74.7485 cv
18.4937 74.7485 18.3438 74.792 18.2217 74.8789 cv
18.0996 74.9658 18.0024 75.0825 17.9302 75.229 cv
17.9302 76.603 li
18.0044 76.7593 18.1016 76.8813 18.2217 76.9692 cv
18.3418 77.0571 18.4937 77.1011 18.6772 77.1011 cv
18.9487 77.1011 19.1509 77.0044 19.2837 76.811 cv
19.4165 76.6177 19.4829 76.3618 19.4829 76.0435 cv
19.4829 75.9819 li
cp
20.0601 76.0435 mo
20.0601 76.5005 19.9502 76.8691 19.7305 77.1494 cv
19.5107 77.4297 19.2085 77.5698 18.8237 77.5698 cv
18.6128 77.5698 18.4297 77.5283 18.2744 77.4453 cv
18.1191 77.3623 17.9907 77.2397 17.8892 77.0776 cv
17.7954 77.5083 li
17.353 77.5083 li
17.353 72.938 li
17.9302 72.938 li
17.9302 74.7134 li
18.0298 74.5728 18.1533 74.4653 18.3008 74.3911 cv
18.4482 74.3169 18.6206 74.2798 18.8179 74.2798 cv
19.2085 74.2798 19.5132 74.436 19.7319 74.7485 cv
19.9507 75.061 20.0601 75.4722 20.0601 75.9819 cv
20.0601 76.0435 li
cp
f
14.6235 105.441 mo
14.6294 105.459 li
14.6372 105.859 14.4966 106.195 14.2075 106.465 cv
13.9185 106.734 13.5366 106.869 13.062 106.869 cv
12.5796 106.869 12.1865 106.697 11.8828 106.355 cv
11.5791 106.014 11.4272 105.58 11.4272 105.055 cv
11.4272 104.297 li
11.4272 103.771 11.5791 103.336 11.8828 102.994 cv
12.1865 102.65 12.5796 102.48 13.062 102.48 cv
13.5444 102.48 13.9282 102.607 14.2134 102.865 cv
14.4985 103.121 14.6372 103.463 14.6294 103.887 cv
14.6235 103.904 li
14.0698 103.904 li
14.0698 103.605 13.9819 103.369 13.8062 103.195 cv
13.6304 103.021 13.3823 102.934 13.062 102.934 cv
12.7397 102.934 12.4829 103.064 12.2915 103.324 cv
12.1001 103.584 12.0044 103.906 12.0044 104.291 cv
12.0044 105.055 li
12.0044 105.443 12.1001 105.768 12.2915 106.027 cv
12.4829 106.287 12.7397 106.418 13.062 106.418 cv
13.3823 106.418 13.6304 106.33 13.8062 106.158 cv
13.9819 105.984 14.0698 105.746 14.0698 105.441 cv
14.6235 105.441 li
cp
f
16.2905 106.385 mo
16.4995 106.385 16.688 106.332 16.856 106.225 cv
17.0239 106.117 17.1333 105.994 17.1841 105.855 cv
17.1841 105.34 li
16.5366 105.34 li
16.3042 105.34 16.1182 105.398 15.9785 105.516 cv
15.8389 105.633 15.769 105.77 15.769 105.928 cv
15.769 106.068 15.813 106.18 15.9009 106.262 cv
15.9888 106.344 16.1187 106.385 16.2905 106.385 cv
cp
17.2485 106.807 mo
17.229 106.711 17.2139 106.627 17.2031 106.553 cv
17.1924 106.48 17.186 106.406 17.1841 106.332 cv
17.0767 106.484 16.9365 106.611 16.7637 106.715 cv
16.5908 106.816 16.4048 106.869 16.2056 106.869 cv
15.8755 106.869 15.624 106.783 15.4512 106.615 cv
15.2783 106.445 15.1919 106.213 15.1919 105.916 cv
15.1919 105.613 15.3145 105.377 15.5596 105.205 cv
15.8047 105.035 16.1372 104.949 16.5571 104.949 cv
17.1841 104.949 li
17.1841 104.637 li
17.1841 104.451 17.1274 104.303 17.0142 104.195 cv
16.9009 104.086 16.7407 104.033 16.5337 104.033 cv
16.3462 104.033 16.1948 104.08 16.0796 104.174 cv
15.9644 104.268 15.9067 104.379 15.9067 104.51 cv
15.3589 104.516 li
15.353 104.498 li
15.3394 104.268 15.4473 104.057 15.6768 103.865 cv
15.9063 103.674 16.2026 103.578 16.5659 103.578 cv
16.9253 103.578 17.2144 103.67 17.4331 103.852 cv
17.6519 104.035 17.7612 104.299 17.7612 104.643 cv
17.7612 106.168 li
17.7612 106.281 17.7671 106.391 17.7788 106.496 cv
17.7905 106.602 17.812 106.705 17.8433 106.807 cv
17.2485 106.807 li
cp
f
20.7231 105.281 mo
20.7231 104.922 20.6523 104.625 20.5107 104.395 cv
20.3691 104.162 20.1606 104.047 19.8853 104.047 cv
19.7192 104.047 19.5776 104.084 19.4604 104.16 cv
19.3433 104.234 19.2485 104.338 19.1763 104.469 cv
19.1763 106.002 li
19.2485 106.133 19.3433 106.234 19.4604 106.307 cv
19.5776 106.381 19.7212 106.418 19.8911 106.418 cv
20.1646 106.418 20.3716 106.316 20.5122 106.117 cv
20.6528 105.916 20.7231 105.658 20.7231 105.342 cv
20.7231 105.281 li
cp
21.3003 105.342 mo
21.3003 105.799 21.1909 106.168 20.9722 106.447 cv
20.7534 106.729 20.4517 106.869 20.0669 106.869 cv
19.8716 106.869 19.7002 106.836 19.5527 106.77 cv
19.4053 106.705 19.2798 106.607 19.1763 106.477 cv
19.1763 108.025 li
18.5991 108.025 li
18.5991 103.637 li
19.0415 103.637 li
19.1323 104.047 li
19.2358 103.895 19.3647 103.779 19.519 103.699 cv
19.6733 103.619 19.853 103.578 20.0581 103.578 cv
20.4507 103.578 20.7559 103.734 20.9736 104.045 cv
21.1914 104.357 21.3003 104.77 21.3003 105.281 cv
21.3003 105.342 li
cp
f
23.8521 105.955 mo
23.8521 105.828 23.8037 105.725 23.707 105.645 cv
23.6104 105.564 23.4272 105.494 23.1577 105.434 cv
22.7847 105.354 22.498 105.24 22.2979 105.096 cv
22.0977 104.951 21.9976 104.758 21.9976 104.516 cv
21.9976 104.258 22.1074 104.037 22.3271 103.854 cv
22.5469 103.67 22.8315 103.578 23.1812 103.578 cv
23.5405 103.578 23.8315 103.676 24.0542 103.871 cv
24.2769 104.066 24.3833 104.295 24.3735 104.555 cv
24.3677 104.572 li
23.8169 104.572 li
23.8169 104.436 23.7568 104.311 23.6367 104.199 cv
23.5166 104.088 23.3647 104.033 23.1812 104.033 cv
22.978 104.033 22.8262 104.078 22.7256 104.17 cv
22.625 104.262 22.5747 104.371 22.5747 104.498 cv
22.5747 104.623 22.6182 104.721 22.7051 104.789 cv
22.792 104.857 22.9712 104.92 23.2427 104.977 cv
23.6313 105.059 23.9263 105.174 24.1274 105.324 cv
24.3286 105.475 24.4292 105.672 24.4292 105.914 cv
24.4292 106.195 24.3154 106.424 24.0879 106.602 cv
23.8604 106.779 23.563 106.869 23.1958 106.869 cv
22.7915 106.869 22.4731 106.766 22.2407 106.561 cv
22.0083 106.355 21.8979 106.117 21.9097 105.844 cv
21.9155 105.826 li
22.4663 105.826 li
22.4761 106.031 22.5522 106.18 22.6948 106.275 cv
22.8374 106.369 23.0044 106.418 23.1958 106.418 cv
23.4009 106.418 23.5615 106.373 23.6777 106.287 cv
23.7939 106.199 23.8521 106.09 23.8521 105.955 cv
cp
f
27.2622 106.807 mo
26.6851 106.807 li
26.6851 102.236 li
27.2622 102.236 li
27.2622 106.807 li
cp
f
28.5923 105.258 mo
28.5923 105.594 28.6631 105.871 28.8047 106.09 cv
28.9463 106.309 29.1567 106.418 29.436 106.418 cv
29.7114 106.418 29.9204 106.309 30.063 106.09 cv
30.2056 105.871 30.2769 105.594 30.2769 105.258 cv
30.2769 105.193 li
30.2769 104.861 30.2051 104.584 30.0615 104.363 cv
29.918 104.143 29.7075 104.033 29.4302 104.033 cv
29.1548 104.033 28.9463 104.143 28.8047 104.363 cv
28.6631 104.584 28.5923 104.861 28.5923 105.193 cv
28.5923 105.258 li
cp
28.0151 105.193 mo
28.0151 104.725 28.1421 104.338 28.396 104.033 cv
28.6499 103.73 28.9946 103.578 29.4302 103.578 cv
29.8696 103.578 30.2168 103.73 30.4717 104.033 cv
30.7266 104.336 30.854 104.723 30.854 105.193 cv
30.854 105.258 li
30.854 105.73 30.7271 106.117 30.4731 106.418 cv
30.2192 106.719 29.8735 106.869 29.436 106.869 cv
28.9985 106.869 28.6523 106.717 28.3975 106.416 cv
28.1426 106.113 28.0151 105.729 28.0151 105.258 cv
28.0151 105.193 li
cp
f
32.8198 106.418 mo
32.9976 106.418 33.1528 106.357 33.2856 106.24 cv
33.4185 106.121 33.4849 105.977 33.4849 105.805 cv
34.0063 105.805 li
34.0151 105.822 li
34.0229 106.096 33.9058 106.338 33.6636 106.551 cv
33.4214 106.762 33.1401 106.869 32.8198 106.869 cv
32.3745 106.869 32.0308 106.717 31.7886 106.414 cv
31.5464 106.111 31.4253 105.734 31.4253 105.283 cv
31.4253 105.16 li
31.4253 104.713 31.5469 104.338 31.79 104.033 cv
32.0332 103.73 32.3765 103.578 32.8198 103.578 cv
33.1733 103.578 33.4629 103.688 33.6885 103.906 cv
33.9141 104.125 34.0229 104.395 34.0151 104.713 cv
34.0093 104.73 li
33.4849 104.73 li
33.4849 104.537 33.4219 104.371 33.2959 104.236 cv
33.1699 104.1 33.0112 104.033 32.8198 104.033 cv
32.5366 104.033 32.3301 104.143 32.2002 104.361 cv
32.0703 104.582 32.0054 104.848 32.0054 105.16 cv
32.0054 105.283 li
32.0054 105.602 32.0693 105.871 32.1973 106.09 cv
32.3252 106.309 32.5327 106.418 32.8198 106.418 cv
cp
f
35.5767 105.346 mo
35.2808 105.346 li
35.2808 106.807 li
34.7036 106.807 li
34.7036 102.236 li
35.2808 102.236 li
35.2808 104.885 li
35.5708 104.885 li
36.5229 103.637 li
37.2144 103.637 li
36.063 105.1 li
37.314 106.807 li
36.6313 106.807 li
35.5767 105.346 li
cp
f
13.853 134.871 mo
13.853 134.678 13.7837 134.516 13.645 134.385 cv
13.5063 134.254 13.2622 134.143 12.9126 134.051 cv
12.479 133.943 12.1406 133.785 11.8975 133.576 cv
11.6543 133.367 11.5327 133.105 11.5327 132.789 cv
11.5327 132.455 11.6636 132.176 11.9253 131.953 cv
12.187 131.73 12.5269 131.619 12.9448 131.619 cv
13.394 131.619 13.752 131.748 14.0186 132.002 cv
14.2852 132.258 14.4146 132.555 14.4067 132.895 cv
14.3979 132.912 li
13.8472 132.912 li
13.8472 132.67 13.7627 132.469 13.5938 132.311 cv
13.4248 132.152 13.2085 132.074 12.9448 132.074 cv
12.6753 132.074 12.4688 132.139 12.3252 132.27 cv
12.1816 132.4 12.1099 132.57 12.1099 132.779 cv
12.1099 132.965 12.1885 133.121 12.3457 133.244 cv
12.5029 133.369 12.7583 133.477 13.1118 133.57 cv
13.5415 133.682 13.8687 133.846 14.0933 134.063 cv
14.3179 134.279 14.4302 134.547 14.4302 134.865 cv
14.4302 135.209 14.2949 135.486 14.0244 135.695 cv
13.7539 135.904 13.4009 136.008 12.9653 136.008 cv
12.5532 136.008 12.1895 135.893 11.874 135.662 cv
11.5586 135.432 11.4058 135.123 11.4155 134.736 cv
11.4214 134.719 li
11.9722 134.719 li
11.9722 134.986 12.0737 135.193 12.2769 135.34 cv
12.48 135.484 12.7095 135.557 12.9653 135.557 cv
13.2388 135.557 13.4551 135.496 13.6143 135.373 cv
13.7734 135.25 13.853 135.082 13.853 134.871 cv
cp
f
15.7456 133.201 mo
15.855 133.049 15.9893 132.932 16.1484 132.846 cv
16.3076 132.762 16.4839 132.719 16.6772 132.719 cv
17.0151 132.719 17.2783 132.82 17.4668 133.023 cv
17.6553 133.227 17.7495 133.539 17.7495 133.961 cv
17.7495 135.947 li
17.1724 135.947 li
17.1724 133.955 li
17.1724 133.693 17.1162 133.5 17.0039 133.375 cv
16.8916 133.25 16.7241 133.188 16.5015 133.188 cv
16.3296 133.188 16.1802 133.221 16.0532 133.289 cv
15.9263 133.355 15.8237 133.449 15.7456 133.57 cv
15.7456 135.947 li
15.1685 135.947 li
15.1685 131.377 li
15.7456 131.377 li
15.7456 133.201 li
cp
f
19.2026 135.947 mo
18.6255 135.947 li
18.6255 132.777 li
19.2026 132.777 li
19.2026 135.947 li
cp
19.2026 131.965 mo
18.6255 131.965 li
18.6255 131.377 li
19.2026 131.377 li
19.2026 131.965 li
cp
f
20.3306 135.947 mo
20.3306 133.205 li
19.8354 133.205 li
19.8354 132.777 li
20.3306 132.777 li
20.3306 132.375 li
20.3306 132.037 20.4189 131.777 20.5957 131.592 cv
20.7725 131.408 21.019 131.314 21.3354 131.314 cv
21.4019 131.314 21.4688 131.32 21.5361 131.332 cv
21.6035 131.342 21.6782 131.357 21.7603 131.377 cv
21.6899 131.816 li
21.6548 131.809 21.6123 131.801 21.5625 131.795 cv
21.5127 131.789 21.4604 131.787 21.4058 131.787 cv
21.2378 131.787 21.1128 131.838 21.0308 131.938 cv
20.9487 132.039 20.9077 132.184 20.9077 132.375 cv
20.9077 132.777 li
21.4819 132.777 li
21.4819 133.205 li
20.9077 133.205 li
20.9077 135.947 li
20.3306 135.947 li
cp
f
22.8677 132.012 mo
22.8677 132.777 li
23.4683 132.777 li
23.4683 133.205 li
22.8677 133.205 li
22.8677 135.129 li
22.8677 135.277 22.8984 135.383 22.96 135.443 cv
23.0215 135.504 23.103 135.533 23.2046 135.533 cv
23.2378 135.533 23.2749 135.529 23.3159 135.521 cv
23.3569 135.512 23.3911 135.502 23.4185 135.492 cv
23.4976 135.889 li
23.4546 135.924 23.3911 135.953 23.3071 135.975 cv
23.2231 135.998 23.1401 136.008 23.0581 136.008 cv
22.8237 136.008 22.6372 135.938 22.4985 135.797 cv
22.3599 135.654 22.2905 135.432 22.2905 135.129 cv
22.2905 133.205 li
21.7866 133.205 li
21.7866 132.777 li
22.2905 132.777 li
22.2905 132.012 li
22.8677 132.012 li
cp
f
422.371 15.9487 mo
422.371 19.3091 li
423.137 19.3091 li
423.531 19.3091 423.842 19.1792 424.069 18.9194 cv
424.297 18.6597 424.41 18.3267 424.41 17.9204 cv
424.41 17.3315 li
424.41 16.9292 424.297 16.5981 424.069 16.3384 cv
423.842 16.0786 423.531 15.9487 423.137 15.9487 cv
422.371 15.9487 li
cp
421.795 19.7603 mo
421.795 15.4946 li
423.137 15.4946 li
423.693 15.4946 424.141 15.666 424.479 16.0088 cv
424.818 16.3516 424.988 16.7944 424.988 17.3374 cv
424.988 17.9204 li
424.988 18.4653 424.818 18.9082 424.479 19.249 cv
424.141 19.5898 423.693 19.7603 423.137 19.7603 cv
421.795 19.7603 li
cp
f
427 16.9858 mo
426.799 16.9858 426.633 17.0635 426.501 17.2188 cv
426.369 17.374 426.289 17.5728 426.26 17.8149 cv
426.266 17.8296 li
427.695 17.8296 li
427.695 17.7827 li
427.695 17.5522 427.639 17.3618 427.525 17.2114 cv
427.412 17.061 427.236 16.9858 427 16.9858 cv
cp
427.092 19.8218 mo
426.637 19.8218 426.281 19.6763 426.026 19.3853 cv
425.771 19.0942 425.645 18.7114 425.645 18.2368 cv
425.645 18.1079 li
425.645 17.6528 425.775 17.2764 426.038 16.9785 cv
426.301 16.6807 426.621 16.5317 427 16.5317 cv
427.424 16.5317 427.742 16.6636 427.954 16.9272 cv
428.166 17.1909 428.271 17.5415 428.271 17.979 cv
428.271 18.2837 li
426.244 18.2837 li
426.236 18.2983 li
426.236 18.6167 426.307 18.875 426.447 19.0732 cv
426.588 19.2715 426.803 19.3706 427.092 19.3706 cv
427.287 19.3706 427.458 19.3428 427.605 19.2871 cv
427.753 19.2314 427.879 19.1548 427.984 19.0571 cv
428.211 19.4321 li
428.098 19.5415 427.947 19.6338 427.762 19.709 cv
427.576 19.7842 427.354 19.8218 427.092 19.8218 cv
cp
f
429.543 19.7603 mo
428.967 19.7603 li
428.967 15.1899 li
429.543 15.1899 li
429.543 19.7603 li
cp
f
406.699 45.5049 mo
406.699 47.0547 li
407.813 47.0547 li
408.076 47.0547 408.281 46.9897 408.427 46.8599 cv
408.572 46.73 408.645 46.5459 408.645 46.3076 cv
408.645 46.0713 408.57 45.8809 408.422 45.7363 cv
408.273 45.5918 408.074 45.5146 407.822 45.5049 cv
407.783 45.5049 li
406.699 45.5049 li
cp
406.699 45.0537 mo
407.635 45.0537 li
407.85 45.0537 408.023 44.9946 408.158 44.8765 cv
408.293 44.7583 408.361 44.5938 408.361 44.3828 cv
408.361 44.1523 408.288 43.98 408.143 43.8657 cv
407.997 43.7515 407.787 43.6943 407.514 43.6943 cv
406.699 43.6943 li
406.699 45.0537 li
cp
406.123 47.5059 mo
406.123 43.2402 li
407.514 43.2402 li
407.959 43.2402 408.309 43.3364 408.561 43.5288 cv
408.813 43.7212 408.938 44.0098 408.938 44.3945 cv
408.938 44.5781 408.881 44.7427 408.768 44.8882 cv
408.654 45.0337 408.504 45.1445 408.316 45.2207 cv
408.596 45.2598 408.817 45.3809 408.98 45.584 cv
409.144 45.7871 409.225 46.0264 409.225 46.3018 cv
409.225 46.6924 409.098 46.9907 408.844 47.1968 cv
408.59 47.4028 408.246 47.5059 407.813 47.5059 cv
406.123 47.5059 li
cp
f
410.848 47.084 mo
411.057 47.084 411.246 47.0303 411.414 46.9229 cv
411.582 46.8154 411.691 46.6924 411.742 46.5537 cv
411.742 46.0381 li
411.094 46.0381 li
410.861 46.0381 410.676 46.0967 410.536 46.2139 cv
410.396 46.3311 410.326 46.4688 410.326 46.627 cv
410.326 46.7676 410.371 46.8789 410.459 46.9609 cv
410.547 47.043 410.676 47.084 410.848 47.084 cv
cp
411.807 47.5059 mo
411.787 47.4102 411.771 47.3257 411.761 47.2524 cv
411.75 47.1792 411.744 47.1055 411.742 47.0313 cv
411.635 47.1836 411.494 47.311 411.321 47.4136 cv
411.148 47.5161 410.963 47.5674 410.764 47.5674 cv
410.434 47.5674 410.182 47.4829 410.009 47.314 cv
409.836 47.145 409.75 46.9121 409.75 46.6152 cv
409.75 46.3125 409.872 46.0757 410.117 45.9048 cv
410.362 45.7339 410.695 45.6484 411.115 45.6484 cv
411.742 45.6484 li
411.742 45.335 li
411.742 45.1494 411.686 45.0024 411.572 44.894 cv
411.459 44.7856 411.299 44.7314 411.092 44.7314 cv
410.904 44.7314 410.752 44.7783 410.637 44.8721 cv
410.521 44.9658 410.465 45.0781 410.465 45.209 cv
409.916 45.2148 li
409.91 45.1973 li
409.896 44.9668 410.005 44.7559 410.234 44.5645 cv
410.464 44.373 410.76 44.2773 411.123 44.2773 cv
411.482 44.2773 411.771 44.3687 411.99 44.5513 cv
412.209 44.7339 412.318 44.9971 412.318 45.3408 cv
412.318 46.8672 li
412.318 46.9805 412.324 47.0898 412.336 47.1953 cv
412.348 47.3008 412.369 47.4043 412.4 47.5059 cv
411.807 47.5059 li
cp
f
414.416 47.1162 mo
414.594 47.1162 414.75 47.0571 414.883 46.939 cv
415.016 46.8208 415.082 46.6758 415.082 46.5039 cv
415.604 46.5039 li
415.611 46.5215 li
415.619 46.7949 415.502 47.0376 415.26 47.2495 cv
415.018 47.4614 414.736 47.5674 414.416 47.5674 cv
413.971 47.5674 413.627 47.416 413.385 47.1133 cv
413.143 46.8105 413.021 46.4336 413.021 45.9824 cv
413.021 45.8594 li
413.021 45.4121 413.144 45.0366 413.387 44.7329 cv
413.63 44.4292 413.973 44.2773 414.416 44.2773 cv
414.77 44.2773 415.06 44.3867 415.285 44.6055 cv
415.511 44.8242 415.619 45.0928 415.611 45.4111 cv
415.605 45.4287 li
415.082 45.4287 li
415.082 45.2354 415.019 45.0708 414.893 44.9351 cv
414.767 44.7993 414.607 44.7314 414.416 44.7314 cv
414.133 44.7314 413.927 44.8413 413.797 45.061 cv
413.667 45.2808 413.602 45.5469 413.602 45.8594 cv
413.602 45.9824 li
413.602 46.3008 413.666 46.5693 413.794 46.7881 cv
413.922 47.0068 414.129 47.1162 414.416 47.1162 cv
cp
f
417.174 46.0439 mo
416.877 46.0439 li
416.877 47.5059 li
416.301 47.5059 li
416.301 42.9355 li
416.877 42.9355 li
416.877 45.584 li
417.168 45.584 li
418.119 44.3359 li
418.811 44.3359 li
417.66 45.7979 li
418.91 47.5059 li
418.229 47.5059 li
417.174 46.0439 li
cp
f
421.217 46.6533 mo
421.217 46.5264 421.168 46.4229 421.071 46.3428 cv
420.975 46.2627 420.791 46.1924 420.521 46.1318 cv
420.148 46.0518 419.862 45.9395 419.662 45.7949 cv
419.462 45.6504 419.361 45.457 419.361 45.2148 cv
419.361 44.957 419.472 44.7363 419.691 44.5527 cv
419.911 44.3691 420.195 44.2773 420.545 44.2773 cv
420.904 44.2773 421.195 44.375 421.418 44.5703 cv
421.641 44.7656 421.748 44.9932 421.738 45.2529 cv
421.732 45.2705 li
421.182 45.2705 li
421.182 45.1338 421.121 45.0098 421.001 44.8984 cv
420.881 44.7871 420.729 44.7314 420.545 44.7314 cv
420.342 44.7314 420.19 44.7773 420.09 44.8691 cv
419.989 44.9609 419.939 45.0703 419.939 45.1973 cv
419.939 45.3223 419.982 45.4189 420.069 45.4873 cv
420.156 45.5557 420.336 45.6182 420.607 45.6748 cv
420.996 45.7568 421.291 45.873 421.492 46.0234 cv
421.693 46.1738 421.793 46.3701 421.793 46.6123 cv
421.793 46.8936 421.68 47.123 421.452 47.3008 cv
421.225 47.4785 420.928 47.5674 420.561 47.5674 cv
420.156 47.5674 419.838 47.4648 419.605 47.2598 cv
419.373 47.0547 419.262 46.8154 419.273 46.542 cv
419.279 46.5244 li
419.83 46.5244 li
419.84 46.7295 419.916 46.8794 420.059 46.9741 cv
420.201 47.0688 420.369 47.1162 420.561 47.1162 cv
420.766 47.1162 420.926 47.0728 421.042 46.9858 cv
421.158 46.8989 421.217 46.7881 421.217 46.6533 cv
cp
f
424.635 45.9795 mo
424.635 45.6201 424.564 45.3247 424.423 45.0933 cv
424.281 44.8618 424.072 44.7461 423.797 44.7461 cv
423.631 44.7461 423.49 44.7837 423.373 44.8589 cv
423.256 44.9341 423.16 45.0371 423.088 45.168 cv
423.088 46.7002 li
423.16 46.8311 423.256 46.9331 423.373 47.0063 cv
423.49 47.0796 423.633 47.1162 423.803 47.1162 cv
424.076 47.1162 424.283 47.0161 424.424 46.8159 cv
424.564 46.6157 424.635 46.3574 424.635 46.041 cv
424.635 45.9795 li
cp
425.213 46.041 mo
425.213 46.498 425.104 46.8667 424.885 47.147 cv
424.666 47.4272 424.363 47.5674 423.979 47.5674 cv
423.783 47.5674 423.612 47.5347 423.465 47.4692 cv
423.317 47.4038 423.191 47.3057 423.088 47.1748 cv
423.088 48.7246 li
422.512 48.7246 li
422.512 44.3359 li
422.953 44.3359 li
423.045 44.7461 li
423.148 44.5938 423.277 44.4775 423.432 44.3975 cv
423.586 44.3174 423.766 44.2773 423.971 44.2773 cv
424.363 44.2773 424.668 44.4331 424.886 44.7446 cv
425.104 45.0562 425.213 45.4678 425.213 45.9795 cv
425.213 46.041 li
cp
f
426.912 47.084 mo
427.121 47.084 427.309 47.0303 427.477 46.9229 cv
427.645 46.8154 427.754 46.6924 427.805 46.5537 cv
427.805 46.0381 li
427.158 46.0381 li
426.926 46.0381 426.739 46.0967 426.6 46.2139 cv
426.46 46.3311 426.391 46.4688 426.391 46.627 cv
426.391 46.7676 426.434 46.8789 426.521 46.9609 cv
426.609 47.043 426.74 47.084 426.912 47.084 cv
cp
427.869 47.5059 mo
427.85 47.4102 427.835 47.3257 427.824 47.2524 cv
427.813 47.1792 427.807 47.1055 427.805 47.0313 cv
427.697 47.1836 427.558 47.311 427.385 47.4136 cv
427.212 47.5161 427.025 47.5674 426.826 47.5674 cv
426.496 47.5674 426.245 47.4829 426.072 47.314 cv
425.899 47.145 425.813 46.9121 425.813 46.6152 cv
425.813 46.3125 425.936 46.0757 426.181 45.9048 cv
426.426 45.7339 426.758 45.6484 427.178 45.6484 cv
427.805 45.6484 li
427.805 45.335 li
427.805 45.1494 427.748 45.0024 427.635 44.894 cv
427.521 44.7856 427.361 44.7314 427.154 44.7314 cv
426.967 44.7314 426.816 44.7783 426.701 44.8721 cv
426.586 44.9658 426.527 45.0781 426.527 45.209 cv
425.98 45.2148 li
425.975 45.1973 li
425.961 44.9668 426.068 44.7559 426.298 44.5645 cv
426.527 44.373 426.824 44.2773 427.188 44.2773 cv
427.547 44.2773 427.836 44.3687 428.055 44.5513 cv
428.273 44.7339 428.383 44.9971 428.383 45.3408 cv
428.383 46.8672 li
428.383 46.9805 428.389 47.0898 428.4 47.1953 cv
428.412 47.3008 428.434 47.4043 428.465 47.5059 cv
427.869 47.5059 li
cp
f
430.48 47.1162 mo
430.658 47.1162 430.813 47.0571 430.945 46.939 cv
431.078 46.8208 431.145 46.6758 431.145 46.5039 cv
431.666 46.5039 li
431.676 46.5215 li
431.684 46.7949 431.566 47.0376 431.324 47.2495 cv
431.082 47.4614 430.801 47.5674 430.48 47.5674 cv
430.035 47.5674 429.691 47.416 429.449 47.1133 cv
429.207 46.8105 429.086 46.4336 429.086 45.9824 cv
429.086 45.8594 li
429.086 45.4121 429.207 45.0366 429.45 44.7329 cv
429.693 44.4292 430.037 44.2773 430.48 44.2773 cv
430.834 44.2773 431.123 44.3867 431.349 44.6055 cv
431.574 44.8242 431.684 45.0928 431.676 45.4111 cv
431.67 45.4287 li
431.145 45.4287 li
431.145 45.2354 431.082 45.0708 430.956 44.9351 cv
430.83 44.7993 430.672 44.7314 430.48 44.7314 cv
430.197 44.7314 429.99 44.8413 429.86 45.061 cv
429.73 45.2808 429.666 45.5469 429.666 45.8594 cv
429.666 45.9824 li
429.666 46.3008 429.729 46.5693 429.857 46.7881 cv
429.985 47.0068 430.193 47.1162 430.48 47.1162 cv
cp
f
433.582 44.7314 mo
433.381 44.7314 433.215 44.8091 433.083 44.9644 cv
432.951 45.1196 432.871 45.3184 432.842 45.5605 cv
432.848 45.5752 li
434.277 45.5752 li
434.277 45.5283 li
434.277 45.2979 434.221 45.1074 434.107 44.957 cv
433.994 44.8066 433.818 44.7314 433.582 44.7314 cv
cp
433.674 47.5674 mo
433.219 47.5674 432.863 47.4219 432.608 47.1309 cv
432.354 46.8398 432.227 46.457 432.227 45.9824 cv
432.227 45.8535 li
432.227 45.3984 432.357 45.022 432.62 44.7241 cv
432.883 44.4263 433.203 44.2773 433.582 44.2773 cv
434.006 44.2773 434.324 44.4092 434.536 44.6729 cv
434.748 44.9365 434.854 45.2871 434.854 45.7246 cv
434.854 46.0293 li
432.826 46.0293 li
432.818 46.0439 li
432.818 46.3623 432.889 46.6206 433.029 46.8188 cv
433.17 47.0171 433.385 47.1162 433.674 47.1162 cv
433.869 47.1162 434.04 47.0884 434.188 47.0327 cv
434.335 46.9771 434.461 46.9004 434.566 46.8027 cv
434.793 47.1777 li
434.68 47.2871 434.529 47.3794 434.344 47.4546 cv
434.158 47.5298 433.936 47.5674 433.674 47.5674 cv
cp
f
395.307 104.83 mo
393.555 104.83 li
393.555 106.355 li
395.605 106.355 li
395.605 106.807 li
392.979 106.807 li
392.979 102.541 li
395.574 102.541 li
395.574 102.996 li
393.555 102.996 li
393.555 104.375 li
395.307 104.375 li
395.307 104.83 li
cp
f
396.725 103.637 mo
396.766 104.109 li
396.871 103.941 397.004 103.811 397.163 103.717 cv
397.322 103.625 397.504 103.578 397.707 103.578 cv
398.049 103.578 398.313 103.678 398.5 103.879 cv
398.688 104.078 398.781 104.389 398.781 104.807 cv
398.781 106.807 li
398.205 106.807 li
398.205 104.818 li
398.205 104.539 398.149 104.34 398.039 104.223 cv
397.929 104.105 397.76 104.047 397.533 104.047 cv
397.355 104.047 397.205 104.082 397.081 104.154 cv
396.957 104.225 396.859 104.326 396.787 104.455 cv
396.787 106.807 li
396.209 106.807 li
396.209 103.637 li
396.725 103.637 li
cp
f
400.422 102.873 mo
400.422 103.637 li
401.023 103.637 li
401.023 104.064 li
400.422 104.064 li
400.422 105.99 li
400.422 106.139 400.453 106.242 400.515 106.303 cv
400.576 106.363 400.658 106.395 400.76 106.395 cv
400.793 106.395 400.83 106.389 400.871 106.381 cv
400.912 106.371 400.945 106.363 400.973 106.354 cv
401.053 106.748 li
401.01 106.783 400.945 106.813 400.861 106.834 cv
400.777 106.857 400.695 106.869 400.613 106.869 cv
400.379 106.869 400.191 106.797 400.053 106.656 cv
399.914 106.514 399.846 106.293 399.846 105.99 cv
399.846 104.064 li
399.342 104.064 li
399.342 103.637 li
399.846 103.637 li
399.846 102.873 li
400.422 102.873 li
cp
f
402.863 104.033 mo
402.662 104.033 402.495 104.109 402.363 104.266 cv
402.231 104.42 402.15 104.619 402.121 104.861 cv
402.127 104.877 li
403.557 104.877 li
403.557 104.83 li
403.557 104.6 403.5 104.408 403.387 104.258 cv
403.273 104.107 403.1 104.033 402.863 104.033 cv
cp
402.953 106.869 mo
402.498 106.869 402.144 106.723 401.889 106.432 cv
401.634 106.141 401.506 105.758 401.506 105.283 cv
401.506 105.154 li
401.506 104.699 401.638 104.322 401.9 104.025 cv
402.163 103.727 402.484 103.578 402.863 103.578 cv
403.287 103.578 403.604 103.711 403.816 103.975 cv
404.028 104.238 404.135 104.588 404.135 105.025 cv
404.135 105.33 li
402.107 105.33 li
402.098 105.346 li
402.098 105.664 402.168 105.922 402.309 106.119 cv
402.449 106.318 402.664 106.418 402.953 106.418 cv
403.148 106.418 403.32 106.389 403.468 106.334 cv
403.615 106.277 403.742 106.201 403.848 106.104 cv
404.072 106.479 li
403.959 106.588 403.811 106.68 403.625 106.756 cv
403.439 106.83 403.215 106.869 402.953 106.869 cv
cp
f
406.281 104.146 mo
405.986 104.129 li
405.834 104.129 405.705 104.166 405.601 104.238 cv
405.496 104.311 405.416 104.412 405.359 104.543 cv
405.359 106.807 li
404.781 106.807 li
404.781 103.637 li
405.297 103.637 li
405.354 104.1 li
405.443 103.936 405.554 103.809 405.686 103.717 cv
405.817 103.625 405.969 103.578 406.141 103.578 cv
406.184 103.578 406.225 103.582 406.264 103.588 cv
406.303 103.596 406.336 103.604 406.361 103.611 cv
406.281 104.146 li
cp
f
423.559 134.061 mo
421.76 134.061 li
421.76 135.947 li
421.182 135.947 li
421.182 131.682 li
423.857 131.682 li
423.857 132.135 li
421.76 132.135 li
421.76 133.605 li
423.559 133.605 li
423.559 134.061 li
cp
f
424.93 132.777 mo
424.971 133.248 li
425.076 133.08 425.208 132.951 425.367 132.857 cv
425.526 132.766 425.707 132.719 425.91 132.719 cv
426.252 132.719 426.518 132.818 426.705 133.02 cv
426.893 133.219 426.986 133.527 426.986 133.945 cv
426.986 135.947 li
426.408 135.947 li
426.408 133.957 li
426.408 133.678 426.354 133.48 426.243 133.363 cv
426.133 133.246 425.965 133.188 425.738 133.188 cv
425.561 133.188 425.409 133.223 425.285 133.295 cv
425.161 133.365 425.063 133.465 424.99 133.594 cv
424.99 135.947 li
424.414 135.947 li
424.414 132.777 li
424.93 132.777 li
cp
f
13.9556 163.572 mo
12.1567 163.572 li
12.1567 165.459 li
11.5796 165.459 li
11.5796 161.193 li
14.2544 161.193 li
14.2544 161.646 li
12.1567 161.646 li
12.1567 163.117 li
13.9556 163.117 li
13.9556 163.572 li
cp
f
15.3267 162.289 mo
15.3677 162.76 li
15.4731 162.592 15.6055 162.461 15.7646 162.369 cv
15.9238 162.275 16.105 162.23 16.3081 162.23 cv
16.6499 162.23 16.9146 162.33 17.1021 162.529 cv
17.2896 162.73 17.3833 163.039 17.3833 163.457 cv
17.3833 165.459 li
16.8062 165.459 li
16.8062 163.469 li
16.8062 163.189 16.751 162.992 16.6406 162.875 cv
16.5303 162.758 16.3618 162.699 16.1353 162.699 cv
15.9575 162.699 15.8066 162.734 15.6826 162.805 cv
15.5586 162.877 15.4604 162.977 15.3882 163.105 cv
15.3882 165.459 li
14.811 165.459 li
14.811 162.289 li
15.3267 162.289 li
cp
f
54.0771 164.094 mo
54.083 164.111 li
54.0908 164.512 53.9502 164.846 53.6611 165.115 cv
53.3721 165.385 52.9902 165.52 52.5156 165.52 cv
52.0332 165.52 51.6401 165.35 51.3364 165.008 cv
51.0327 164.666 50.8809 164.232 50.8809 163.707 cv
50.8809 162.947 li
50.8809 162.422 51.0327 161.988 51.3364 161.645 cv
51.6401 161.303 52.0332 161.131 52.5156 161.131 cv
52.998 161.131 53.3818 161.26 53.667 161.516 cv
53.9521 161.773 54.0908 162.113 54.083 162.537 cv
54.0771 162.555 li
53.5234 162.555 li
53.5234 162.256 53.4355 162.02 53.2598 161.846 cv
53.084 161.672 52.8359 161.586 52.5156 161.586 cv
52.1934 161.586 51.9365 161.715 51.7451 161.975 cv
51.5537 162.234 51.458 162.557 51.458 162.941 cv
51.458 163.707 li
51.458 164.096 51.5537 164.42 51.7451 164.68 cv
51.9365 164.939 52.1934 165.068 52.5156 165.068 cv
52.8359 165.068 53.084 164.982 53.2598 164.809 cv
53.4355 164.637 53.5234 164.398 53.5234 164.094 cv
54.0771 164.094 li
cp
f
55.5566 161.523 mo
55.5566 162.289 li
56.1572 162.289 li
56.1572 162.717 li
55.5566 162.717 li
55.5566 164.641 li
55.5566 164.789 55.5874 164.895 55.6489 164.955 cv
55.7104 165.016 55.792 165.045 55.8936 165.045 cv
55.9268 165.045 55.9639 165.041 56.0049 165.031 cv
56.0459 165.023 56.0801 165.014 56.1074 165.004 cv
56.1865 165.4 li
56.1436 165.436 56.0801 165.463 55.9961 165.486 cv
55.9121 165.508 55.8291 165.52 55.7471 165.52 cv
55.5127 165.52 55.3262 165.449 55.1875 165.307 cv
55.0488 165.166 54.9795 164.943 54.9795 164.641 cv
54.9795 162.717 li
54.4756 162.717 li
54.4756 162.289 li
54.9795 162.289 li
54.9795 161.523 li
55.5566 161.523 li
cp
f
58.2754 162.799 mo
57.9795 162.781 li
57.8271 162.781 57.6987 162.816 57.5942 162.889 cv
57.4897 162.961 57.4092 163.063 57.3525 163.193 cv
57.3525 165.459 li
56.7754 165.459 li
56.7754 162.289 li
57.291 162.289 li
57.3467 162.752 li
57.4365 162.588 57.5474 162.459 57.6792 162.367 cv
57.811 162.275 57.9629 162.23 58.1348 162.23 cv
58.1777 162.23 58.2188 162.232 58.2578 162.24 cv
58.2969 162.246 58.3291 162.254 58.3545 162.262 cv
58.2754 162.799 li
cp
f
59.5 165.459 mo
58.9229 165.459 li
58.9229 160.889 li
59.5 160.889 li
59.5 165.459 li
cp
f
332.824 164.094 mo
332.83 164.111 li
332.838 164.512 332.697 164.846 332.408 165.115 cv
332.119 165.385 331.737 165.52 331.263 165.52 cv
330.78 165.52 330.387 165.35 330.084 165.008 cv
329.779 164.666 329.628 164.232 329.628 163.707 cv
329.628 162.947 li
329.628 162.422 329.779 161.988 330.084 161.645 cv
330.387 161.303 330.78 161.131 331.263 161.131 cv
331.745 161.131 332.129 161.26 332.414 161.516 cv
332.699 161.773 332.838 162.113 332.83 162.537 cv
332.824 162.555 li
332.271 162.555 li
332.271 162.256 332.183 162.02 332.007 161.846 cv
331.831 161.672 331.583 161.586 331.263 161.586 cv
330.94 161.586 330.684 161.715 330.492 161.975 cv
330.301 162.234 330.205 162.557 330.205 162.941 cv
330.205 163.707 li
330.205 164.096 330.301 164.42 330.492 164.68 cv
330.684 164.939 330.94 165.068 331.263 165.068 cv
331.583 165.068 331.831 164.982 332.007 164.809 cv
332.183 164.637 332.271 164.398 332.271 164.094 cv
332.824 164.094 li
cp
f
334.304 161.523 mo
334.304 162.289 li
334.904 162.289 li
334.904 162.717 li
334.304 162.717 li
334.304 164.641 li
334.304 164.789 334.334 164.895 334.396 164.955 cv
334.457 165.016 334.539 165.045 334.641 165.045 cv
334.674 165.045 334.711 165.041 334.752 165.031 cv
334.793 165.023 334.827 165.014 334.854 165.004 cv
334.934 165.4 li
334.891 165.436 334.827 165.463 334.743 165.486 cv
334.659 165.508 334.576 165.52 334.494 165.52 cv
334.26 165.52 334.073 165.449 333.935 165.307 cv
333.796 165.166 333.727 164.943 333.727 164.641 cv
333.727 162.717 li
333.223 162.717 li
333.223 162.289 li
333.727 162.289 li
333.727 161.523 li
334.304 161.523 li
cp
f
337.022 162.799 mo
336.727 162.781 li
336.574 162.781 336.445 162.816 336.342 162.889 cv
336.236 162.961 336.156 163.063 336.1 163.193 cv
336.1 165.459 li
335.522 165.459 li
335.522 162.289 li
336.038 162.289 li
336.094 162.752 li
336.184 162.588 336.295 162.459 336.426 162.367 cv
336.559 162.275 336.71 162.23 336.882 162.23 cv
336.925 162.23 336.966 162.232 337.005 162.24 cv
337.044 162.246 337.076 162.254 337.102 162.262 cv
337.022 162.799 li
cp
f
338.247 165.459 mo
337.67 165.459 li
337.67 160.889 li
338.247 160.889 li
338.247 165.459 li
cp
f
84.2075 162.941 mo
84.2075 162.551 84.1021 162.23 83.8911 161.98 cv
83.6802 161.73 83.397 161.605 83.0415 161.605 cv
82.7056 161.605 82.4375 161.73 82.2373 161.98 cv
82.0371 162.23 81.937 162.551 81.937 162.941 cv
81.937 163.707 li
81.937 164.102 82.0371 164.424 82.2373 164.674 cv
82.4375 164.924 82.7056 165.049 83.0415 165.049 cv
83.3989 165.049 83.6826 164.924 83.8926 164.674 cv
84.1025 164.426 84.2075 164.104 84.2075 163.707 cv
84.2075 162.941 li
cp
84.7847 163.707 mo
84.7847 164.229 84.623 164.66 84.2998 165.004 cv
83.9766 165.348 83.5571 165.52 83.0415 165.52 cv
82.5435 165.52 82.1387 165.348 81.8271 165.004 cv
81.5156 164.66 81.3599 164.229 81.3599 163.707 cv
81.3599 162.947 li
81.3599 162.428 81.5156 161.996 81.8271 161.65 cv
82.1387 161.305 82.5435 161.131 83.0415 161.131 cv
83.5571 161.131 83.9766 161.303 84.2998 161.648 cv
84.623 161.992 84.7847 162.426 84.7847 162.947 cv
84.7847 163.707 li
cp
f
87.6616 163.932 mo
87.6616 163.572 87.5908 163.277 87.4492 163.045 cv
87.3076 162.814 87.0991 162.699 86.8237 162.699 cv
86.6577 162.699 86.5161 162.736 86.3989 162.811 cv
86.2817 162.887 86.187 162.99 86.1147 163.121 cv
86.1147 164.652 li
86.187 164.783 86.2817 164.885 86.3989 164.959 cv
86.5161 165.031 86.6597 165.068 86.8296 165.068 cv
87.103 165.068 87.3101 164.969 87.4507 164.768 cv
87.5913 164.568 87.6616 164.311 87.6616 163.994 cv
87.6616 163.932 li
cp
88.2388 163.994 mo
88.2388 164.451 88.1294 164.818 87.9106 165.1 cv
87.6919 165.379 87.3901 165.52 87.0054 165.52 cv
86.8101 165.52 86.6387 165.486 86.4912 165.422 cv
86.3438 165.355 86.2183 165.258 86.1147 165.127 cv
86.1147 166.678 li
85.5376 166.678 li
85.5376 162.289 li
85.98 162.289 li
86.0708 162.699 li
86.1743 162.547 86.3032 162.43 86.4575 162.35 cv
86.6118 162.27 86.7915 162.23 86.9966 162.23 cv
87.3892 162.23 87.6943 162.385 87.9121 162.697 cv
88.1299 163.008 88.2388 163.42 88.2388 163.932 cv
88.2388 163.994 li
cp
f
89.7505 161.523 mo
89.7505 162.289 li
90.3511 162.289 li
90.3511 162.717 li
89.7505 162.717 li
89.7505 164.641 li
89.7505 164.789 89.7813 164.895 89.8428 164.955 cv
89.9043 165.016 89.9858 165.045 90.0874 165.045 cv
90.1206 165.045 90.1577 165.041 90.1987 165.031 cv
90.2397 165.023 90.2739 165.014 90.3013 165.004 cv
90.3804 165.4 li
90.3374 165.436 90.2739 165.463 90.1899 165.486 cv
90.106 165.508 90.0229 165.52 89.9409 165.52 cv
89.7065 165.52 89.52 165.449 89.3813 165.307 cv
89.2427 165.166 89.1733 164.943 89.1733 164.641 cv
89.1733 162.717 li
88.6694 162.717 li
88.6694 162.289 li
89.1733 162.289 li
89.1733 161.523 li
89.7505 161.523 li
cp
f
91.5933 165.459 mo
91.0161 165.459 li
91.0161 162.289 li
91.5933 162.289 li
91.5933 165.459 li
cp
91.5933 161.477 mo
91.0161 161.477 li
91.0161 160.889 li
91.5933 160.889 li
91.5933 161.477 li
cp
f
92.9233 163.908 mo
92.9233 164.244 92.9941 164.521 93.1357 164.74 cv
93.2773 164.959 93.4878 165.068 93.7671 165.068 cv
94.0425 165.068 94.2515 164.959 94.394 164.74 cv
94.5366 164.521 94.6079 164.244 94.6079 163.908 cv
94.6079 163.844 li
94.6079 163.512 94.5361 163.236 94.3926 163.016 cv
94.249 162.795 94.0386 162.684 93.7612 162.684 cv
93.4858 162.684 93.2773 162.795 93.1357 163.016 cv
92.9941 163.236 92.9233 163.512 92.9233 163.844 cv
92.9233 163.908 li
cp
92.3462 163.844 mo
92.3462 163.375 92.4731 162.988 92.7271 162.686 cv
92.981 162.381 93.3257 162.23 93.7612 162.23 cv
94.2007 162.23 94.5479 162.381 94.8027 162.684 cv
95.0576 162.986 95.1851 163.373 95.1851 163.844 cv
95.1851 163.908 li
95.1851 164.381 95.0581 164.768 94.8042 165.068 cv
94.5503 165.369 94.2046 165.52 93.7671 165.52 cv
93.3296 165.52 92.9834 165.369 92.7285 165.066 cv
92.4736 164.766 92.3462 164.379 92.3462 163.908 cv
92.3462 163.844 li
cp
f
96.4067 162.289 mo
96.4478 162.76 li
96.5532 162.592 96.6855 162.461 96.8447 162.369 cv
97.0039 162.275 97.1851 162.23 97.3882 162.23 cv
97.73 162.23 97.9946 162.33 98.1821 162.529 cv
98.3696 162.73 98.4634 163.039 98.4634 163.457 cv
98.4634 165.459 li
97.8862 165.459 li
97.8862 163.469 li
97.8862 163.189 97.8311 162.992 97.7207 162.875 cv
97.6104 162.758 97.4419 162.699 97.2153 162.699 cv
97.0376 162.699 96.8867 162.734 96.7627 162.805 cv
96.6387 162.877 96.5405 162.977 96.4683 163.105 cv
96.4683 165.459 li
95.8911 165.459 li
95.8911 162.289 li
96.4067 162.289 li
cp
f
112.596 163.877 mo
113.87 163.877 li
113.249 162.045 li
113.231 162.045 li
112.596 163.877 li
cp
114.034 164.359 mo
112.429 164.359 li
112.048 165.459 li
111.459 165.459 li
112.997 161.193 li
113.492 161.193 li
114.998 165.459 li
114.409 165.459 li
114.034 164.359 li
cp
f
116.17 165.459 mo
115.593 165.459 li
115.593 160.889 li
116.17 160.889 li
116.17 165.459 li
cp
f
117.86 161.523 mo
117.86 162.289 li
118.461 162.289 li
118.461 162.717 li
117.86 162.717 li
117.86 164.641 li
117.86 164.789 117.891 164.895 117.953 164.955 cv
118.014 165.016 118.096 165.045 118.197 165.045 cv
118.23 165.045 118.268 165.041 118.309 165.031 cv
118.35 165.023 118.384 165.014 118.411 165.004 cv
118.49 165.4 li
118.447 165.436 118.384 165.463 118.3 165.486 cv
118.216 165.508 118.133 165.52 118.051 165.52 cv
117.816 165.52 117.63 165.449 117.491 165.307 cv
117.353 165.166 117.283 164.943 117.283 164.641 cv
117.283 162.717 li
116.779 162.717 li
116.779 162.289 li
117.283 162.289 li
117.283 161.523 li
117.86 161.523 li
cp
f
293.672 163.877 mo
294.946 163.877 li
294.325 162.045 li
294.308 162.045 li
293.672 163.877 li
cp
295.11 164.359 mo
293.505 164.359 li
293.124 165.459 li
292.535 165.459 li
294.073 161.193 li
294.568 161.193 li
296.074 165.459 li
295.485 165.459 li
295.11 164.359 li
cp
f
297.246 165.459 mo
296.669 165.459 li
296.669 160.889 li
297.246 160.889 li
297.246 165.459 li
cp
f
298.937 161.523 mo
298.937 162.289 li
299.537 162.289 li
299.537 162.717 li
298.937 162.717 li
298.937 164.641 li
298.937 164.789 298.967 164.895 299.029 164.955 cv
299.09 165.016 299.172 165.045 299.273 165.045 cv
299.307 165.045 299.344 165.041 299.385 165.031 cv
299.426 165.023 299.46 165.014 299.487 165.004 cv
299.566 165.4 li
299.523 165.436 299.46 165.463 299.376 165.486 cv
299.292 165.508 299.209 165.52 299.127 165.52 cv
298.893 165.52 298.706 165.449 298.567 165.307 cv
298.429 165.166 298.359 164.943 298.359 164.641 cv
298.359 162.717 li
297.855 162.717 li
297.855 162.289 li
298.359 162.289 li
298.359 161.523 li
298.937 161.523 li
cp
f
395.753 19.7603 mo
395.173 19.7603 li
395.173 15.4946 li
395.753 15.4946 li
395.753 19.7603 li
cp
f
397.247 16.5903 mo
397.288 17.062 li
397.394 16.894 397.525 16.7637 397.686 16.6709 cv
397.844 16.5781 398.025 16.5317 398.229 16.5317 cv
398.57 16.5317 398.835 16.6318 399.022 16.832 cv
399.21 17.0322 399.304 17.3413 399.304 17.7593 cv
399.304 19.7603 li
398.727 19.7603 li
398.727 17.771 li
398.727 17.4917 398.672 17.2935 398.561 17.1763 cv
398.451 17.0591 398.282 17.0005 398.056 17.0005 cv
397.878 17.0005 397.727 17.0361 397.604 17.1074 cv
397.479 17.1787 397.381 17.2788 397.309 17.4077 cv
397.309 19.7603 li
396.731 19.7603 li
396.731 16.5903 li
397.247 16.5903 li
cp
f
401.984 18.9077 mo
401.984 18.7808 401.936 18.6772 401.84 18.5972 cv
401.742 18.5171 401.56 18.4468 401.29 18.3862 cv
400.917 18.3062 400.631 18.1938 400.43 18.0493 cv
400.23 17.9048 400.13 17.7114 400.13 17.4692 cv
400.13 17.2114 400.24 16.9907 400.459 16.8071 cv
400.68 16.6235 400.964 16.5317 401.313 16.5317 cv
401.673 16.5317 401.964 16.6294 402.187 16.8247 cv
402.409 17.02 402.516 17.2476 402.506 17.5073 cv
402.5 17.5249 li
401.949 17.5249 li
401.949 17.3882 401.889 17.2642 401.77 17.1528 cv
401.648 17.0415 401.497 16.9858 401.313 16.9858 cv
401.11 16.9858 400.959 17.0317 400.857 17.1235 cv
400.758 17.2153 400.707 17.3247 400.707 17.4517 cv
400.707 17.5767 400.75 17.6733 400.838 17.7417 cv
400.924 17.8101 401.104 17.8726 401.375 17.9292 cv
401.764 18.0112 402.059 18.1274 402.26 18.2778 cv
402.461 18.4282 402.562 18.6245 402.562 18.8667 cv
402.562 19.1479 402.447 19.3774 402.221 19.5552 cv
401.992 19.7329 401.695 19.8218 401.328 19.8218 cv
400.924 19.8218 400.605 19.7192 400.373 19.5142 cv
400.141 19.3091 400.03 19.0698 400.042 18.7964 cv
400.048 18.7788 li
400.599 18.7788 li
400.608 18.9839 400.685 19.1338 400.827 19.2285 cv
400.97 19.3232 401.137 19.3706 401.328 19.3706 cv
401.533 19.3706 401.693 19.3271 401.811 19.2402 cv
401.926 19.1533 401.984 19.0425 401.984 18.9077 cv
cp
f
404.501 16.9858 mo
404.3 16.9858 404.133 17.0635 404.002 17.2188 cv
403.869 17.374 403.789 17.5728 403.76 17.8149 cv
403.766 17.8296 li
405.195 17.8296 li
405.195 17.7827 li
405.195 17.5522 405.139 17.3618 405.025 17.2114 cv
404.912 17.061 404.737 16.9858 404.501 16.9858 cv
cp
404.592 19.8218 mo
404.137 19.8218 403.781 19.6763 403.527 19.3853 cv
403.271 19.0942 403.145 18.7114 403.145 18.2368 cv
403.145 18.1079 li
403.145 17.6528 403.275 17.2764 403.539 16.9785 cv
403.801 16.6807 404.122 16.5317 404.501 16.5317 cv
404.925 16.5317 405.242 16.6636 405.455 16.9272 cv
405.666 17.1909 405.772 17.5415 405.772 17.979 cv
405.772 18.2837 li
403.745 18.2837 li
403.736 18.2983 li
403.736 18.6167 403.807 18.875 403.947 19.0732 cv
404.088 19.2715 404.303 19.3706 404.592 19.3706 cv
404.787 19.3706 404.959 19.3428 405.105 19.2871 cv
405.254 19.2314 405.38 19.1548 405.485 19.0571 cv
405.711 19.4321 li
405.598 19.5415 405.448 19.6338 405.263 19.709 cv
405.077 19.7842 404.854 19.8218 404.592 19.8218 cv
cp
f
407.92 17.1001 mo
407.624 17.0825 li
407.472 17.0825 407.344 17.1187 407.238 17.1909 cv
407.135 17.2632 407.054 17.3647 406.997 17.4956 cv
406.997 19.7603 li
406.42 19.7603 li
406.42 16.5903 li
406.936 16.5903 li
406.991 17.0532 li
407.081 16.8892 407.191 16.7612 407.324 16.6694 cv
407.455 16.5776 407.607 16.5317 407.779 16.5317 cv
407.822 16.5317 407.863 16.5352 407.902 16.542 cv
407.941 16.5488 407.974 16.5562 407.999 16.564 cv
407.92 17.1001 li
cp
f
409.373 15.8257 mo
409.373 16.5903 li
409.974 16.5903 li
409.974 17.0181 li
409.373 17.0181 li
409.373 18.9429 li
409.373 19.0913 409.404 19.1958 409.465 19.2563 cv
409.527 19.3169 409.608 19.3472 409.71 19.3472 cv
409.743 19.3472 409.78 19.3428 409.821 19.334 cv
409.862 19.3252 409.896 19.3159 409.924 19.3062 cv
410.003 19.7017 li
409.96 19.7368 409.896 19.7656 409.813 19.7881 cv
409.729 19.8105 409.646 19.8218 409.563 19.8218 cv
409.329 19.8218 409.143 19.751 409.004 19.6094 cv
408.865 19.4678 408.796 19.2456 408.796 18.9429 cv
408.796 17.0181 li
408.292 17.0181 li
408.292 16.5903 li
408.796 16.5903 li
408.796 15.8257 li
409.373 15.8257 li
cp
f
46.1494 15.8735 mo
44.3506 15.8735 li
44.3506 17.7603 li
43.7734 17.7603 li
43.7734 13.4946 li
46.4482 13.4946 li
46.4482 13.9487 li
44.3506 13.9487 li
44.3506 15.4194 li
46.1494 15.4194 li
46.1494 15.8735 li
cp
f
48.666 17.7603 mo
48.0859 17.7603 li
48.0859 14.0278 li
47.1572 14.0366 li
47.1572 13.5913 li
48.666 13.4331 li
48.666 17.7603 li
cp
f
74.4185 15.8735 mo
72.6196 15.8735 li
72.6196 17.7603 li
72.0425 17.7603 li
72.0425 13.4946 li
74.7173 13.4946 li
74.7173 13.9487 li
72.6196 13.9487 li
72.6196 15.4194 li
74.4185 15.4194 li
74.4185 15.8735 li
cp
f
77.9429 17.7603 mo
75.2944 17.7603 li
75.2944 17.3647 li
76.6333 15.7681 li
76.8716 15.479 77.0332 15.249 77.1182 15.0781 cv
77.2031 14.9072 77.2456 14.7349 77.2456 14.561 cv
77.2456 14.3638 77.188 14.2021 77.0728 14.0762 cv
76.9575 13.9502 76.7983 13.8872 76.5952 13.8872 cv
76.3433 13.8872 76.1514 13.9644 76.0195 14.1187 cv
75.8877 14.2729 75.8218 14.4653 75.8218 14.6958 cv
75.2651 14.6958 li
75.2593 14.6782 li
75.2495 14.3306 75.3657 14.0361 75.6079 13.7949 cv
75.8501 13.5537 76.1792 13.4331 76.5952 13.4331 cv
76.9761 13.4331 77.2759 13.5386 77.4946 13.7495 cv
77.7134 13.9604 77.8228 14.2329 77.8228 14.5669 cv
77.8228 14.7915 77.7607 15.0112 77.6367 15.2261 cv
77.5127 15.4409 77.3237 15.7104 77.0698 16.0347 cv
75.9946 17.2944 li
76.0005 17.3091 li
77.9429 17.3091 li
77.9429 17.7603 li
cp
f
102.266 15.8735 mo
100.467 15.8735 li
100.467 17.7603 li
99.8896 17.7603 li
99.8896 13.4946 li
102.564 13.4946 li
102.564 13.9487 li
100.467 13.9487 li
100.467 15.4194 li
102.266 15.4194 li
102.266 15.8735 li
cp
f
104.398 15.3345 mo
104.656 15.3345 104.838 15.2705 104.945 15.1426 cv
105.051 15.0146 105.104 14.8354 105.104 14.605 cv
105.104 14.3901 105.046 14.2168 104.93 14.085 cv
104.814 13.9531 104.642 13.8872 104.413 13.8872 cv
104.19 13.8872 104.006 13.9561 103.861 14.0938 cv
103.715 14.2314 103.643 14.4038 103.643 14.6108 cv
103.092 14.6108 li
103.083 14.5933 li
103.073 14.2729 103.194 13.9995 103.446 13.7729 cv
103.698 13.5464 104.021 13.4331 104.413 13.4331 cv
104.81 13.4331 105.12 13.5332 105.345 13.7334 cv
105.569 13.9336 105.682 14.228 105.682 14.6167 cv
105.682 14.8159 105.629 14.9976 105.525 15.1616 cv
105.42 15.3257 105.274 15.4536 105.087 15.5454 cv
105.302 15.6313 105.465 15.7617 105.578 15.9365 cv
105.69 16.1113 105.746 16.3228 105.746 16.5708 cv
105.746 16.9614 105.623 17.2676 105.375 17.4893 cv
105.128 17.7109 104.808 17.8218 104.413 17.8218 cv
104.05 17.8218 103.73 17.7148 103.454 17.501 cv
103.177 17.2871 103.044 17.0044 103.054 16.6528 cv
103.06 16.6353 li
103.61 16.6353 li
103.61 16.8423 103.685 17.0166 103.834 17.1582 cv
103.984 17.2998 104.177 17.3706 104.413 17.3706 cv
104.647 17.3706 104.832 17.2979 104.967 17.1523 cv
105.102 17.0068 105.169 16.8169 105.169 16.5825 cv
105.169 16.3149 105.107 16.1147 104.983 15.9819 cv
104.859 15.8491 104.664 15.7827 104.398 15.7827 cv
103.924 15.7827 li
103.924 15.3345 li
104.398 15.3345 li
cp
f
129.205 15.8735 mo
127.406 15.8735 li
127.406 17.7603 li
126.829 17.7603 li
126.829 13.4946 li
129.503 13.4946 li
129.503 13.9487 li
127.406 13.9487 li
127.406 15.4194 li
129.205 15.4194 li
129.205 15.8735 li
cp
f
130.47 16.3247 mo
131.683 16.3247 li
131.683 14.3237 li
131.666 14.3208 li
131.61 14.4673 li
130.47 16.3247 li
cp
132.257 16.3247 mo
132.846 16.3247 li
132.846 16.7759 li
132.257 16.7759 li
132.257 17.7603 li
131.683 17.7603 li
131.683 16.7759 li
129.852 16.7759 li
129.852 16.4507 li
131.648 13.4946 li
132.257 13.4946 li
132.257 16.3247 li
cp
f
156.349 15.8735 mo
154.55 15.8735 li
154.55 17.7603 li
153.973 17.7603 li
153.973 13.4946 li
156.647 13.4946 li
156.647 13.9487 li
154.55 13.9487 li
154.55 15.4194 li
156.349 15.4194 li
156.349 15.8735 li
cp
f
157.298 15.8647 mo
157.544 13.4946 li
159.68 13.4946 li
159.68 14.0073 li
158.03 14.0073 li
157.893 15.2349 li
157.984 15.1665 158.086 15.1104 158.197 15.0664 cv
158.309 15.0225 158.436 14.9995 158.578 14.9976 cv
158.973 14.9937 159.282 15.1172 159.505 15.3682 cv
159.729 15.6191 159.841 15.9634 159.841 16.4009 cv
159.841 16.8286 159.726 17.1724 159.497 17.4321 cv
159.267 17.6919 158.933 17.8218 158.493 17.8218 cv
158.132 17.8218 157.831 17.7231 157.591 17.5259 cv
157.351 17.3286 157.235 17.0386 157.245 16.6558 cv
157.251 16.6382 li
157.772 16.6382 li
157.772 16.8706 157.839 17.0508 157.973 17.1787 cv
158.107 17.3066 158.28 17.3706 158.493 17.3706 cv
158.737 17.3706 158.927 17.2847 159.062 17.1128 cv
159.196 16.9409 159.264 16.7056 159.264 16.4067 cv
159.264 16.1353 159.196 15.9155 159.06 15.7476 cv
158.924 15.5796 158.735 15.4956 158.493 15.4956 cv
158.267 15.4956 158.103 15.5298 158.001 15.5981 cv
157.899 15.6665 157.824 15.772 157.775 15.9146 cv
157.298 15.8647 li
cp
f
183.774 15.8735 mo
181.975 15.8735 li
181.975 17.7603 li
181.398 17.7603 li
181.398 13.4946 li
184.073 13.4946 li
184.073 13.9487 li
181.975 13.9487 li
181.975 15.4194 li
183.774 15.4194 li
183.774 15.8735 li
cp
f
185.951 15.4751 mo
185.769 15.4751 185.613 15.5137 185.483 15.5908 cv
185.354 15.668 185.254 15.772 185.186 15.9028 cv
185.186 16.1987 li
185.186 16.5601 185.265 16.8457 185.422 17.0557 cv
185.579 17.2656 185.772 17.3706 186 17.3706 cv
186.241 17.3706 186.426 17.2793 186.556 17.0967 cv
186.686 16.9141 186.75 16.6763 186.75 16.3833 cv
186.75 16.106 186.681 15.8853 186.541 15.7212 cv
186.401 15.5571 186.205 15.4751 185.951 15.4751 cv
cp
186.088 13.4331 mo
186.256 13.4331 186.422 13.4497 186.586 13.4829 cv
186.75 13.5161 186.886 13.5581 186.994 13.6089 cv
186.871 14.0513 li
186.759 14.0024 186.642 13.9629 186.519 13.9326 cv
186.396 13.9023 186.252 13.8872 186.088 13.8872 cv
185.821 13.8872 185.604 14.0015 185.437 14.23 cv
185.27 14.4585 185.186 14.7476 185.186 15.0972 cv
185.186 15.4282 li
185.305 15.3091 185.446 15.2153 185.609 15.147 cv
185.772 15.0786 185.948 15.0444 186.135 15.0444 cv
186.502 15.0444 186.793 15.1675 187.007 15.4136 cv
187.221 15.6597 187.328 15.9829 187.328 16.3833 cv
187.328 16.8208 187.208 17.1699 186.969 17.4307 cv
186.729 17.6914 186.407 17.8218 186 17.8218 cv
185.606 17.8218 185.276 17.6719 185.01 17.3721 cv
184.745 17.0723 184.612 16.6626 184.612 16.1431 cv
184.612 15.1616 li
184.612 14.6616 184.754 14.2485 185.038 13.9224 cv
185.322 13.5962 185.672 13.4331 186.088 13.4331 cv
cp
f
211.059 15.8735 mo
209.26 15.8735 li
209.26 17.7603 li
208.683 17.7603 li
208.683 13.4946 li
211.358 13.4946 li
211.358 13.9487 li
209.26 13.9487 li
209.26 15.4194 li
211.059 15.4194 li
211.059 15.8735 li
cp
f
214.61 13.9487 mo
214.071 14.5894 213.707 15.1548 213.517 15.645 cv
213.328 16.1353 213.233 16.6851 213.233 17.2944 cv
213.233 17.7603 li
212.656 17.7603 li
212.656 17.2944 li
212.656 16.6499 212.774 16.0693 213.012 15.5527 cv
213.249 15.0361 213.592 14.5015 214.042 13.9487 cv
211.78 13.9487 li
211.78 13.4946 li
214.61 13.4946 li
214.61 13.9487 li
cp
f
238.309 15.8735 mo
236.51 15.8735 li
236.51 17.7603 li
235.933 17.7603 li
235.933 13.4946 li
238.607 13.4946 li
238.607 13.9487 li
236.51 13.9487 li
236.51 15.4194 li
238.309 15.4194 li
238.309 15.8735 li
cp
f
241.127 14.5933 mo
241.127 14.3882 241.063 14.2192 240.936 14.0864 cv
240.807 13.9536 240.648 13.8872 240.459 13.8872 cv
240.25 13.8872 240.078 13.9512 239.943 14.0791 cv
239.809 14.207 239.741 14.3784 239.741 14.5933 cv
239.741 14.8101 239.81 14.9858 239.946 15.1206 cv
240.083 15.2554 240.256 15.3228 240.465 15.3228 cv
240.654 15.3228 240.813 15.2554 240.938 15.1206 cv
241.064 14.9858 241.127 14.8101 241.127 14.5933 cv
cp
241.247 16.5767 mo
241.247 16.3442 241.172 16.1528 241.02 16.0024 cv
240.869 15.8521 240.682 15.7769 240.459 15.7769 cv
240.217 15.7769 240.017 15.8521 239.858 16.0024 cv
239.7 16.1528 239.621 16.3442 239.621 16.5767 cv
239.621 16.8169 239.699 17.0093 239.857 17.1538 cv
240.014 17.2983 240.217 17.3706 240.465 17.3706 cv
240.688 17.3706 240.873 17.2979 241.023 17.1523 cv
241.172 17.0068 241.247 16.8149 241.247 16.5767 cv
cp
241.704 14.5845 mo
241.704 14.8071 241.642 15.0029 241.517 15.1719 cv
241.392 15.3408 241.226 15.4673 241.019 15.5513 cv
241.261 15.6353 241.455 15.769 241.602 15.9526 cv
241.748 16.1362 241.821 16.3481 241.821 16.5884 cv
241.821 16.981 241.693 17.2847 241.439 17.4995 cv
241.184 17.7144 240.859 17.8218 240.465 17.8218 cv
240.047 17.8218 239.705 17.7144 239.441 17.4995 cv
239.176 17.2847 239.044 16.981 239.044 16.5884 cv
239.044 16.3481 239.119 16.1362 239.268 15.9526 cv
239.418 15.769 239.619 15.6343 239.873 15.5483 cv
239.654 15.4663 239.481 15.3408 239.354 15.1719 cv
239.228 15.0029 239.164 14.8071 239.164 14.5845 cv
239.164 14.2114 239.283 13.9263 239.523 13.729 cv
239.762 13.5317 240.074 13.4331 240.459 13.4331 cv
240.822 13.4331 241.121 13.5322 241.354 13.7305 cv
241.588 13.9287 241.704 14.2134 241.704 14.5845 cv
cp
f
265.76 15.8735 mo
263.961 15.8735 li
263.961 17.7603 li
263.383 17.7603 li
263.383 13.4946 li
266.059 13.4946 li
266.059 13.9487 li
263.961 13.9487 li
263.961 15.4194 li
265.76 15.4194 li
265.76 15.8735 li
cp
f
267.783 15.8765 mo
267.984 15.8765 268.154 15.8306 268.292 15.7388 cv
268.43 15.647 268.529 15.5298 268.592 15.3872 cv
268.592 14.8833 li
268.592 14.5649 268.521 14.3193 268.379 14.1465 cv
268.236 13.9736 268.035 13.8872 267.777 13.8872 cv
267.568 13.8872 267.395 13.9805 267.255 14.167 cv
267.115 14.3535 267.045 14.5962 267.045 14.895 cv
267.045 15.188 267.109 15.4248 267.238 15.6055 cv
267.367 15.7861 267.549 15.8765 267.783 15.8765 cv
cp
267.664 17.3706 mo
267.941 17.3706 268.165 17.2749 268.336 17.0835 cv
268.507 16.8921 268.592 16.6206 268.592 16.269 cv
268.592 15.9058 li
268.498 16.0444 268.382 16.1494 268.242 16.2207 cv
268.103 16.292 267.949 16.3276 267.783 16.3276 cv
267.373 16.3276 267.052 16.2012 266.818 15.9482 cv
266.585 15.6953 266.469 15.3442 266.469 14.895 cv
266.469 14.4653 266.592 14.1143 266.84 13.8418 cv
267.088 13.5693 267.395 13.4331 267.76 13.4331 cv
268.186 13.4331 268.527 13.5669 268.785 13.8345 cv
269.043 14.1021 269.172 14.48 269.172 14.9683 cv
269.172 16.2632 li
269.172 16.7534 269.031 17.1357 268.75 17.4102 cv
268.469 17.6846 268.107 17.8218 267.664 17.8218 cv
267.514 17.8218 267.359 17.8062 267.202 17.7749 cv
267.045 17.7437 266.898 17.6978 266.762 17.6372 cv
266.85 17.1978 li
266.979 17.2603 267.104 17.3047 267.229 17.3311 cv
267.353 17.3574 267.498 17.3706 267.664 17.3706 cv
cp
f
291.521 15.8735 mo
289.723 15.8735 li
289.723 17.7603 li
289.145 17.7603 li
289.145 13.4946 li
291.82 13.4946 li
291.82 13.9487 li
289.723 13.9487 li
289.723 15.4194 li
291.521 15.4194 li
291.521 15.8735 li
cp
f
294.037 17.7603 mo
293.457 17.7603 li
293.457 14.0278 li
292.529 14.0366 li
292.529 13.5913 li
294.037 13.4331 li
294.037 17.7603 li
cp
f
297.805 14.8804 mo
297.805 14.5737 297.736 14.3315 297.6 14.1538 cv
297.463 13.9761 297.27 13.8872 297.02 13.8872 cv
296.771 13.8872 296.58 13.9761 296.445 14.1538 cv
296.311 14.3315 296.244 14.5737 296.244 14.8804 cv
296.244 16.3716 li
296.244 16.6782 296.313 16.9214 296.45 17.1011 cv
296.588 17.2808 296.779 17.3706 297.025 17.3706 cv
297.275 17.3706 297.469 17.2813 297.604 17.1025 cv
297.738 16.9238 297.805 16.6802 297.805 16.3716 cv
297.805 14.8804 li
cp
298.383 16.2544 mo
298.383 16.7368 298.26 17.1187 298.015 17.3999 cv
297.77 17.6812 297.439 17.8218 297.025 17.8218 cv
296.613 17.8218 296.284 17.6812 296.037 17.3999 cv
295.79 17.1187 295.666 16.7368 295.666 16.2544 cv
295.666 15.0005 li
295.666 14.522 295.789 14.1411 296.034 13.8579 cv
296.279 13.5747 296.607 13.4331 297.02 13.4331 cv
297.434 13.4331 297.765 13.5747 298.012 13.8579 cv
298.259 14.1411 298.383 14.522 298.383 15.0005 cv
298.383 16.2544 li
cp
f
318.973 15.8735 mo
317.174 15.8735 li
317.174 17.7603 li
316.596 17.7603 li
316.596 13.4946 li
319.271 13.4946 li
319.271 13.9487 li
317.174 13.9487 li
317.174 15.4194 li
318.973 15.4194 li
318.973 15.8735 li
cp
f
321.488 17.7603 mo
320.908 17.7603 li
320.908 14.0278 li
319.98 14.0366 li
319.98 13.5913 li
321.488 13.4331 li
321.488 17.7603 li
cp
f
324.867 17.7603 mo
324.287 17.7603 li
324.287 14.0278 li
323.357 14.0366 li
323.357 13.5913 li
324.867 13.4331 li
324.867 17.7603 li
cp
f
346.425 15.8735 mo
344.626 15.8735 li
344.626 17.7603 li
344.049 17.7603 li
344.049 13.4946 li
346.724 13.4946 li
346.724 13.9487 li
344.626 13.9487 li
344.626 15.4194 li
346.425 15.4194 li
346.425 15.8735 li
cp
f
348.941 17.7603 mo
348.361 17.7603 li
348.361 14.0278 li
347.433 14.0366 li
347.433 13.5913 li
348.941 13.4331 li
348.941 17.7603 li
cp
f
353.327 17.7603 mo
350.679 17.7603 li
350.679 17.3647 li
352.018 15.7681 li
352.256 15.479 352.418 15.249 352.502 15.0781 cv
352.588 14.9072 352.63 14.7349 352.63 14.561 cv
352.63 14.3638 352.572 14.2021 352.457 14.0762 cv
352.342 13.9502 352.183 13.8872 351.979 13.8872 cv
351.728 13.8872 351.535 13.9644 351.404 14.1187 cv
351.271 14.2729 351.206 14.4653 351.206 14.6958 cv
350.649 14.6958 li
350.644 14.6782 li
350.634 14.3306 350.75 14.0361 350.992 13.7949 cv
351.234 13.5537 351.563 13.4331 351.979 13.4331 cv
352.36 13.4331 352.66 13.5386 352.879 13.7495 cv
353.098 13.9604 353.207 14.2329 353.207 14.5669 cv
353.207 14.7915 353.145 15.0112 353.021 15.2261 cv
352.896 15.4409 352.708 15.7104 352.454 16.0347 cv
351.379 17.2944 li
351.385 17.3091 li
353.327 17.3091 li
353.327 17.7603 li
cp
f
374.538 13.8301 mo
374.538 13.8276 li
372.733 14 li
372.733 16.9644 li
374.538 17.1367 li
374.538 17.1343 li
376.174 17.9448 li
376.174 13.0195 li
374.538 13.8301 li
cp
f
377.102 18.4341 mo
376.914 18.1089 li
377.85 17.5674 378.432 16.5605 378.432 15.4819 cv
378.432 14.4033 377.85 13.397 376.914 12.8555 cv
377.102 12.5303 li
378.153 13.1387 378.807 14.27 378.807 15.4819 cv
378.807 16.6943 378.153 17.8257 377.102 18.4341 cv
cp
f
377.879 19.0347 mo
377.645 18.6782 li
378.643 18.022 379.263 16.7974 379.263 15.4819 cv
379.263 14.167 378.643 12.9424 377.645 12.2861 cv
377.879 11.9297 li
378.995 12.6641 379.688 14.0254 379.688 15.4819 cv
379.688 16.939 378.995 18.3003 377.879 19.0347 cv
cp
f
20.4434 41.6577 mo
20.5527 41.6577 20.6333 41.6758 20.6855 41.7119 cv
20.7373 41.748 20.7832 41.8008 20.8232 41.8696 cv
21.3955 42.8418 li
20.8315 42.8418 li
20.7568 42.8418 20.6963 42.832 20.6494 42.812 cv
20.6025 42.792 20.5557 42.7554 20.5073 42.7017 cv
19.5195 41.6577 li
20.4434 41.6577 li
cp
f
20.415 34.3818 mo
20.5645 34.3818 20.6802 34.3335 20.7632 34.2378 cv
20.8457 34.1416 20.8872 34.0068 20.8872 33.8335 cv
21.6831 33.8335 li
21.6831 34.0391 21.6558 34.2251 21.6011 34.3916 cv
21.5464 34.5581 21.4678 34.7012 21.3652 34.8198 cv
21.2622 34.9385 21.1362 35.0298 20.9868 35.0938 cv
20.8379 35.1577 20.667 35.1895 20.4751 35.1895 cv
20.3335 35.1895 20.1982 35.1709 20.0688 35.1338 cv
19.9395 35.0962 19.8169 35.0557 19.7012 35.0117 cv
19.585 34.9678 19.4766 34.9272 19.375 34.8896 cv
19.2739 34.8525 19.1802 34.8335 19.0952 34.8335 cv
18.9458 34.8335 18.8296 34.8818 18.7471 34.9775 cv
18.6646 35.0737 18.623 35.2085 18.623 35.3818 cv
17.8271 35.3818 li
17.8271 35.1763 17.8545 34.9902 17.9092 34.8237 cv
17.9639 34.6572 18.0425 34.5142 18.145 34.3955 cv
18.2476 34.2769 18.3735 34.1855 18.5229 34.1216 cv
18.6724 34.0576 18.8433 34.0254 19.0352 34.0254 cv
19.1763 34.0254 19.3115 34.0444 19.4409 34.0815 cv
19.5703 34.1191 19.6929 34.1597 19.8091 34.2036 cv
19.9253 34.2476 20.0337 34.2881 20.1353 34.3257 cv
20.2363 34.3628 20.3296 34.3818 20.415 34.3818 cv
cp
f
51.314 40.9092 mo
51.314 46.4819 li
50.5386 46.4819 li
50.5386 41.9565 li
49.6987 42.5479 li
49.6987 41.6685 li
50.7383 40.9092 li
51.314 40.9092 li
cp
f
79.082 45.9702 mo
79.082 44.1313 81.1611 43.3638 81.1611 42.2041 cv
81.1611 41.8525 80.9453 41.5488 80.5215 41.5488 cv
80.1299 41.5488 79.8818 41.8125 79.8657 42.3242 cv
79.1221 42.3242 li
79.1704 41.3726 79.6899 40.8208 80.5137 40.8208 cv
81.4409 40.8208 81.9287 41.4766 81.9287 42.1802 cv
81.9287 43.6914 79.8818 44.5391 79.8818 45.7861 cv
81.9688 45.7861 li
81.9688 46.5059 li
79.082 46.5059 li
79.082 45.9702 li
cp
f
112.725 44.563 mo
112.725 44.9307 li
112.725 46.0181 112.229 46.5938 111.27 46.5938 cv
110.391 46.5938 109.831 46.042 109.807 44.9946 cv
110.575 44.9946 li
110.606 45.6182 110.854 45.8423 111.254 45.8423 cv
111.734 45.8423 111.95 45.5625 111.95 44.9229 cv
111.95 44.5791 li
111.95 43.9634 111.662 43.7476 111.174 43.7476 cv
110.663 43.7476 li
110.663 43.2036 li
111.646 41.6123 li
109.999 41.6123 li
109.999 40.9009 li
112.589 40.9009 li
112.589 41.4287 li
111.518 43.1318 li
112.317 43.1719 112.725 43.7793 112.725 44.563 cv
cp
f
144.167 45.1147 mo
143.543 45.1147 li
143.543 46.5059 li
142.784 46.5059 li
142.784 45.1147 li
140.801 45.1147 li
140.801 44.6987 li
141.96 40.9092 li
142.736 40.9092 li
141.657 44.4028 li
142.792 44.4028 li
142.872 42.436 li
143.543 42.436 li
143.543 44.4028 li
144.167 44.4028 li
144.167 45.1147 li
cp
f
173.505 44.2988 mo
173.505 44.8667 li
173.505 46.0181 172.978 46.5938 172.122 46.5938 cv
171.274 46.5938 170.747 46.0342 170.715 45.0825 cv
171.498 45.0825 li
171.522 45.6182 171.73 45.8423 172.122 45.8423 cv
172.506 45.8423 172.722 45.6025 172.722 44.875 cv
172.722 44.291 li
172.722 43.6836 172.538 43.4434 172.138 43.4434 cv
171.81 43.4434 171.602 43.6196 171.522 43.9795 cv
170.763 43.9795 li
170.763 40.9092 li
173.329 40.9092 li
173.329 41.6045 li
171.538 41.6045 li
171.538 42.9316 li
171.722 42.7959 171.962 42.708 172.242 42.708 cv
172.993 42.708 173.505 43.2754 173.505 44.2988 cv
cp
f
203.096 44.2749 mo
203.096 43.8193 202.816 43.5557 202.432 43.5557 cv
202.064 43.5557 201.801 43.8193 201.801 44.2832 cv
201.801 45.1147 li
201.801 45.5864 202.072 45.8423 202.448 45.8423 cv
202.824 45.8423 203.096 45.5864 203.096 45.1147 cv
203.096 44.2749 li
cp
203.879 44.2354 mo
203.879 45.1226 li
203.879 46.0181 203.271 46.5938 202.448 46.5938 cv
201.625 46.5938 201.017 46.0181 201.017 45.1226 cv
201.017 42.2764 li
201.017 41.3887 201.608 40.8208 202.44 40.8208 cv
203.24 40.8208 203.799 41.3809 203.848 42.252 cv
203.064 42.252 li
203.032 41.8203 202.792 41.5728 202.44 41.5728 cv
202.064 41.5728 201.801 41.8125 201.801 42.2603 cv
201.801 43.1157 li
201.984 42.9399 202.256 42.8359 202.56 42.8359 cv
203.296 42.8359 203.879 43.4033 203.879 44.2354 cv
cp
f
234.034 40.9009 mo
234.034 41.4365 li
232.523 46.5137 li
231.716 46.5137 li
233.154 41.6284 li
231.244 41.6284 li
231.244 40.9009 li
234.034 40.9009 li
cp
f
262.433 42.4521 mo
262.433 42.98 262.673 43.2598 263.08 43.2598 cv
263.488 43.2598 263.729 42.98 263.729 42.4521 cv
263.729 42.332 li
263.729 41.8286 263.488 41.5728 263.08 41.5728 cv
262.673 41.5728 262.433 41.8286 262.433 42.332 cv
262.433 42.4521 li
cp
263.816 44.8188 mo
263.816 44.2749 263.544 43.9873 263.08 43.9873 cv
262.617 43.9873 262.345 44.2749 262.345 44.8188 cv
262.345 45.0107 li
262.345 45.5542 262.617 45.834 263.08 45.834 cv
263.544 45.834 263.816 45.5542 263.816 45.0107 cv
263.816 44.8188 li
cp
264.584 44.8188 mo
264.584 45.0107 li
264.584 46.002 264 46.5938 263.08 46.5938 cv
262.161 46.5938 261.577 46.002 261.577 45.0107 cv
261.577 44.8188 li
261.577 44.2832 261.809 43.8271 262.193 43.5874 cv
261.873 43.3315 261.674 42.9077 261.674 42.436 cv
261.674 42.3081 li
261.674 41.3965 262.217 40.8208 263.08 40.8208 cv
263.943 40.8208 264.488 41.3965 264.488 42.3081 cv
264.488 42.436 li
264.488 42.9077 264.287 43.3237 263.96 43.5874 cv
264.352 43.8271 264.584 44.2832 264.584 44.8188 cv
cp
f
294.019 43.1318 mo
294.019 42.3003 li
294.019 41.8286 293.747 41.5728 293.371 41.5728 cv
292.995 41.5728 292.724 41.8286 292.724 42.3003 cv
292.724 43.1396 li
292.724 43.5957 293.004 43.8594 293.387 43.8594 cv
293.755 43.8594 294.019 43.5957 294.019 43.1318 cv
cp
294.803 42.292 mo
294.803 45.1387 li
294.803 46.0264 294.211 46.5938 293.379 46.5938 cv
292.58 46.5938 292.02 46.0342 291.972 45.1626 cv
292.756 45.1626 li
292.787 45.5942 293.027 45.8423 293.379 45.8423 cv
293.755 45.8423 294.019 45.6025 294.019 45.1548 cv
294.019 44.2988 li
293.835 44.4751 293.563 44.5791 293.26 44.5791 cv
292.523 44.5791 291.939 44.0112 291.939 43.1797 cv
291.939 42.292 li
291.939 41.3965 292.547 40.8208 293.371 40.8208 cv
294.195 40.8208 294.803 41.3965 294.803 42.292 cv
cp
f
325.011 45.0186 mo
325.011 42.4121 li
325.011 41.8604 324.746 41.5566 324.275 41.5566 cv
323.811 41.5566 323.547 41.8604 323.547 42.4121 cv
323.547 45.0186 li
323.547 45.5542 323.811 45.8584 324.275 45.8584 cv
324.746 45.8584 325.011 45.5542 325.011 45.0186 cv
cp
322.796 45.0186 mo
322.796 42.4121 li
322.796 41.4365 323.371 40.8291 324.275 40.8291 cv
325.194 40.8291 325.762 41.4365 325.762 42.4121 cv
325.762 45.0186 li
325.762 45.9863 325.194 46.5859 324.275 46.5859 cv
323.371 46.5859 322.796 45.9863 322.796 45.0186 cv
cp
f
382.949 44.4429 mo
385.939 44.4429 li
385.939 45.1465 li
382.949 45.1465 li
382.949 44.4429 li
cp
382.949 42.9956 mo
385.939 42.9956 li
385.939 43.7075 li
382.949 43.7075 li
382.949 42.9956 li
cp
f
355.506 42.5776 mo
355.506 43.3213 li
352.708 43.3213 li
352.708 42.5776 li
355.506 42.5776 li
cp
f
50.2983 31.377 mo
51.0742 31.377 li
51.0742 35.6382 li
50.2983 35.6382 li
50.2983 31.377 li
cp
50.2026 36.5737 mo
50.2026 36.2861 50.3945 36.0942 50.6904 36.0942 cv
50.978 36.0942 51.1699 36.2861 51.1699 36.5737 cv
51.1699 36.8696 50.978 37.0615 50.6904 37.0615 cv
50.3945 37.0615 50.2026 36.8696 50.2026 36.5737 cv
cp
f
81.5112 34.9346 mo
81.5112 34.0791 li
81.5112 33.7432 81.3354 33.4556 80.9834 33.4556 cv
80.6958 33.4556 80.5117 33.6396 80.5117 34.0474 cv
80.5117 34.959 li
80.5117 35.3745 80.688 35.5664 80.9917 35.5664 cv
81.2954 35.5664 81.5112 35.3584 81.5112 34.9346 cv
cp
83.8462 33.7754 mo
83.8462 34.6387 li
83.8462 35.7104 83.2144 36.1499 82.5825 36.1499 cv
82.1431 36.1499 81.8872 35.9424 81.7593 35.6782 cv
81.6152 35.958 81.3516 36.1899 80.8955 36.1899 cv
80.2798 36.1899 79.856 35.7661 79.856 34.9746 cv
79.856 34.0635 li
79.856 33.2314 80.2881 32.8398 80.8638 32.8398 cv
81.2153 32.8398 81.4473 32.9839 81.5991 33.2397 cv
81.6553 32.936 li
82.1509 32.936 li
82.1509 34.9985 li
82.1509 35.3267 82.2388 35.5342 82.5825 35.5425 cv
82.9907 35.5425 83.2144 35.2305 83.2144 34.6387 cv
83.2144 33.7754 li
83.2144 32.4321 82.4546 31.7524 81.0957 31.7524 cv
79.6563 31.7524 78.8486 32.5283 78.8486 33.9111 cv
78.8486 34.8789 li
78.8486 36.4058 79.6724 37.2534 81.1274 37.2534 cv
81.8311 37.2534 82.375 37.0938 82.7666 36.8535 cv
83.0864 37.3496 li
82.6626 37.6455 82.063 37.8691 81.1597 37.8691 cv
79.2964 37.8691 78.209 36.7739 78.209 34.8789 cv
78.209 33.9111 li
78.209 32.1523 79.2886 31.1367 81.0957 31.1367 cv
82.8384 31.1367 83.8462 32.0723 83.8462 33.7754 cv
cp
f
67.9004 67.4834 mo
67.9004 67.0874 67.8467 66.7319 67.7383 66.417 cv
67.6304 66.1021 67.4775 65.8359 67.2793 65.6182 cv
67.0815 65.4009 66.8413 65.2334 66.5596 65.1167 cv
66.2773 64.9995 65.9624 64.9409 65.6143 64.9409 cv
65.2695 64.9409 64.9561 64.9995 64.6738 65.1167 cv
64.3921 65.2334 64.1514 65.4009 63.9517 65.6182 cv
63.752 65.8359 63.5986 66.1021 63.4902 66.417 cv
63.3823 66.7319 63.3286 67.0874 63.3286 67.4834 cv
63.3286 67.8794 63.3823 68.2344 63.4902 68.5479 cv
63.5986 68.8613 63.752 69.127 63.9517 69.3442 cv
64.1514 69.562 64.3921 69.7285 64.6738 69.8438 cv
64.9561 69.9595 65.2695 70.0171 65.6143 70.0171 cv
65.9624 70.0171 66.2773 69.9595 66.5596 69.8438 cv
66.8413 69.7285 67.0815 69.562 67.2793 69.3442 cv
67.4775 69.127 67.6304 68.8613 67.7383 68.5479 cv
67.8467 68.2344 67.9004 67.8794 67.9004 67.4834 cv
cp
68.7959 67.4834 mo
68.7959 67.7866 68.7651 68.0747 68.7036 68.3477 cv
68.6421 68.6206 68.5527 68.875 68.436 69.1104 cv
68.3188 69.3457 68.1763 69.5596 68.0083 69.7515 cv
67.8403 69.9434 67.6514 70.1099 67.4414 70.251 cv
69.0977 72.0376 li
68.3774 72.0376 li
68.2695 72.0376 68.1733 72.0225 68.0894 71.9927 cv
68.0054 71.9624 67.9287 71.9102 67.8599 71.835 cv
66.7261 70.6021 li
66.5552 70.6563 66.377 70.6982 66.1929 70.728 cv
66.0083 70.7578 65.8154 70.7729 65.6143 70.7729 cv
65.1406 70.7729 64.7085 70.6929 64.3184 70.5322 cv
63.9282 70.3721 63.5938 70.146 63.3149 69.855 cv
63.0361 69.564 62.8198 69.2168 62.667 68.8135 cv
62.5142 68.4097 62.4375 67.9668 62.4375 67.4834 cv
62.4375 67.0005 62.5142 66.5571 62.667 66.1538 cv
62.8198 65.7505 63.0361 65.4023 63.3149 65.1099 cv
63.5938 64.8174 63.9282 64.5898 64.3184 64.4282 cv
64.7085 64.2661 65.1406 64.1851 65.6143 64.1851 cv
66.0884 64.1851 66.521 64.2661 66.9126 64.4282 cv
67.3042 64.5898 67.6396 64.8174 67.9185 65.1099 cv
68.1973 65.4023 68.4136 65.7505 68.5664 66.1538 cv
68.7192 66.5571 68.7959 67.0005 68.7959 67.4834 cv
cp
f
72.8818 98.1621 mo
75.2896 98.1621 li
74.2769 95.5391 li
74.2109 95.377 74.1465 95.1738 74.0835 94.9316 cv
74.0503 95.0547 74.0181 95.168 73.9868 95.2715 cv
73.9551 95.375 73.9243 95.4648 73.8945 95.543 cv
72.8818 98.1621 li
cp
77.1074 100.557 mo
76.4326 100.557 li
76.3545 100.557 76.2915 100.537 76.2437 100.498 cv
76.1953 100.459 76.1597 100.408 76.1357 100.35 cv
75.5327 98.791 li
72.6392 98.791 li
72.0361 100.35 li
72.0151 100.402 71.979 100.451 71.9282 100.492 cv
71.877 100.535 71.814 100.557 71.7393 100.557 cv
71.064 100.557 li
73.6426 94.1074 li
74.5288 94.1074 li
77.1074 100.557 li
cp
f
91.605 123.652 mo
91.605 123.977 li
91.605 124.078 91.5737 124.176 91.5107 124.266 cv
87.8608 129.391 li
91.542 129.391 li
91.542 130.102 li
86.7183 130.102 li
86.7183 129.76 li
86.7183 129.67 86.7466 129.584 86.8037 129.502 cv
90.4575 124.363 li
86.8892 124.363 li
86.8892 123.652 li
91.605 123.652 li
cp
f
118.978 126.789 mo
116.849 123.652 li
117.718 123.652 li
117.781 123.652 117.827 123.664 117.857 123.684 cv
117.887 123.705 117.914 123.736 117.938 123.773 cv
119.621 126.357 li
119.642 126.295 119.674 126.225 119.716 126.15 cv
121.304 123.793 li
121.331 123.75 121.36 123.717 121.392 123.691 cv
121.423 123.666 121.462 123.652 121.507 123.652 cv
122.339 123.652 li
120.202 126.748 li
122.411 130.102 li
121.547 130.102 li
121.481 130.102 121.43 130.084 121.392 130.049 cv
121.354 130.016 121.324 129.977 121.3 129.936 cv
119.572 127.23 li
119.551 127.293 119.524 127.354 119.491 127.41 cv
117.808 129.936 li
117.781 129.977 117.75 130.016 117.715 130.049 cv
117.681 130.084 117.632 130.102 117.569 130.102 cv
116.759 130.102 li
118.978 126.789 li
cp
f
152.287 128.77 mo
152.334 128.77 152.378 128.789 152.417 128.828 cv
152.759 129.201 li
152.495 129.508 152.175 129.746 151.798 129.916 cv
151.422 130.088 150.968 130.174 150.437 130.174 cv
149.972 130.174 149.55 130.094 149.172 129.932 cv
148.794 129.771 148.472 129.547 148.205 129.258 cv
147.938 128.969 147.731 128.621 147.584 128.215 cv
147.437 127.811 147.363 127.365 147.363 126.879 cv
147.363 126.393 147.442 125.947 147.6 125.543 cv
147.757 125.139 147.979 124.789 148.264 124.498 cv
148.548 124.207 148.89 123.982 149.287 123.822 cv
149.685 123.66 150.124 123.58 150.604 123.58 cv
151.078 123.58 151.486 123.654 151.83 123.801 cv
152.173 123.949 152.479 124.148 152.746 124.4 cv
152.462 124.801 li
152.441 124.83 152.417 124.855 152.39 124.875 cv
152.363 124.895 152.324 124.904 152.273 124.904 cv
152.234 124.904 152.193 124.889 152.149 124.861 cv
152.106 124.832 152.054 124.797 151.994 124.756 cv
151.934 124.713 151.863 124.668 151.783 124.621 cv
151.702 124.572 151.605 124.527 151.495 124.484 cv
151.383 124.443 151.254 124.408 151.107 124.379 cv
150.96 124.352 150.791 124.336 150.599 124.336 cv
150.254 124.336 149.938 124.396 149.652 124.514 cv
149.365 124.633 149.119 124.803 148.912 125.021 cv
148.705 125.24 148.543 125.506 148.428 125.822 cv
148.312 126.137 148.254 126.49 148.254 126.879 cv
148.254 127.281 148.312 127.641 148.428 127.955 cv
148.543 128.27 148.701 128.535 148.9 128.754 cv
149.1 128.971 149.336 129.137 149.609 129.25 cv
149.882 129.365 150.176 129.422 150.491 129.422 cv
150.683 129.422 150.855 129.41 151.008 129.389 cv
151.162 129.365 151.303 129.33 151.434 129.283 cv
151.564 129.234 151.686 129.174 151.798 129.1 cv
151.911 129.027 152.024 128.939 152.138 128.836 cv
152.189 128.791 152.238 128.77 152.287 128.77 cv
cp
f
177.468 123.652 mo
178.166 123.652 li
178.244 123.652 178.307 123.672 178.354 123.711 cv
178.402 123.75 178.438 123.801 178.462 123.859 cv
180.285 128.41 li
180.327 128.512 180.365 128.623 180.4 128.742 cv
180.435 128.863 180.468 128.986 180.501 129.115 cv
180.528 128.986 180.558 128.863 180.589 128.742 cv
180.621 128.623 180.657 128.512 180.699 128.41 cv
182.513 123.859 li
182.534 123.809 182.57 123.762 182.621 123.719 cv
182.671 123.674 182.734 123.652 182.81 123.652 cv
183.512 123.652 li
180.884 130.102 li
180.096 130.102 li
177.468 123.652 li
cp
f
209.688 127.162 mo
209.688 129.408 li
211.083 129.408 li
211.332 129.408 211.545 129.379 211.724 129.322 cv
211.902 129.266 212.049 129.186 212.165 129.082 cv
212.28 128.979 212.365 128.855 212.419 128.713 cv
212.473 128.57 212.5 128.414 212.5 128.242 cv
212.5 127.91 212.382 127.646 212.147 127.453 cv
211.912 127.26 211.555 127.162 211.078 127.162 cv
209.688 127.162 li
cp
209.688 126.541 mo
210.84 126.541 li
211.085 126.541 211.299 126.516 211.479 126.461 cv
211.659 126.406 211.808 126.332 211.926 126.236 cv
212.045 126.141 212.133 126.023 212.19 125.887 cv
212.247 125.75 212.275 125.602 212.275 125.439 cv
212.275 125.061 212.161 124.783 211.933 124.607 cv
211.705 124.43 211.351 124.342 210.871 124.342 cv
209.688 124.342 li
209.688 126.541 li
cp
208.815 130.102 mo
208.815 123.652 li
210.871 123.652 li
211.267 123.652 211.608 123.691 211.895 123.77 cv
212.182 123.848 212.417 123.959 212.602 124.104 cv
212.786 124.246 212.922 124.424 213.011 124.631 cv
213.1 124.84 213.144 125.074 213.144 125.336 cv
213.144 125.494 213.119 125.648 213.069 125.795 cv
213.02 125.941 212.945 126.078 212.845 126.205 cv
212.744 126.33 212.618 126.443 212.466 126.541 cv
212.315 126.641 212.137 126.723 211.933 126.785 cv
212.404 126.877 212.76 127.047 213 127.293 cv
213.24 127.539 213.36 127.863 213.36 128.266 cv
213.36 128.539 213.31 128.787 213.209 129.012 cv
213.108 129.238 212.961 129.432 212.768 129.594 cv
212.575 129.754 212.337 129.881 212.057 129.969 cv
211.776 130.057 211.456 130.102 211.096 130.102 cv
208.815 130.102 li
cp
f
239.398 123.682 mo
239.437 123.701 239.479 123.742 239.527 123.801 cv
243.262 128.662 li
243.253 128.584 243.247 128.508 243.244 128.434 cv
243.241 128.361 243.239 128.289 243.239 128.221 cv
243.239 123.652 li
244.005 123.652 li
244.005 130.102 li
243.563 130.102 li
243.494 130.102 243.437 130.09 243.391 130.064 cv
243.344 130.041 243.298 130 243.253 129.943 cv
239.522 125.088 li
239.528 125.164 239.533 125.236 239.536 125.309 cv
239.539 125.381 239.54 125.447 239.54 125.506 cv
239.54 130.102 li
238.775 130.102 li
238.775 123.652 li
239.226 123.652 li
239.304 123.652 239.361 123.662 239.398 123.682 cv
cp
f
271.771 127.996 mo
271.803 128.074 271.833 128.156 271.863 128.236 cv
271.894 128.152 271.925 128.072 271.958 127.996 cv
271.991 127.92 272.028 127.842 272.07 127.764 cv
274.253 123.799 li
274.292 123.73 274.332 123.688 274.374 123.674 cv
274.416 123.658 274.477 123.65 274.555 123.65 cv
275.198 123.65 li
275.198 130.1 li
274.433 130.1 li
274.433 125.361 li
274.433 125.299 274.435 125.23 274.438 125.158 cv
274.44 125.086 274.444 125.014 274.451 124.938 cv
272.241 128.971 li
272.166 129.105 272.062 129.172 271.927 129.172 cv
271.801 129.172 li
271.665 129.172 271.561 129.105 271.485 128.971 cv
269.227 124.924 li
269.235 125.002 269.242 125.078 269.246 125.154 cv
269.251 125.229 269.253 125.299 269.253 125.361 cv
269.253 130.1 li
268.488 130.1 li
268.488 123.65 li
269.132 123.65 li
269.21 123.65 269.27 123.658 269.312 123.674 cv
269.354 123.688 269.395 123.73 269.434 123.799 cv
271.661 127.768 li
271.703 127.84 271.739 127.916 271.771 127.996 cv
cp
f
105.396 95.1152 mo
105.37 95.1602 105.341 95.1934 105.311 95.2168 cv
105.281 95.2383 105.242 95.25 105.194 95.25 cv
105.143 95.25 105.084 95.2246 105.016 95.1738 cv
104.949 95.123 104.863 95.0664 104.76 95.0059 cv
104.656 94.9434 104.532 94.8867 104.386 94.8359 cv
104.241 94.7852 104.064 94.7598 103.857 94.7598 cv
103.663 94.7598 103.49 94.7871 103.34 94.8379 cv
103.19 94.8906 103.065 94.9629 102.964 95.0527 cv
102.864 95.1426 102.788 95.248 102.737 95.3691 cv
102.686 95.4902 102.661 95.623 102.661 95.7637 cv
102.661 95.9434 102.705 96.0918 102.793 96.2109 cv
102.882 96.3301 102.999 96.4316 103.145 96.5156 cv
103.29 96.5996 103.455 96.6719 103.639 96.7324 cv
103.824 96.7949 104.013 96.8594 104.206 96.9238 cv
104.4 96.9902 104.589 97.0645 104.773 97.1465 cv
104.958 97.2305 105.123 97.334 105.268 97.459 cv
105.414 97.5859 105.531 97.7402 105.619 97.9238 cv
105.708 98.1055 105.752 98.332 105.752 98.5977 cv
105.752 98.8809 105.704 99.1445 105.608 99.3926 cv
105.512 99.6406 105.372 99.8555 105.188 100.039 cv
105.003 100.221 104.776 100.365 104.508 100.471 cv
104.239 100.576 103.934 100.627 103.592 100.627 cv
103.175 100.627 102.795 100.553 102.451 100.4 cv
102.108 100.25 101.814 100.045 101.572 99.7871 cv
101.824 99.373 li
101.848 99.3398 101.877 99.3125 101.911 99.2891 cv
101.946 99.2676 101.984 99.2559 102.026 99.2559 cv
102.089 99.2559 102.161 99.2891 102.242 99.3574 cv
102.323 99.4238 102.424 99.498 102.546 99.5801 cv
102.667 99.6602 102.814 99.7344 102.987 99.8027 cv
103.159 99.8691 103.37 99.9043 103.619 99.9043 cv
103.826 99.9043 104.011 99.875 104.172 99.8184 cv
104.334 99.7617 104.472 99.6797 104.584 99.5781 cv
104.697 99.4746 104.783 99.3496 104.843 99.2051 cv
104.903 99.0625 104.933 98.9023 104.933 98.7246 cv
104.933 98.5293 104.889 98.3691 104.8 98.2461 cv
104.712 98.1211 104.596 98.0156 104.452 97.9316 cv
104.308 97.8477 104.143 97.7773 103.959 97.7188 cv
103.774 97.6602 103.585 97.5996 103.392 97.5391 cv
103.198 97.4766 103.009 97.4063 102.825 97.3242 cv
102.64 97.2441 102.476 97.1387 102.332 97.0098 cv
102.188 96.8809 102.072 96.7188 101.983 96.5254 cv
101.895 96.332 101.851 96.0938 101.851 95.8086 cv
101.851 95.5801 101.895 95.3594 101.983 95.1465 cv
102.072 94.9336 102.2 94.7441 102.368 94.5801 cv
102.536 94.4141 102.744 94.2832 102.991 94.1836 cv
103.239 94.084 103.523 94.0352 103.844 94.0352 cv
104.204 94.0352 104.533 94.0918 104.83 94.207 cv
105.126 94.3203 105.386 94.4863 105.608 94.7012 cv
105.396 95.1152 li
cp
f
134.905 97.334 mo
134.905 96.9375 134.851 96.584 134.743 96.2715 cv
134.635 95.959 134.482 95.6953 134.284 95.4805 cv
134.086 95.2637 133.846 95.0996 133.564 94.9844 cv
133.282 94.8711 132.969 94.8145 132.624 94.8145 cv
131.089 94.8145 li
131.089 99.8496 li
132.624 99.8496 li
132.969 99.8496 133.282 99.793 133.564 99.6777 cv
133.846 99.5645 134.086 99.4004 134.284 99.1855 cv
134.482 98.9707 134.635 98.707 134.743 98.3965 cv
134.851 98.084 134.905 97.7305 134.905 97.334 cv
cp
135.801 97.334 mo
135.801 97.8164 135.724 98.2559 135.571 98.6523 cv
135.418 99.0488 135.202 99.3867 134.923 99.6699 cv
134.644 99.9512 134.31 100.17 133.92 100.324 cv
133.53 100.479 133.098 100.557 132.624 100.557 cv
130.212 100.557 li
130.212 94.1074 li
132.624 94.1074 li
133.098 94.1074 133.53 94.1855 133.92 94.3398 cv
134.31 94.4941 134.644 94.7129 134.923 94.9961 cv
135.202 95.2793 135.418 95.6191 135.571 96.0156 cv
135.724 96.4121 135.801 96.8516 135.801 97.334 cv
cp
f
164.965 94.1074 mo
164.965 94.8184 li
161.869 94.8184 li
161.869 97.0723 li
164.515 97.0723 li
164.515 97.7832 li
161.869 97.7832 li
161.869 100.557 li
160.992 100.557 li
160.992 94.1074 li
164.965 94.1074 li
cp
f
192.847 99.9219 mo
193.021 99.9219 193.181 99.9141 193.326 99.8965 cv
193.472 99.8809 193.609 99.8555 193.738 99.8223 cv
193.867 99.7891 193.988 99.75 194.103 99.7031 cv
194.216 99.6563 194.331 99.6035 194.444 99.543 cv
194.444 98.1211 li
193.445 98.1211 li
193.389 98.1211 193.343 98.1055 193.308 98.0723 cv
193.274 98.0391 193.256 97.998 193.256 97.9512 cv
193.256 97.4551 li
195.236 97.4551 li
195.236 99.9297 li
195.075 100.047 194.906 100.15 194.73 100.236 cv
194.555 100.324 194.367 100.396 194.168 100.455 cv
193.968 100.514 193.754 100.557 193.526 100.586 cv
193.298 100.613 193.051 100.627 192.784 100.627 cv
192.316 100.627 191.887 100.547 191.497 100.387 cv
191.107 100.227 190.771 100.002 190.489 99.7129 cv
190.207 99.4219 189.987 99.0762 189.83 98.6699 cv
189.672 98.2656 189.593 97.8203 189.593 97.334 cv
189.593 96.8418 189.671 96.3926 189.825 95.9883 cv
189.979 95.584 190.2 95.2363 190.487 94.9473 cv
190.773 94.6563 191.12 94.4336 191.526 94.2734 cv
191.933 94.1152 192.388 94.0352 192.892 94.0352 cv
193.147 94.0352 193.384 94.0547 193.603 94.0918 cv
193.822 94.1289 194.025 94.1836 194.213 94.2539 cv
194.4 94.3242 194.573 94.4102 194.732 94.5098 cv
194.892 94.6113 195.04 94.7246 195.178 94.8496 cv
194.931 95.2461 li
194.879 95.3262 194.813 95.3672 194.732 95.3672 cv
194.685 95.3672 194.632 95.3516 194.575 95.3184 cv
194.5 95.2754 194.416 95.2246 194.323 95.1641 cv
194.23 95.1055 194.117 95.0469 193.983 94.9922 cv
193.85 94.9355 193.692 94.8887 193.511 94.8496 cv
193.329 94.8105 193.114 94.791 192.865 94.791 cv
192.502 94.791 192.173 94.8516 191.879 94.9688 cv
191.585 95.0879 191.335 95.2578 191.128 95.4785 cv
190.921 95.6973 190.762 95.9648 190.651 96.2793 cv
190.54 96.5918 190.484 96.9434 190.484 97.334 cv
190.484 97.7422 190.542 98.1055 190.658 98.4258 cv
190.773 98.7441 190.936 99.0156 191.146 99.2383 cv
191.356 99.459 191.605 99.6289 191.893 99.7461 cv
192.181 99.8633 192.499 99.9219 192.847 99.9219 cv
cp
f
224.836 100.557 mo
223.958 100.557 li
223.958 97.6211 li
220.485 97.6211 li
220.485 100.557 li
219.607 100.557 li
219.607 94.1074 li
220.485 94.1074 li
220.485 96.9824 li
223.958 96.9824 li
223.958 94.1074 li
224.836 94.1074 li
224.836 100.557 li
cp
f
253.173 98.3281 mo
253.173 98.6875 253.129 99.0117 253.04 99.2969 cv
252.952 99.5801 252.821 99.8223 252.648 100.018 cv
252.477 100.215 252.264 100.365 252.012 100.471 cv
251.76 100.576 251.471 100.627 251.144 100.627 cv
250.853 100.627 250.55 100.586 250.234 100.502 cv
250.24 100.414 250.248 100.328 250.257 100.242 cv
250.266 100.158 250.275 100.072 250.284 99.9883 cv
250.29 99.9375 250.309 99.8965 250.341 99.8652 cv
250.372 99.834 250.419 99.8184 250.482 99.8184 cv
250.536 99.8184 250.608 99.832 250.698 99.8594 cv
250.788 99.8848 250.908 99.8984 251.058 99.8984 cv
251.256 99.8984 251.433 99.8691 251.587 99.8086 cv
251.741 99.748 251.872 99.6563 251.979 99.5293 cv
252.085 99.4043 252.166 99.2422 252.222 99.0469 cv
252.276 98.8496 252.305 98.6172 252.305 98.3457 cv
252.305 94.1074 li
253.173 94.1074 li
253.173 98.3281 li
cp
f
280.375 96.9336 mo
280.703 96.9336 li
280.817 96.9336 280.908 96.9199 280.976 96.8906 cv
281.043 96.8613 281.106 96.8125 281.167 96.7441 cv
283.313 94.3145 li
283.379 94.2402 283.442 94.1855 283.504 94.1543 cv
283.565 94.123 283.645 94.1074 283.74 94.1074 cv
284.483 94.1074 li
282.026 96.8848 li
281.963 96.9531 281.903 97.0117 281.849 97.0586 cv
281.793 97.1074 281.733 97.1465 281.671 97.1758 cv
281.755 97.2031 281.828 97.2441 281.891 97.2988 cv
281.954 97.3516 282.02 97.4199 282.089 97.5 cv
284.654 100.557 li
283.898 100.557 li
283.841 100.557 283.793 100.551 283.754 100.543 cv
283.715 100.533 283.682 100.521 283.652 100.506 cv
283.624 100.492 283.598 100.473 283.574 100.447 cv
283.55 100.424 283.526 100.398 283.502 100.371 cv
281.274 97.8105 li
281.241 97.7754 281.211 97.7441 281.183 97.7188 cv
281.153 97.6934 281.121 97.6719 281.083 97.6543 cv
281.046 97.6348 281.002 97.623 280.953 97.6152 cv
280.903 97.6074 280.843 97.6035 280.771 97.6035 cv
280.375 97.6035 li
280.375 100.557 li
279.506 100.557 li
279.506 94.1074 li
280.375 94.1074 li
280.375 96.9336 li
cp
f
310.776 99.8223 mo
313.566 99.8223 li
313.566 100.557 li
309.903 100.557 li
309.903 94.1074 li
310.776 94.1074 li
310.776 99.8223 li
cp
f
91.3926 64.2573 mo
92.1172 64.2573 li
92.1948 64.2573 92.2598 64.2773 92.3105 64.3159 cv
92.3613 64.355 92.396 64.4048 92.4141 64.4644 cv
93.7461 68.9468 li
93.77 69.0273 93.792 69.1147 93.8115 69.2075 cv
93.8311 69.3008 93.8496 69.3979 93.8677 69.5 cv
93.8887 69.3979 93.9097 69.2998 93.9307 69.2051 cv
93.9517 69.1108 93.9756 69.0244 94.0024 68.9468 cv
95.519 64.4644 li
95.5371 64.4136 95.5723 64.3662 95.625 64.3228 cv
95.6772 64.2793 95.7412 64.2573 95.8159 64.2573 cv
96.0679 64.2573 li
96.146 64.2573 96.21 64.2773 96.2593 64.3159 cv
96.3091 64.355 96.3442 64.4048 96.3652 64.4644 cv
97.8726 68.9468 li
97.9268 69.1025 97.9746 69.2813 98.0166 69.4819 cv
98.0347 69.3828 98.0513 69.2886 98.0659 69.1987 cv
98.0811 69.1084 98.1006 69.0244 98.1245 68.9468 cv
99.4609 64.4644 li
99.4761 64.4106 99.5098 64.3628 99.5625 64.3203 cv
99.6147 64.2788 99.6787 64.2573 99.7534 64.2573 cv
100.433 64.2573 li
98.4214 70.7061 li
97.6387 70.7061 li
96.0049 65.7876 li
95.9722 65.6948 95.9419 65.5864 95.915 65.4634 cv
95.8999 65.5234 95.8857 65.5815 95.8726 65.6367 cv
95.8589 65.6924 95.8447 65.7427 95.8296 65.7876 cv
94.187 70.7061 li
93.4043 70.7061 li
91.3926 64.2573 li
cp
f
128.358 64.2573 mo
128.358 64.9688 li
125.263 64.9688 li
125.263 67.1104 li
127.769 67.1104 li
127.769 67.7944 li
125.263 67.7944 li
125.263 69.9951 li
128.358 69.9951 li
128.358 70.7061 li
124.385 70.7061 li
124.385 64.2573 li
128.358 64.2573 li
cp
f
155.079 67.3804 mo
155.992 67.3804 li
156.247 67.3804 156.471 67.3496 156.665 67.2881 cv
156.858 67.2271 157.02 67.1396 157.151 67.0273 cv
157.281 66.915 157.379 66.7808 157.445 66.6245 cv
157.511 66.4688 157.544 66.2959 157.544 66.1069 cv
157.544 65.7231 157.417 65.4336 157.164 65.2388 cv
156.911 65.0435 156.533 64.9463 156.032 64.9463 cv
155.079 64.9463 li
155.079 67.3804 li
cp
155.079 68.0151 mo
155.079 70.7061 li
154.21 70.7061 li
154.21 64.2573 li
156.032 64.2573 li
156.44 64.2573 156.793 64.2988 157.09 64.3813 cv
157.387 64.4639 157.632 64.583 157.826 64.7393 cv
158.019 64.895 158.163 65.0835 158.255 65.3037 cv
158.348 65.5244 158.395 65.771 158.395 66.0439 cv
158.395 66.272 158.359 66.4849 158.287 66.6831 cv
158.215 66.8809 158.111 67.0586 157.974 67.2163 cv
157.837 67.374 157.671 67.5083 157.475 67.6191 cv
157.278 67.73 157.055 67.814 156.807 67.8711 cv
156.915 67.9341 157.01 68.0254 157.094 68.1455 cv
158.976 70.7061 li
158.201 70.7061 li
158.042 70.7061 157.925 70.6445 157.851 70.5215 cv
156.176 68.2178 li
156.125 68.1455 156.07 68.0938 156.01 68.0625 cv
155.95 68.0308 155.86 68.0151 155.74 68.0151 cv
155.079 68.0151 li
cp
f
189.581 64.2573 mo
189.581 64.9912 li
187.498 64.9912 li
187.498 70.7061 li
186.625 70.7061 li
186.625 64.9912 li
184.532 64.9912 li
184.532 64.2573 li
189.581 64.2573 li
cp
f
217.379 68.1411 mo
217.379 70.7061 li
216.51 70.7061 li
216.51 68.1411 li
214.148 64.2573 li
214.913 64.2573 li
214.991 64.2573 215.052 64.2773 215.097 64.3159 cv
215.142 64.355 215.181 64.4033 215.214 64.46 cv
216.69 66.9668 li
216.75 67.0718 216.801 67.1704 216.841 67.2637 cv
216.881 67.3564 216.918 67.4482 216.951 67.5381 cv
216.984 67.4453 217.021 67.3521 217.059 67.2593 cv
217.098 67.166 217.148 67.0684 217.208 66.9668 cv
218.679 64.46 li
218.707 64.4121 218.743 64.3662 218.79 64.3228 cv
218.836 64.2793 218.897 64.2573 218.972 64.2573 cv
219.746 64.2573 li
217.379 68.1411 li
cp
f
246.972 70.0132 mo
247.239 70.0132 247.478 69.9683 247.688 69.8779 cv
247.897 69.7881 248.075 69.6621 248.221 69.5 cv
248.366 69.3379 248.478 69.1445 248.554 68.9194 cv
248.63 68.6943 248.668 68.4473 248.668 68.1772 cv
248.668 64.2573 li
249.537 64.2573 li
249.537 68.1772 li
249.537 68.5493 249.478 68.894 249.359 69.2119 cv
249.24 69.5303 249.071 69.8052 248.851 70.0376 cv
248.63 70.2705 248.36 70.4526 248.043 70.5845 cv
247.725 70.7163 247.368 70.7827 246.972 70.7827 cv
246.576 70.7827 246.219 70.7163 245.9 70.5845 cv
245.583 70.4526 245.313 70.2705 245.091 70.0376 cv
244.869 69.8052 244.698 69.5303 244.58 69.2119 cv
244.462 68.894 244.402 68.5493 244.402 68.1772 cv
244.402 64.2573 li
245.271 64.2573 li
245.271 68.1724 li
245.271 68.4424 245.31 68.6899 245.386 68.915 cv
245.462 69.1401 245.573 69.3335 245.719 69.4956 cv
245.864 69.6577 246.043 69.7842 246.254 69.876 cv
246.466 69.9673 246.705 70.0132 246.972 70.0132 cv
cp
f
278.158 70.7061 mo
277.285 70.7061 li
277.285 64.2573 li
278.158 64.2573 li
278.158 70.7061 li
cp
f
310.309 67.4839 mo
310.309 67.0879 310.255 66.7324 310.146 66.4175 cv
310.038 66.1025 309.886 65.8364 309.688 65.6187 cv
309.489 65.4014 309.249 65.2339 308.968 65.1172 cv
308.686 65 308.37 64.9414 308.022 64.9414 cv
307.678 64.9414 307.364 65 307.082 65.1172 cv
306.8 65.2339 306.56 65.4014 306.359 65.6187 cv
306.16 65.8364 306.007 66.1025 305.898 66.4175 cv
305.79 66.7324 305.736 67.0879 305.736 67.4839 cv
305.736 67.8799 305.79 68.2349 305.898 68.5483 cv
306.007 68.8618 306.16 69.1274 306.359 69.3447 cv
306.56 69.5625 306.8 69.729 307.082 69.8442 cv
307.364 69.96 307.678 70.0176 308.022 70.0176 cv
308.37 70.0176 308.686 69.96 308.968 69.8442 cv
309.249 69.729 309.489 69.5625 309.688 69.3447 cv
309.886 69.1274 310.038 68.8618 310.146 68.5483 cv
310.255 68.2349 310.309 67.8799 310.309 67.4839 cv
cp
311.204 67.4839 mo
311.204 67.9673 311.127 68.4102 310.975 68.814 cv
310.821 69.2173 310.605 69.5645 310.326 69.8555 cv
310.048 70.1465 309.712 70.3726 309.32 70.5327 cv
308.929 70.6934 308.496 70.7734 308.022 70.7734 cv
307.549 70.7734 307.116 70.6934 306.727 70.5327 cv
306.336 70.3726 306.002 70.1465 305.723 69.8555 cv
305.444 69.5645 305.228 69.2173 305.075 68.814 cv
304.922 68.4102 304.846 67.9673 304.846 67.4839 cv
304.846 67.001 304.922 66.5576 305.075 66.1543 cv
305.228 65.751 305.444 65.4028 305.723 65.1104 cv
306.002 64.8179 306.336 64.5903 306.727 64.4287 cv
307.116 64.2666 307.549 64.1855 308.022 64.1855 cv
308.496 64.1855 308.929 64.2666 309.32 64.4287 cv
309.712 64.5903 310.048 64.8179 310.326 65.1104 cv
310.605 65.4028 310.821 65.751 310.975 66.1543 cv
311.127 66.5576 311.204 67.001 311.204 67.4839 cv
cp
f
338.156 67.6011 mo
339.19 67.6011 li
339.439 67.6011 339.659 67.5679 339.85 67.502 cv
340.041 67.436 340.2 67.3438 340.329 67.2251 cv
340.458 67.1069 340.556 66.9648 340.622 66.8003 cv
340.688 66.6353 340.721 66.4536 340.721 66.2554 cv
340.721 65.8447 340.594 65.5234 340.341 65.2925 cv
340.087 65.0615 339.704 64.9463 339.19 64.9463 cv
338.156 64.9463 li
338.156 67.6011 li
cp
338.156 68.2939 mo
338.156 70.7061 li
337.287 70.7061 li
337.287 64.2573 li
339.19 64.2573 li
339.599 64.2573 339.953 64.3047 340.255 64.3994 cv
340.557 64.4937 340.807 64.6279 341.004 64.8022 cv
341.202 64.9761 341.35 65.186 341.447 65.4321 cv
341.545 65.6782 341.594 65.9526 341.594 66.2554 cv
341.594 66.5557 341.541 66.8301 341.437 67.0791 cv
341.331 67.3281 341.178 67.5425 340.975 67.7227 cv
340.772 67.9023 340.521 68.043 340.222 68.1431 cv
339.921 68.2437 339.578 68.2939 339.19 68.2939 cv
338.156 68.2939 li
cp
f
112.342 34.9507 mo
112.678 33.4873 li
111.822 33.4873 li
111.486 34.9507 li
112.342 34.9507 li
cp
110.655 35.5425 mo
109.704 35.5425 li
109.839 34.9507 li
110.783 34.9507 li
111.119 33.4873 li
110.175 33.4873 li
110.303 32.896 li
111.254 32.896 li
111.606 31.377 li
112.31 31.377 li
111.958 32.896 li
112.814 32.896 li
113.158 31.377 li
113.869 31.377 li
113.525 32.896 li
114.477 32.896 li
114.341 33.4873 li
113.39 33.4873 li
113.054 34.9507 li
114.005 34.9507 li
113.869 35.5425 li
112.926 35.5425 li
112.59 36.9736 li
111.878 36.9736 li
112.206 35.5425 li
111.358 35.5425 li
111.031 36.9736 li
110.327 36.9736 li
110.655 35.5425 li
cp
f
142.617 37.0537 mo
142.617 37.6533 li
141.961 37.6533 li
141.961 37.0537 li
141.17 36.9175 140.682 36.334 140.674 35.4385 cv
141.498 35.4385 li
141.506 36.0142 141.817 36.2939 142.313 36.2939 cv
142.849 36.2939 143.113 35.9741 143.113 35.5264 cv
143.113 34.415 140.77 34.3511 140.77 32.688 cv
140.77 31.9844 141.218 31.4326 141.961 31.3047 cv
141.961 30.6973 li
142.617 30.6973 li
142.617 31.2969 li
143.385 31.4165 143.84 32.0005 143.864 32.8398 cv
143.041 32.8398 li
143.025 32.3042 142.745 32.0483 142.313 32.0483 cv
141.857 32.0483 141.594 32.3042 141.594 32.7041 cv
141.594 33.7993 143.944 33.7993 143.944 35.5342 cv
143.944 36.2778 143.473 36.9336 142.617 37.0537 cv
cp
f
232.387 33.4717 mo
232.715 33.1597 232.963 32.8638 232.963 32.52 cv
232.963 32.2324 232.811 31.9604 232.49 31.9604 cv
232.203 31.9604 232.003 32.1602 232.003 32.5122 cv
232.003 32.752 232.139 33.064 232.387 33.4717 cv
cp
233.202 35.8623 mo
232.875 35.3984 232.555 34.9746 232.274 34.5752 cv
231.963 34.8945 231.723 35.2227 231.723 35.6226 cv
231.723 36.062 232.011 36.3501 232.371 36.3501 cv
232.69 36.3501 232.971 36.1421 233.202 35.8623 cv
cp
233.978 36.9736 mo
233.865 36.7979 233.746 36.6299 233.634 36.4619 cv
233.282 36.8296 232.851 37.0776 232.322 37.0776 cv
231.596 37.0776 230.947 36.5898 230.947 35.6865 cv
230.947 34.9346 231.387 34.4072 231.859 33.9595 cv
231.507 33.3994 231.283 32.9121 231.283 32.4883 cv
231.283 31.8726 231.667 31.2729 232.49 31.2729 cv
233.346 31.2729 233.697 31.8887 233.689 32.5122 cv
233.682 33.1758 233.25 33.6475 232.795 34.0791 cv
233.602 35.2227 li
233.697 35.0225 233.77 34.8311 233.81 34.6787 cv
234.577 34.6787 li
234.474 35.0625 234.306 35.4946 234.065 35.8862 cv
234.306 36.2222 234.553 36.582 234.809 36.9736 cv
233.978 36.9736 li
cp
f
261.721 34.396 mo
262.395 33.4683 li
261.326 33.125 li
261.492 32.5781 li
262.572 32.9341 li
262.572 31.8027 li
263.145 31.8027 li
263.145 32.9341 li
264.225 32.5908 li
264.402 33.125 li
263.31 33.4683 li
263.983 34.396 li
263.525 34.7393 li
262.852 33.811 li
262.19 34.7266 li
261.721 34.396 li
cp
f
173.729 36.1821 mo
173.729 35.3506 li
173.729 35.0547 173.617 34.9507 173.433 34.9507 cv
173.241 34.9507 173.129 35.0547 173.129 35.3506 cv
173.129 36.1821 li
173.129 36.4697 173.241 36.5737 173.433 36.5737 cv
173.617 36.5737 173.729 36.4697 173.729 36.1821 cv
cp
172.609 36.1738 mo
172.609 35.3584 li
172.609 34.791 172.945 34.479 173.433 34.479 cv
173.905 34.479 174.241 34.791 174.241 35.3584 cv
174.241 36.1738 li
174.241 36.7417 173.905 37.0454 173.433 37.0454 cv
172.945 37.0454 172.609 36.7417 172.609 36.1738 cv
cp
170.915 32.9917 mo
170.915 32.1685 li
170.915 31.8643 170.803 31.7607 170.619 31.7607 cv
170.427 31.7607 170.307 31.8643 170.307 32.1685 cv
170.307 32.9917 li
170.307 33.2876 170.427 33.3916 170.619 33.3916 cv
170.803 33.3916 170.915 33.2876 170.915 32.9917 cv
cp
173.633 31.377 mo
174.217 31.377 li
170.475 36.9736 li
169.883 36.9736 li
173.633 31.377 li
cp
169.795 32.9839 mo
169.795 32.1763 li
169.795 31.6084 170.131 31.2969 170.619 31.2969 cv
171.09 31.2969 171.426 31.6084 171.426 32.1763 cv
171.426 32.9839 li
171.426 33.5518 171.09 33.8555 170.619 33.8555 cv
170.131 33.8555 169.795 33.5518 169.795 32.9839 cv
cp
f
292.815 36.4541 mo
292.815 31.9126 li
292.815 31.0088 293.344 30.4414 294.223 30.417 cv
294.223 31.145 li
293.823 31.1606 293.592 31.4248 293.592 31.8726 cv
293.592 36.4858 li
293.592 36.9414 293.823 37.1973 294.223 37.2217 cv
294.223 37.9492 li
293.344 37.9253 292.815 37.3574 292.815 36.4541 cv
cp
f
368.769 63.126 mo
369.097 63.374 369.288 63.7578 369.288 64.2373 cv
369.288 65.4849 li
369.288 65.9004 369.544 66.1641 369.936 66.1641 cv
369.936 66.8999 li
369.088 66.8999 368.529 66.3242 368.529 65.4126 cv
368.529 64.1572 li
368.529 63.7578 368.297 63.542 367.961 63.502 cv
367.961 62.75 li
368.297 62.71 368.529 62.4941 368.529 62.0864 cv
368.529 60.8711 li
368.529 59.96 369.088 59.3838 369.936 59.3838 cv
369.936 60.1196 li
369.544 60.1196 369.288 60.3833 369.288 60.7993 cv
369.288 62.0146 li
369.288 62.4941 369.097 62.8779 368.769 63.126 cv
cp
f
303.854 122.883 mo
301.887 123.635 li
303.854 124.395 li
303.854 125.123 li
301.103 124.027 li
301.103 123.252 li
303.854 122.156 li
303.854 122.883 li
cp
f
302.514 129.195 mo
302.058 131.066 li
301.578 131.066 li
301.746 129.195 li
302.514 129.195 li
cp
f
335.223 123.252 mo
335.223 124.027 li
332.473 125.123 li
332.473 124.395 li
334.439 123.635 li
332.473 122.883 li
332.473 122.156 li
335.223 123.252 li
cp
f
365.098 124.422 mo
365.098 124.17 365.266 124.002 365.524 124.002 cv
365.777 124.002 365.945 124.17 365.945 124.422 cv
365.945 124.682 365.777 124.85 365.524 124.85 cv
365.266 124.85 365.098 124.682 365.098 124.422 cv
cp
365.174 123.287 mo
365.174 122.027 366.148 121.928 366.148 121.039 cv
366.148 120.689 365.951 120.416 365.574 120.416 cv
365.209 120.416 364.985 120.676 364.971 121.131 cv
364.313 121.131 li
364.355 120.305 364.831 119.785 365.566 119.785 cv
366.302 119.785 366.82 120.289 366.82 121.031 cv
366.82 122.166 365.847 122.285 365.847 123.301 cv
365.847 123.604 li
365.174 123.604 li
365.174 123.287 li
cp
f
367.063 127.766 mo
364.807 134.293 li
364.197 134.293 li
366.459 127.766 li
367.063 127.766 li
cp
f
333.036 129.578 mo
333.036 129.291 333.236 129.1 333.523 129.1 cv
333.812 129.1 334.012 129.291 334.012 129.578 cv
334.012 129.875 333.812 130.066 333.523 130.066 cv
333.236 130.066 333.036 129.875 333.036 129.578 cv
cp
f
340.434 95.3594 mo
340.434 95 340.684 94.7598 341.043 94.7598 cv
341.402 94.7598 341.652 95 341.652 95.3594 cv
341.652 95.7305 341.402 95.9688 341.043 95.9688 cv
340.684 95.9688 340.434 95.7305 340.434 95.3594 cv
cp
340.434 91.9316 mo
340.434 91.5723 340.684 91.332 341.043 91.332 cv
341.402 91.332 341.652 91.5723 341.652 91.9316 cv
341.652 92.3008 341.402 92.541 341.043 92.541 cv
340.684 92.541 340.434 92.3008 340.434 91.9316 cv
cp
f
340.444 100.838 mo
340.444 100.469 340.684 100.229 341.054 100.229 cv
341.414 100.229 341.653 100.469 341.653 100.838 cv
341.653 101.197 341.414 101.438 341.054 101.438 cv
340.684 101.438 340.444 101.197 340.444 100.838 cv
cp
341.563 103.787 mo
340.994 106.125 li
340.395 106.125 li
340.604 103.787 li
341.563 103.787 li
cp
f
372.543 91.8633 mo
371.982 94.2129 li
371.383 94.2129 li
371.583 91.8633 li
372.543 91.8633 li
cp
371.254 91.8633 mo
370.684 94.2129 li
370.084 94.2129 li
370.294 91.8633 li
371.254 91.8633 li
cp
f
371.744 99.7695 mo
371.174 102.119 li
370.574 102.119 li
370.785 99.7695 li
371.744 99.7695 li
cp
f
369.24 69.7041 mo
369.24 75.7808 li
369.929 75.7808 li
369.929 76.5005 li
368.473 76.5005 li
368.473 68.9844 li
369.929 68.9844 li
369.929 69.7041 li
369.24 69.7041 li
cp
f
399.27 75.7808 mo
399.27 69.7041 li
398.582 69.7041 li
398.582 68.9844 li
400.037 68.9844 li
400.037 76.5005 li
398.582 76.5005 li
398.582 75.7808 li
399.27 75.7808 li
cp
f
429.668 76.4927 mo
428.973 76.4927 li
426.398 69.0405 li
427.086 69.0405 li
429.668 76.4927 li
cp
f
400.229 62.7744 mo
400.229 63.5259 li
399.893 63.5659 399.661 63.7817 399.661 64.1895 cv
399.661 65.4048 li
399.661 66.3164 399.102 66.8921 398.254 66.8921 cv
398.254 66.1563 li
398.646 66.1563 398.901 65.8926 398.901 65.4766 cv
398.901 64.2612 li
398.901 63.7817 399.094 63.3979 399.422 63.1499 cv
399.094 62.9023 398.901 62.5186 398.901 62.0386 cv
398.901 60.791 li
398.901 60.3755 398.646 60.1118 398.254 60.1118 cv
398.254 59.376 li
399.102 59.376 399.661 59.9517 399.661 60.8633 cv
399.661 62.1187 li
399.661 62.5186 399.893 62.7344 400.229 62.7744 cv
cp
f
429.564 59.5439 mo
429.564 66.6758 li
428.781 66.6758 li
428.781 59.5439 li
429.564 59.5439 li
cp
f
322.965 37.2217 mo
323.365 37.1973 323.598 36.9414 323.598 36.4858 cv
323.598 31.8726 li
323.598 31.4248 323.365 31.1606 322.965 31.145 cv
322.965 30.417 li
323.845 30.4414 324.373 31.0088 324.373 31.9126 cv
324.373 36.4541 li
324.373 37.3574 323.845 37.9253 322.965 37.9492 cv
322.965 37.2217 li
cp
f
385.94 34.855 mo
384.805 34.855 li
384.805 36.022 li
384.086 36.022 li
384.086 34.855 li
382.95 34.855 li
382.95 34.1353 li
384.086 34.1353 li
384.086 32.9678 li
384.805 32.9678 li
384.805 34.1353 li
385.94 34.1353 li
385.94 34.855 li
cp
f
353.396 34.5752 mo
355.355 34.5752 li
355.355 35.2627 li
353.396 35.2627 li
353.396 34.5752 li
cp
f
203.822 35.9985 mo
202.601 33.353 li
201.364 35.9985 li
200.409 35.9985 li
202.068 32.5229 li
203.117 32.5229 li
204.776 35.9985 li
203.822 35.9985 li
cp
f
434.499 38.6709 mo
420.506 38.6709 li
420.506 37.6709 li
434.499 37.6709 li
434.499 38.6709 li
cp
f
421.235 35.6777 mo
416.918 38.1709 li
421.235 40.6641 li
421.235 35.6777 li
cp
f
399.784 132.807 mo
398.784 132.807 li
398.784 124.898 li
399.784 124.898 li
399.784 132.807 li
cp
f
401.777 125.629 mo
399.284 121.311 li
396.791 125.629 li
401.777 125.629 li
cp
f
431.387 156.949 mo
423.479 156.949 li
423.479 155.949 li
431.387 155.949 li
431.387 156.949 li
cp
f
430.657 158.941 mo
434.975 156.449 li
430.657 153.955 li
430.657 158.941 li
cp
f
374.373 156.949 mo
366.465 156.949 li
366.465 155.949 li
374.373 155.949 li
374.373 156.949 li
cp
f
367.194 153.955 mo
362.877 156.449 li
367.194 158.941 li
367.194 153.955 li
cp
f
399.784 158.607 mo
398.784 158.607 li
398.784 150.701 li
399.784 150.701 li
399.784 158.607 li
cp
f
396.791 157.877 mo
399.284 162.195 li
401.777 157.877 li
396.791 157.877 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (user) ()
%%Title: (7004.eps)
%%CreationDate: 9/18/2017 1:45 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2Oede<Q`Y&"#hZ]L7O9^`@N">?.(R"PIm(XgqF3#LE?P*qgNcYn;+l;jn6mA63oa#:tn1G`uSX\pa^<DlK\dSd>5B[n'(
%ZXWh#oph=P20C]fg$jo;>(?OV[.LG>&GFP+N4`q@2O;R6Nbu#[j`YK[)7KD=h0(C:oh+U`]A$Q9Q$rn=gg4q(T*2\8@C+Yd.p$Nk
%[0q5VY\P=^)U5M7mTp+rS<MPaBHHc#ht5hUW.=ilEVF_P&tm.HhhMt5h5pD"_+p,MA?BB,bF]9]ZUV.U%Jl'-lcTB2['8ja<?Hsd
%+Sl'f>L2R'ZO@r<b2I%gB_E[=3EZ]<m6A[s.N[\XFVrQe:H9Ogk<E/J'E+bS#`,*QSc)n29E3"\2fdi/8C%3`RE7.W!fdI#LQ@Gi
%!Bh`Z+j7N\b^r@DAZ$F<6gcnNYk*$UeM+);$/S;R/KOpgnD^L[BBFUi[q]\Zh?$t&e',G8n)eF6mqRRu59N*1rbR7;Xll:05s=SS
%N\,AMLQ2=a"'MG`Xt'R-I<I;XL>=ej7N]k<E6O@_Ze)@89i,'F;/$6ieO43Pn$p;5cohd6&?,!YJGEb>k@rq^Q\3Irn1/$HW5h52
%Fi)^,q^l_<W5l!tC!\WYA<tat5Nh:6E1b/nLU^>`b\CR/LtZ.sZ$co&=5Cl!UU@i$J[:p":@@XI[o&JXlP_c:qA7a.mu`*InP@qF
%:qkft>GD)-EEq3BiNMA;%[lPJ<k["sA?P.$5Dp*J/a*kmp0%<mr.BJ'<=Cpn/fZj"fnK_M/QVD6J%U_(o8`R7"8Hi5gE(H[>GpjQ
%s&^o'gF$FtD-6,5]AVIjma]F'pu=YXR<Qp2;)bF>*Ul"RaTmgNK*`9ET%u(:I1"<k5N0ATm(Z\pLOKUF+tJJrmFKUfg$XrZ&IDY6
%gq066a\qq`1M?sJ*<-$)Xu:aG-NTT.eh44$eO&JA^e"AH?7$h)9EF]]-;d)/*(W#)eU(DFoOjog&X]E;_dA`Xm:N,;M%rnkJ'ZcY
%Ib8MNC.6D6%XR<KUNX6u%1s>25E\e0p7l847L0bN-3-6"h9&AVZe7>(#+b?TD-6a(5"@m`T$7s<2/`(q'%N%>=SdkWOs>Ql]A<PY
%)pte.Q9"jnkh"+2?;A't[h2C!Mp/l4N>;r6\\g_.+%h$j00:_+b8m/Z*<rj5'iIr\CELFo5mMqjeNa)\F2\n8+Ek=^]`I0:H>`OQ
%Wtek@o:Nuuc>]GNTeMFD7]okno8c[sriu:^+,4LnL8J&ED8!$;i2<Lii5aGXbgd`iL*''D";?6+?.1:m;q=S1;q)0Dj2XA*r4&2j
%6/hnE[c8Hfs-W`)i'2PcF+sYmq8X0*;Vj1^/rR3^N7o#UC`D)/k3\(1=,>Vn7W%0MfIgj:BU`ZUD<!kU+1AOEg.GRbOOe;Z98gHj
%s8A6u]Wl%_>UUE3V/j,Z?*8!Zg\S>Z5N]D^D/VMj0)TtKrcS<kMVFtE.($\$?.lB2]ch,?#5jkXA&443E@MM"n8B+l4S\IB:P&N[
%q+iI=.E=[-b0SH7$*u6fHHe%LE_FHl/nY6.Wat0uHJn[Gh:G>$L*a4I@u:sD`RXOjBmVN?KjPs-j'Oq'1S]o_epK.D?^UPsH/J<)
%."cR>D+1N``NnQ%_35OrCL)i^4FFaC1Z1Hd26Gj+\TR]5rEf.Cb_Go]j[P5(DM%;[#p4$FQN+[8[c#&'(hU@=P<hEdS8SQ<(:r<E
%=f-B!B\'e(MjH,<CV.C:p`]N9rtcV;i59,Cks94S&?9Q;WC;7?bs>Usmh&"@aM:G&d8=[k<J=ct<;8=6'nCik..LB6hET>Z86g&@
%PrT?oBBT4%g5(@0;Q$aG>\J<+K4B>8;N5u,Kik$_.F[GNHF!B+=f53D?$oX"K5sTKQ#*JE)CP4`h3.k5R;:bllU4NC1^d>J22*BX
%dLCPUAsOJe$;O6b<r9,YJEbQoQ$U(_>62t]]1V=eNFmI\SugR9cjMA[nAbO'1s=O;-pK<FN6.Nr#+)N.rSV<8O3tf^a_"Miol1G5
%9TnA^,gmh&*cM%WGil4nkgmVABXoM.5hF.6d'[JVnf"W-&ZP&(9M^e5Q6p@R4(1)3\%<N"O[Z2'?hdN"O"YB^kUsWL'g,WegjleQ
%GadAh9]]kQKuI#/es)T;WLUA`b5H6Pj\EDgjG2!Hm7)"KR2`0M@P[[^-Z^.@NTP=8Q[qL?F1K7pDD@J^biKU]\Z83BWc8,QF4leF
%p%b,#PNHqSPaSHF>VZ-o2@n,dHMao3IR,oRo:9RYkEF[?0^r^G0mikF3W.Rgg\EYM$>AsDl#kDoN#J\pjV2U$=hmcdkk,i[X#O:p
%g!6'CKNgU_BN:\l=]mm\g/+DNhN4jdbWL6[:JZ=GInXdJj1bMMlSb*C]ZG10[NE*#c^"HO5'l([N&/5;=k3f;EmooV$sNs_KC3GM
%$P.#=2MICT$VL1qC9Z/MY6LcubrdW9B#qNNdXu/Y/[\frIaH63<VhiWl)/)oE;T*!]+nXD62ATl:,l9k:!6q==^S/d7j-rCX^]i%
%VT+*@W:?LZk8=*`7]Tn@[M6";qjMLAGL^Gu2p>j]PBl)Sq'#Bf.ieT<mf[5aeE1VnF1&IsZc2t_'"*WKS`O=<I3leXFtlTb70e7<
%'BTZYM[nlcqdIu@PbNdfm;_4L]Hk8/#X@oj@aJuacS*1b(<=YLf[t$4q*cKc_=:kMJ(DWjX/tr"Kh/**d(QZ1(,AP.A[[f9UYSUn
%r74n"G55Ctin;cX0:c\.;DR8?B=bh0j>0Dt);+"KC:B\ODA`@#_i)+F\W*(tDF;`_3%E-)AJo$`LaY7=\`QW>PuVb,)b=o"bUeBV
%k2r4NQ6<g%I?;2qhe[KukNnA\$jji\:.&n7N@i4e7`jsCSHmAZdUtjPs.,S6%G22\l/:3QF4Np;G=M2Q^Sc$Cj*,Y83Sjpd!tWCa
%MQE67lWFk?H0OWRr+pie=3^!_rX@Q&s396rRI+/K1@WN`"U1[p[noE4H9>WYk7[bq`gf'A20+j'XQF-YbbE>*^Zm4XGVN;]%pH*>
%Go/I82[a2B:RHH=>5B7MG^Fd[rR-a#H*f"ZHC\YE$e[I9m00&k*-*Y6W%Pug[^hdiaDZjWV1-s[?RIAJJ'F.oM1RP.Lbh9FAlr!$
%T/#W"Y>Lf:a$j?630#7rS)6!s@b,lrQG]M>H/D,Hq=OUWq@(O%oP8VF1N#ZCD)@a8G3h%u]%<KrgQu(8i5MRi7u"P?\$P.=m3uXj
%UG=R8VAPn9@e.%aZr@@#Ig*SBVuqFu&%WXH0.Jui#g8l94j2qW;5n9/O^SYE$DHsU]_rLD99c'7P0HHH$o4?nW!1Eaqg.N9R`V;Q
%;Q:],M0K6&ea!\<28WMoKgho9<NFruU/J*O\/^I\]qZuE$;YeV&[WICR@:eZ]39.U/nS>\(->B*@Y.Xm8NTeT-o3O"(Q4h4Za;oc
%.C*R"Y:k'nbfrnI)uPtP=Y=*O]=fUqqUW:f4`e=R,suE--[S_iB1AFPfS`Y>8UF=?.'qQaZIk*+h\^2GHVnBkXtsJgb0A_"P)0c`
%I]0qOHVq's1G9X=]^J;2jGR10*B/*o9'mtm7EM:J]_)'dHqQ8VHYP>3nd;HQ9jc3?ja!8;GV)$4IlD8hO!B*h/#M!O)g-X=@J@:U
%mo)6\jqXV9*5Ae\ps$uV5<%tMm,*6WcW#boC:DD<GjQunjt(a/K*`=+[c"OsYK[6SD0H"`Uhbm1D3elfA3me7[0<U:NR\fdg*0[(
%YhF]ZD@3Gl2aYP`GeZCW-HTYIJ,;i]Y$M)\]$]'?Oh9gH),.9u7Z2/[`/Lh[ljOj.,,Gf*mGT:$Vj3AF3UA^(%\*@?i7IKVT*CgC
%6At:Jb$_#_GhF-`14J(4DeZTDiG#&EqMR:tD-`\dka+)2:dN6!9=;`E.-#O.:%p7S4c=[Li%gNg6e;1mK[T1j]20iT\$ub+J)DZ<
%l#9'dh_;F-DSs5s*;m,D^VbO[i.KhR3>OB`)9>fqI$qClk[o6?iI>:14.Z>\RD*?^DDq#t;s/XM)uhJ$A(EaAQ/<Y-r0d,<-GP;%
%8(0KgdD"tSHSBSj2&O;2s,t^*8H^?5h-@6NL=NMd/3W-)MB+%]K&ss"4V]"0.AkB.F;VEN8^YAED*Nu*\#8FtbmRUtalo*Pd@^6>
%1$COlkEfUAb>:F4A)qR>I.9Z7P4SGmiekHUSFg$UoNT!.rGD"QYPCf)`V\OqV;9,fho5KM`V\Q3qql3Wf)3;_?$m=*ir/=fhuE96
%OhCcR[#L$4jPla!N%P:YpqkVASaYR/n)Bo,<Sd0qCc:$t9m0(6EH^2o!in2%7:c\d,TiCW[[J@@D4I1-H=<f/K$:fkV%]\sQsoBV
%%Y'l9-@;T]e?Xf;<'KN;65Gqg/[bA4F5O'[ZuP`qTKt$57Q::!fOBPNYsPm$+oBldndYE+fM"lo@[V&;9X\%M]8g%H``Y5/>8rYM
%L)Vgi29snp59'!%f\bnIoo4,RBT7DC]i[Lg#0hK4Q8=0n1bK%3;-uPd"JR;)XXJ9HW"V)JYDhd[V!O>4C!$lK:Tq(oCoVh\b0`VP
%)@roj)>6<b2gN)MZ1p$%M\!Kr=G,#4qqFjU9^/*oL8^"f^VW$CqN736<cMoas6`.@G9mFS,E%8B`PTf-iFT:`Z<2?S/A*ML?5<o%
%'1XO\bRuM?`2bS>rFN8'1;bop`PTeu(1*jsK&)rF4u9NqF;Reuk'@3q8oscq?]hj4-YdSTD%j[4a_7-e1uFWoA@Wgjeh<N6E`'`U
%?T+%c%u\UXr``mSc2$L[ll58&IpBXk2bc+JrV`BDEkQlU36q$/1@'SQi[1PAi:u3mWL4hEY;cVjN/c;H\]#"O2sU[F/,47,qpOKt
%V.kWt@JBQd4K,ah>'rods2lWV2sXFlL:ai/Vt+II-(+Sill!McZC^$E8pR+EKiSs07PUg8_r%fW4_C;!g8Cj^Yg7V_2lpYfjE^(_
%YIKVmMfXDuin^(a)43;-r5R>2oAc(S$uI%tBWJ_X1c[n/N7UuJY-TR>-#oA_hP=@Z"ss7`e2(qKN6=pi))I1+k@(e.Bio=XlH"+,
%`F[5NFc8>N#rmicN&d?Ubl'SWG6?DNZKSMpa-bPJm_&5g`B)"J*FmY_ZWP7MXCKJr3X2(Ion,pWGS]nWRkR&gm09tId!XMaAD*Rq
%4ZCbB=T)2uWa546T'7Yc@>/60m^6c:&,V?8D:F0,14*WpNZ-/98#V^$do&raB=QIR,j9rIDYR]Q[VArWCl.`3dOiXr7'4;e/"hur
%R63qHcZ7W@h!g7)io6]+BjNW\Kj7BbmE7%Uil.dm8VXE\l*n!0([^I$E<C,P\fmCdAJnnmG9m^GCiNP)mn.nUpK^A>>Pu%S[6_QC
%iTFn$4W-)M\'O63@&>Jsen:t?92ERmU)[F-k#1Ts%XBWA8i*9L967l(.uOb@^=c/k8XmCK.5Obh^#T`Q4R-JTie>5YH_JfYPa9SK
%lNF*3@P*%8f&F*,],7/K-e5t7Mk=U13p1RpC_X.Abq3OKMqQlp2Rf'u/S9'F5+B`WA1_D72dnUg"1O%;k&^,NT?D0_`gffe12++`
%cHS%1/>dKHl.f`/2j;_$<W*+qkcuWllVfkA-;E_[.5Oau\p*ObrN$rK@FiDFmO$0@DV@$BA4WF2(G\[6P+(n@rLA6Egt^d;Z+(ls
%ENd;#hCC<Lj_bQR?-`ZldohWI6Fn(`)><nu1T4Sqj<CPY$#5J!YOtT4Kt[JhAsQH^\D4IN0&q/)cV6XHW6`+uUC%CA\a2af*H;`_
%ScA4[cFNJogostC?Y<NQ=kkpmhj=)hH)?5Pc1n?G=3'hSF\M@WBn]fHgJ-\rgFTa:r;4XCb^u!Rbcl7fT0KC\RF4'koX)!JY[=7d
%kai!d0WSAln\kY)?`B1`qe>5*>g!&*]/TY^'A^mZpO`E%/dIg$5[hcK3S);k,>ZsF^G7EcPHrY8M%?[d\<H*"V,-1W+%**^?3@A.
%cA$9NW5a\;,+G(<Ci5@Qb]IH9V/PRgS*V7bOt@B__AjcuaOKk*0M%)PDZAO,\&'XE-m)S;7>mu*2^UtOSESZGEZ"Q0\PA$bpq?2R
%5/o5K.F7brrbkSa(5q#Ke28*J^5FN_k$j5H,ssS:0rg2,K0DF=ZM7kX'f_'\k%s?;C4Cr3K/N&$jQ>fIc+]3"qr;/4D=l.-_b=Di
%0j!CFZdIY@)C)/AMnsCf#F8L7*4(atX:L=or3."XB8NNuIU'PF%!XKbc@4"9c]4"V\:VBgZGB[<H@?CHc]:;>CFeO&,&Z<Z4u_e3
%`@"uY16:mkDtL_22u/oqhu0*adi;!Br*lDD!344]YJFI_\=V1/T4,JX10Ii\CR.4""m:I"B7A4]JZ!j)[\V1@bc]XemZ$OJZV;)l
%.m(>A=+'rF'62Lf6Z[`I`bL5:Drr^p=M5$MAGj/AVQ$NclG%E^G+-*oN\?g16=+^X6Z!<>QJAtZG3i31o?u$)]:/Rc]I90Mhon2/
%kZPVrHnP#)lDP,h$0SE,c$_p,P6P&'C[Y':DPbaOiqg]sH+4rdAF](mXA0\E%*RR6iO;sV+-k8QAs:B1<BHR@)S&F*Q?RCRm\Ycm
%c6CK0*G5/m-aVf32i$lO%Qb;Ne.#Tpdk'CP0S;*0[B+!&PI)j4"^*C(9I&O@2bc5p?7^L5o+'[K<bOB-1Rrq5YDXuu^LrJdDed*'
%^BA8MYcDQ[gT<Mc)%su+"s(Hp\+ZL2I`KfMN#0C<7Z2`dk8u?=s7dHrqQ/'2+0qrIHOqSY>4'(.r%Ag;bFbH$!VEiST[QPI57aX/
%`au%c@Nd>tMZ$37^L9@q",7f2^[dER3X3f+nr@K)d4_A0]/KTHR_EY9n;D1qL<U:ccu"O_L2HaspB=TWf[BBj(]3MYr:V/8^N-oO
%gWP$AU?1Zi_M8B?G9FF+%HQ91R=2'.I:aUrl=?CO#L0L1%jU30:RF&CXVj0$`cjP/s.UA89_J"kVE7i6dcF70n9hFsjU7Mb4/Tsn
%s"Jf"+8krTIVkJ>QJ_4*X5]3?SIG]#!]6i]`76H+*eWG0T+CG;MoWE+`?4F_V,:(^X$oi"FAnn\D>C-O57CZX/H!E'?^E/--EHG3
%d8#ok7nJLU?#J6uQ]Q3RK0Iq$l$,o&/?%6ob)cT'))$_l4IU\l0_4[^X.!ge15[EFNlMWN9?56M>.rsg6+=<XEK#Oem":.97Vkdp
%rH%C$eUiWb(+V8s[>T"`FZmA`U?K`n.!X0RZ#A-\]Ftt$6HgF(rKgcY%#WKmf,5;&hC)kiM5B6KVJ*2&P"\"`Ml3Ho#ZiC-oq0oO
%JX)dcJ7j2Z#/,K_EX(ar[ta*m04;mE)ag;@ArkIA7_^sR]Rf:]h4C+dQ$]EYbs6[&!L*8HNS;XNE@nYC&-gC!%aX;()56@r;`A).
%V:cOTR^cRg\)Q"uk[iG24dG8iF*S_c=6E=c1Ym3FSmr]Qe][Yd]"B?MbB.A^_;&5!h&`KI8\5Mt75[3p^Zm`&-8-&'`hX]FR7r32
%A@+,7^Oc.5f^bo`&teW2mo8#sb@'nWHmjEsBSL"iX+<QpcU8#bL4$'NfFPQ+@38As[]n68/S@s;rQn8B8=3'hm7tE9g%\@_70HM7
%<aoNiIc9B[=Pk]qp:G/Wd@%@84YnIsG.R(IDV484IV.&-.6eJ,0&NYts(1.F@&AB4mT\+=ASL\&crJ[E1>7dTctr?\V3kA.-Bt!i
%B!O(2-sXX!So$H]`FhWW$/Ml:hRcsIWXm<I*]>atq!YAVW$D"01asI]q('+GC09rsYF0(EA_7OY6%@B]Z)]_$s4<7@;ifi$Aa5MU
%[*!4(Af0*[g7>^KDY:mL2LVACj)W"3Z[EHC&&QVbfb4TqP#&DE)1>V29[AZ_0C4QTPGOrF1[#iG:6nTL$G3m@gP>;^m/@E78)`A(
%gigBY%o+$RS<+NE`US@(7.Hq6X#(\9[DHf\:HqA+WaK<E]7+WNm%*;LJmL\.`n_b]&GFi&6%=]6m"&5jIV7$"oS@CY^?NX;K@\]u
%3"'g)mEV@L3&*E'R#Va4$0lZdPfQ=\616"3[pGug:R6X,<NrW__fi`BaGY2+(ok!5KXhK&\\b#s7P.P+#?OR:=72g5Y$JEN.VIQq
%.Q!l9""Y2Z_q[g>j=es0V>XXHk^_iBNQXUD+@\68VLG\o[[))g0"W,0`&?mW*1LX]QJmtC6+;?l%_D<Qs*C`9!Q#(MJg/Y)Z;q0t
%./*1fKtB;HEGXC:7i0]i,:AeRD4"F-[_X0,i\&-[eE\M-b>lHP@<75d[G35)05u9Ed0as.I^a`V,Q+k8jL%,+B73Y0XULXmd1tMm
%?,duUl&b`^;Ld'Y2fd98TU2o,IGbLl%1g)=503&Cd)1<e3tO!aN2*i]mRq^C;jOb`;E-gF<\p2^Yk]j6K<EaJ/SHp-l1"hmo,fLm
%^'M?_AYgsVr.r%3@A4DC$Xa;$p^hb$FB;,I5+L/]I)V%"F'=W]^iJHJW/Du/L#'Yh]A,#kF,,C3drr&-mN@0ULn0e^[6)-D`LqCj
%fV2@f?Kb*:9NF0Rc&!hDeh4Bg1$IfW2-T\H?bPDBBYcX0`o$%U8s\0=C6TqV+#fGS.8e?-X4A7UcMr?3J!;"/m#C@g6ahf<X2$Pu
%$K8V^F%;<Kj?@@J-$\s[&)-#/mtqVoWPH^HS?T_W7:EdcZY[t\E[7!]Z:W99@n4][ks%P#)>n%$A#)q>\9\g[)WgPsO1?L*0]=bX
%T1O,'fjc3WZaNa(\990$]&\Mp4Jel0OXs9GWRr,kda/J)*crMC=k4i?.>I"^9=p[pS!Sp7a;Nef8pYZf=2cABE(btA_jOCS),hE[
%q/U#(eL.).Wlge.f]&Hp#".nRAZ,R/'K2GKg:u+>_K[Z"(tUs20lm'aZ57W8+AHqO0om<>hm$7<cfk86EN09V8*!D,ABgaS+m3aP
%qEZq71QYH++\%pBGYea.*'t[tFUd/%Mim%ANiqdYF+kU>$b`7oqkUeH:4dq@3^!=s8CDs;mr:9UPtWTejlie)(.b;Qbsj()eBSfg
%1jZY8fXG73qlJT"?DM,3*AOs=rsZL[[\#M7M3J7VHlBHi'67!T'$S)mIV[rqFL]>Z?#-bU9n,OMIg5>,(4`Kjf'_,,qN,sCXhAQF
%e^$Z3W^8e#)=W?DDNjn$DWG3n\C1oP%;+8nbTG*6P7qIj)-*</ZKrU3k>1VNIsP;#aO5.aqhJ5h(-RsPg6F&UbFeLFH=LnclM@5c
%b)rP7<[YsNLeYh@"K9*_5]X;,,E(0pK<u>>q`s[pWpHd2U3*?XfX+MpNoYT1[E4)SQ&4&sf%rlI=]>H$:R$9m%/.f_MEI0[>-.?A
%F%(4`Zr^4OZGG%2,:jTFb%S)j`h^k$\kLOe9*WKq>.h>bkNamGCE[Ri0$peMDkH*9KgE$o((PX>8kqMM*MEi],,rY^RO8g8>r4Si
%@$liT/LJY`6VtN616oEaMUpM+k-2ZJ=\e0S[Fr>A8S72Lm??AWBfeiIiKF[5W_k.'rail7K+[F/[!_''nfiS#VXa'&dsSOu7F!#F
%PeRX<(VNfD@:iTA+7qmm42,ANHRh*?29^Bj_BCjj3qZ:*lLgYBH;k]A#P?jAH<KdJ**M/?;moW>CtHR:.sid-ong(G4.p0,@4pqh
%\oG9#L5&%">d<k\gNh6bl9csm\#O_>T(ba@<&T0hDI0Y=Q/kRtq.=l/V+4Q)(%&KL#\UbU?6:5-=Lq/Zi>I+$n]$nsJo_gH$qRas
%48G-lG9NgONefXfHn.akl74TW[,C.GkD>FP<+YIl1<2u:--N+dJJ[@ifFt3a*qgLbX^MUr6g=7hhJkH^:0s+O&K+e,kXA0&OZc]o
%UfD;Uo9[VbjNo*YFpm*^B<O,2l+r8:pijSN"if\ELDK@0o.[A"$nbAeG%eur8.a)$h>`;8+&RuX[hG,j&q#ue++nPVEU6'E7Mb%9
%L1+p4$iZZhBs6*%ep`TeXJesteJfIP:oN8b.PGm5BF-;,#+Z1bL^T5AJ.GjmMlhnuAS+uEa&XA'L+k7r0f\D9A'.-^pD\P6M=QBa
%E\%FCBA$^FNQ)CFP7#jOmEVL_/2:p*[PFgeQQ5+X.$r3/:P*J&S-.;hJdaLS9)#;kP7#dT-:8tF>*>SdCe9AuZmEWdd:oYRY;[iu
%?W<uQ4`.)u"d7tnK+mU8jtL`H5[F0iDeM&WK-Z]CXlGr.bI>?pTJ&7YN@;d.++./Hp_[HD@IRu*W3*&NpgRQU%\G0%3tEJ6&'%h2
%Pm[D)EMNd*PP,hs?_WoLN;NYCjOIfYq/SVqXIDiNq'*h_U1_AU!lGAb"!i0@3R"t<@.\>[6;\Th`_0l]@KUa^4ecK!;]Eb:]L6\.
%qg"%p+PT4KikYp]#YaW3)+G$@lu^USN=2&N:qSp<)a@'ZAV4"k[qL^L2K9@,];0`%nsfPc55-Zlad(R6a0"Mg0-@oT[K$%gm\_dS
%Z??PB*R4V=V3Ff49tM=GEDa_kMUjS!QbUPbfLa2.s#a9;>i=t[+NilspY<:.@`sJ8rPm`'F$K#_L2nVICku5=iNT]$le,j:M:_Q/
%+%t26=8+mAg3iYir^QC+jgf[*eS9*)]5r83Ib)+']Q.e!q0o:TjEl*A2p\q'46p*hG+S&':Y2Y>n*b+9#;rurD<uO@\n0^FZsNQT
%q.rL3]=%/ds);apV:42a]eJ#&bgo8V<`bN3hCkH`HX5I][)0^Yj7/=:3M4'9QBG7MIfP%;\[&U1Iba1S^OI\9+'2MNQgJOkY^>"e
%J+U[i1T6P?]C1X7S+kfkR.@6Mr+'JXG?t6uIJ`likJC(Fs)tbK>&O;^f&fE_bLUtmJ,-%UZ8AL2n'k-!%(B="g[V=1q=Mil\(KJN
%^0a)VT(bn@mRLQfaL?NXRU5rt[JBIo];QoeFKb?0lt[Ph]D&)5>Mm+o>kPhg/KCqMBgn#++4LN<`rEdNW4$!<?S@bkXlGDc_NK35
%;=Wbj[msZ!qems\E:EA=gZNe+2eobYK)O8F[!c+@O$r<f>2XQCGJC7=^-8_:RnHQGYBD"9*YbW0pO4e"*c,[U5;tleZgmb4<hWO*
%J,/<uhSu"2q>#$JFk:r;At`G`eK8(ulW@`#r4Mb>/Ebk#h05_s?Z21[!cYHZpNUt+,qLt1rQ@`e&(RMYddH7gGM=X^c)tP*ms]<F
%4E4$]YE(U!ej$8U-[3;oHCqR15c#jR_`Q'oT:C,NlP;;,PN'O`B/L1G\+QbuJ%;me?4/[[<GjtrfO\M3p;'g:$SMQj[$07V(B<FB
%PKIM8gZH-8(K("Vb4`<C2WKFp$PE;CHh?C@p52^rHM0>$khY:DNV`C9?b&,#`DGHmU+O;KWT%u8_ACl.IJNC6.hu5-ZYpT%a5#J3
%YkQXf5!%S:Kqn558*/4-(I,?\i;VQ,F7SJdk-OXKPJY^mX^B_q>MCYJ)(#`BK)=ZI*I+O^EVo^DVZX;('YI&FI_CiNH-La2R;gl8
%G5:cL]?X+Xo`bpJ4h7oh0(KXU)8p>5l]9m<XnU-l>M\`C)f'ljh,E_fcYdhFnDM3L8&_q:2/,cbF_Z52WlV`P.M/rVkj`&k;Jtbg
%mCBn?s4Yj=;+49NPP3SI;?(guk]qZ>[V!CG`:UqDn%6%GG/QB-8%qhkRVHg"LR$tJSHl!4kMYCoM735a*-SqE>.FTW"'ZC@"O0g"
%.3(S(H-C-.I]K\*q]]D(rU'kE$Ue=o%Y%`t.(oC[goHZ7T6m%+ihTm0eLs.+-6;*$SRU&nr(^;\oW+$;(7uW'H(8ONLk0`&YKApC
%9-MB&]ue@8e5"WQ[F=M;QE.i?/,c$am1\B,ZsgXAfOSJ.EqE8)f5N]lY(#(`*o,Fs-M?'ufC*!3T0@M8Jo'o'j6%MV$`Rd2J^[<f
%FK,+UVghsd/0'+c?=%D0?EQ[2SDJbX'TVn@B3T;8G([rGp\I%/fmKT4In#?<[TD09NQOCsrB3,hi,@4"IbYSLGXlHP&P_0[FMA/f
%q=oEtT\4T]bInCW!>XJ#gk53Rq8/%#LFj')(gRh8hE#]G]dd$3*9kTWo'fu]ZuH&G1*di=.`W';ST@5MJ6O1=/c-g`W<`N*i'J<,
%aQ!e>=P[\0Y8l(6K-=U:K.d0&m\;.j*KttV3*b-OPo>Y6Ff*qG<og4Wil/7Sb3$/2J:G_L3IBD9arg"f/JXc$[64'4-eV@&mqLgU
%[Is6(c/!lXGG(RUI8_igh7C484Lk9rV!jPJ>O8gH&F'%$/Nd0cWimt?Sg*k2`2F2876/Be/2Dr2nL+.)c=,7Jbs$R"+%HV`L)$J`
%$Ce(2f3U$N(rm^[gT8IC@q\o7+_?m<A>NVTMBXcKTN]AO2ZF(IZ,)@&k3V[tnO>3LTV=d&(oD#C1M[a^ck4/RG\p=eY9Ra-f'$O?
%q4GN;XNEo\T_tJmp*j)(WO-8:R'eP%AF"'l2&bG8RhWhX;Ji37T8`G]AnNAO!Fc\eL`U%!P*L)W\>`Gc4Q^t35C$6WH:Kjp`2F/o
%1+_q7\g;)JrseXYUrkp^8/iHg).J45Y+f5X?BUEiCGXCFO!@qU%h]Y'/@B)D?Oa>WU<A-*1umVLVJ)9<[>q/"F%Z"+rb4^!n;Zdb
%,]4=J5*<\)$Su9,L3/gmCuRY,8//)/2AL+&?>ikcP=CK?)K'[5!mHs4q3,6'aHaY,HF7/A5)G9-M%Y%`%ieApn;@5]\H$bpS[\Dn
%T_%Va4:q@C<oN!/lieZ)004s[UN#l!7B<_jlPC[UB5-NGb[N4e,\%_)?J;J#pQ$A5D.rgU*c8Z?s%JAgX*7-q5r+/T1l@T/!R9a9
%;,RLknfoo8ds[V1]I5i8+X_[,C#jBZh=t*S'[2KIchT+X<Tt*f5(FKRrEOEQ='&/!nr'D1/1RNA*#9#fLMmNTrS>Za8(G"Yp![Ma
%b?sOj3QJr<3B`9Gm!_"l;0Z(jmdnXLcFPVCgV>Y2AS8$G,Qi$FC2XRhmcWa<jlbHThhG--Yb-?s/\H?&RcVn9gYOJem.=V<h)Hd`
%3^jn.5Nd$$OWQfq(dG4^.>O9oYhE@Vc'Rogq=JguE36DF#u^'U+/LA'2iZRa`m9r?:6e'QSLqrKA]dFTnb7`=Q1FZna/-e"B5Q]$
%Ep4!1hhO7[jiKI54fGhmlW.TN'PFq2bqH@P(=7&<2f%F34N)r+-fq\b#>ZQNYK\HP+G"l^^NBJ=6YW[mjRIQ_0@a%E<941U5@9PZ
%A]AH6&,X\_$UC_;LTN=2UY(W;PdFuNSE&Ii.,8AufRMI_'+[)d;!/%YWW#?]U')sr+'$#q5OloY+5Be^[;R"QZ"*/Il[=3I_<8`V
%-B>HM+o'gXo')W642BR8ZLOU%*Hae7SRk0?+-G4-c$L8%qNkF^qW6\,b'%RibujNi4V7ab.sKT/H#Bb\]_Hf&$af_Kq(c7^(joF8
%]RG/$[ShQN(E^_cDr9%!Mo!NL<deu9OYc7_ie6jlK))9crqY.AUF/.Da!/73jM?iO(WD<G8!*N7T?>Hkc;nMj(,(We\)[e(@%aXR
%0:Nk!;dM53J!B7CCf35\qK7^V'<%8)'6j#N+$G#kr"'L$goZPP+)\t1oDFnXq5_Bk:Am9Lk&K#*H?79mIc*tG]K@l7(3lbT"3,%N
%c[,c^C&^%e/;X*?5TNA.mGj4UZF05bI\&*j)0YWF`p$n2Hf=0_n,Xf92mpfk/JFTEC_aKA\^\IHe!cQql);,>Z07>6`jE15h:P[B
%+ij=fc#=$aasU5733aEdQEY7S`WEaB@)'6L.GGr(7o)<rH'k`i_eK1N[n=5OZ$LfC:!.kT`-FNpk7?jY>O*rW?f7;ojP6oF9(?X?
%K]$V.8%VW)HbZg39R8p.3tK)T@j^T^XkP9hNp62lA"/JU7e-'"'/lp@l,ZMuphF2c"EP[W[N@YS:<=%oUQ5SCF8*rjDeo=-O2f3(
%Z]h_tp%K2)<Q*eB']2,`ld0G^hd$!84QD]jnN8G(/]2\E?NVC!gaIrK=&ki%3-VCR*JPHn(Irh]V0r#SZ[)a!hp]3la'.e%q=LW0
%(5TG$g3\I(]iFj7?/'9]87YTfC?F3t"gG%Wg[2,VHs8S1DR'3)YGRf(\\-Huo`p3LK=*AuNN_1fGl?Gcjr9KV7,ubV22Iae6V(EF
%^Sr2kS?F68)GbfeJu?q4D>e]_$fqW;?\<rSdQ,M:cebhC(q?!qBh*AsXB(YAre&.%qFPh]OEKKCb8U>"[Fi.A:*F:'4uuKj?[^S\
%kkKI-\[WXR%2<rufBn><9CX4lp%ldkFHMWbA^17"^JYE0Mo&=Od#1WeNi*aF58mblY?j/udjWnF@YqkUG[,Uq#s(k-YAeHfockJ"
%GC$+*j1X=#H=\OESiZ=a8hWhUT46O<M"/L@Ct(Y6GA@H\7I-Ml:O3!+SQde8BWir0c_"8:B:g^Q3'iQFR>5a.iG?0:><"4,h>(Nj
%l^`D0P,-)b=]L[rZJ&'k2N,7ERh+p>*O?mGgcem<fMU,gW,:D=]t9&bj#cuF6,Q3b\%dC\fD)X_g8$h/m??PIAIu2^pW3833'+Wp
%9*q#a]3&u/?IXjBUDd"8q"+*5.!^!6;C['Fgi7+rXU\CS.n;KM1Igd)0+-H("kPsuo;urM92MsnN@_rdKn.FE*iueNN\G=&H.p[#
%V\`R,:HIi";6eg&mL?-?/7.-#5;-1^DSLJjpp5*-PHJp)Vpr#Bs3/Gem(S/;a`a.s5\I.B`lI7YJJ8g,br[V3puom^eogH4bK>GJ
%qu+Bi%sjd;IJi)9]j/>E=-PWbd'dL.rDseJP)U\YDLXaW8XID?*teH8HJ/:(54tO,b9mf>97HP<GI(1\[Vk[oe3qZf&7@-of3aip
%5*oWhfNa>T390\jC1UU6?*:7F%W2ZX^0?>Ci+UA\>U_ca3_LL*]Gi\o;H20$IfS'qEkmJg?[f8,Rk8_.HICru@/iT*9C![Pj'*mr
%>7XeWR-21l&,?G%+S-QEa/9uXf6k+++I[hl8+'IKqJ0jqnHpqX_a\3_pTi_LIsu[@;Vp:mX=SKFi0efJfp5e=BZX!eB1MH\be*Y.
%^k-oXVc81rSo&>IjrY!J_b/b>@>i@%U"$N=mVI)"$J'7fc1Z2Hj9su^4_ZRO\+5YC!IF8#LXBQ@X$u'bl-[j=o_Zu#Ch!@;cousP
%OA;ptF]fda3%5j%!H?lo'7YYMr+2+F_k#+8906KC#b$YP.GV+-^-Ds?h<"G=J(;Y^BP2+aS:>[q8V6\nZdQ!=I'DTqG%<2@9Ok-F
%hcXiMIdM"M*m]-2L?_C_.\7QDNKr7=StD$"3g=jRVj6?[4$N<o&)#R,n$!=kKu9,"Bf)M?SD.\qbM1ltP!EkIlhnQd.E<A[k+0%#
%\/VVYm2$6;DiF;g@s?,.Q]3&FA&V)S@ah<(gKX5=B*GKi2q^N!Bs1jV1Yh.;dI@)->&F/4rG6UC\YFN?^2+&3G&J0M+5J/O2F\V,
%8Y3YD&+4=sI/o,X8-_iQap+6^@rUM8LHcn%hgL?61agc@h>?XkpBI1mBFThQ'nQ`PRC_u6QcgGsBn!Zsr;M+oX1VYdh(M!"?EUO,
%WOpQIVa<2Lj;HEis5*/q+o43G]fIFBXU\!Ais`DDVp;#TV==??0oVO.9:_7;o0Ha<rNro!kS?K(86]h!lS$#E$nC/K)OE#'9RJf!
%OTs=qYXh4cf&IuJ/85om@'"Uf>X#jQ\`<<hoH..pS,"pA9]PH])0htOcs?\Jk`EJTHBe&]q4M:cP$eFsli-jkYJ5Fh<q(9YIC9Xe
%'#!,ZrDrC'qqL3KcbKB+LRVXh9;b37Jo;D5gSZ'"P0[phqT5db=W_;&qCqemp8i;is0>h]\fVumDtG%+?Xg;Qo7hZ1Xg_?W4V5-/
%Zh)R+qRh5s<-VJ.ZgTaa9SOf>p^7>pLpCL!Ciag)h%/jPB'K6Bk)W,CJ#foif,M*IeO7IRU&,)V=t-s05A[FOgeDiOh#;Q0]8]IP
%]Z;8grPJs]X+Gr4R_R*J9m/LK77Q&3kT5/![T4gf$N0SZCIgh\YEg]@_B+Z77h:In)k3mJg6/E*%*7jUE)`0n5pBp".t)iXBKrH"
%I5]jQp$ruocFC[;S_2Aqq;)eqg=:,eP91;fkerpX\TiV1]"R[2GRL*#0'/6K[hk"CT,Z!f:OYER?9WWV*^I2]nndL,ET\8g9^G4n
%XH*jK<u)k[SZc)^38N34SjGd9'F=TTO!8KU/u]bmQhr>62Ouf(oeks=DcS>\qD-9t?QZA6TAM][W")\`NpaRYEE_9F6tN@_XsY^>
%_CX+bpHG1Vb,=V[O8)&jd"UqUq26:u<Bf+Sj?$]V00VShA-fCk"o#KAKA0bH=3o)8hctH@;)qs.]:RLV.luC%-\cZLU2Qm7o?)LT
%%c(&%N>6Q*SO33DDiJTOGuajlpi&`Koe!.NrH[mU:RXP:Cqk_[Gcu.;B;tIg''DtCK6h`#?[i"<N_Mr$qffMb-S'>R/`E8j1kmZ%
%hdbM-Ar5<?Z:=i4h:hY83[bu5ggc_>emTc:[Mfk6Ks2b*(Y)tI(H/][^:Yo+Xkb58r8m:'_:Ac"Rp0[&2P?*/3cr<[-KqOAWS<\b
%44TAHlBK&+c[Y7?cPpNBdHZLJ`qHObinA[Y*o-G7hK>Nsce.nD7D73\p$"[+2if$2I[%7PX"?NrgUBccFdOphhM0.fS!+l$gq';N
%s7\p!c84+H\(n"ogNhJqQ2,Q9l>ac'PrXUO4>#R(5/!j`WJ]KgY["-9:Vtn9\Ip"UA=Mo>;7Ya">$;(iD"^YbiAFdTc!EVA,PO!O
%%>h^!M]DTqV@bm%%tgM5hOrP?FIHV]EDhs+.[;tPg^.0V:*j3tBtXTJFh\g$ZDtA2Bt)b8n/_GoDXO-ee/Q!2Rb7^(EfAV]NS+RE
%AM$q`*#os)'9kM>'g:gdS^+$o]E.qZJ>,/I0VST\/0:8):c;4Q1%qEB-sI"(rHI5BgICt)LtSPELt#\V%<ML>0GbhsbOrg(%"Fh'
%X^!NjM^)osR#<$TkCfV_#2EJ1@irk_(K[Hpq2G`0/ts.FVc<Sp4ihag7WRls0!%"a-bL<oV.W)hQ#!b$kAhh/<cT<".qjM5\UL#J
%<"!aVIZ?D/21t,'?gLZLn.EE`KO&]O)q</9K6LO2IO\&m(.jPJ5o^?,ea6;gTLLRnBO.i\jNESi9+_n8F043\9KH4N\F<nCfaAZf
%d1HQGYSfQP&>&9odiFjG;5>QW-PnucH[nU#h%.fJh=5-&7+%cIj-$iqKIOF!&,QBd&`)OH*5dY'G94'Ea]eZ<C2([-qe_,sEH5UR
%0o7F9@kl8Ei\!b7`S48*Q\%tS/S"t0IgePu+fa73\(\7]DYl1?6RYE2pliGe@>lct':&@'$?jcbZ,+dS6:acI5\L<h6h(')mTpGg
%[>#_/Tl$*tjVOO':>0q2LKo_15+V(ab:B*c5UOFM!i)HX$mX%C&hh?o68'8JG*oN=f]`UTY3rHO\"Sa.UF>cNhfXCnF12WbTQ/]$
%dgK5uH$5WS/bN;X,24e@oX,j^8k"Z'WH4$f;MIA=W--iB6,+?9$?<GeRZSjGN`VGaBoJol*1PqE+k`G(a@Ga<TlN$UU`^Xt6fkO^
%HZZ>]hC:M1"01C\gVu#.iS]CB^YS/s0S[YZ!%'1brnQ(da7.P@7u7>bUJn;9Ak1pFf.7,6<Y"ubdJ;_kU_P_T]aU^T<#HbE,8rQ+
%Emc[*KO83)`oj+*f00_O>l5>K^Ks[Hq19kf0J3PIY2L5gKJJp#M&.NZJ555Sn%u+:iUEK]UJfm>q*fG*5runs1&Of$X0GcHdZ#b%
%!`5`i&Z8s=E"VcqJMglmX<[&P9T&TMB$jF)aq%*(iPZ8U;crV8eqn<$?=MfIbU1YcP4)B4"&/>Mfm<S(g?d_"T@46&a1jf!B/?o@
%o&h+<]JR7mZ.e3dBlMM)DnLA%>DDBb<;IG(7nWm:0bf*^00C2"o33L!D55-(*uoP:>j;?d+>^hgq[RKB?/b8PqX]aKe$.12?VI'#
%*5hL'=*0q'@@/,9`UR4,2;4MXBFap\Fu7gWLAV[4PBl;o+D49Fr&VA]<a,K*jaZQm'n(:/2(kI%kQ@_f+2cFZVW0pEgW=esjg(o"
%]^'p98\jJ\J%0dE[nM^1N\"f*I02#d&1]5/qst=)>'AbDFe.&P5V):aciR@bAOaXL1B^UN%2L)9AnlV3JmTg;l<#U?T--&C-:-&;
%V?4b`ang_ZBtHZJ`=j"0bAUSNe8mcs-LS`,S-Rik^8CN4/QY(3o8clW(A9uf`5qgPC!H^t9p^Q4r.1.(a88O"TP=3^p1[iW@+%"+
%;;X3NWua'Mmi+a!=A&qm/C2Qb[!3=ZkW%IBF>!0L"_k7:k8t3>]N;@ePdc(mLjFbmQo=CeRd95cr*j?NBs:bmr.jq_`U^`Y3N7hr
%@$O55Y<daM\C'p.@[aHf'Supb`.Cp<,#kQLB]U6F-r&8'C:].;W"I48;BfR1=QL.\)W2#16I\$B=\8PpM47B%_&7m"_,UYtooetU
%h:$NtEM)I*1:820f*n5'eBPV.kNNV3`un:>6Ct;0Lhraf8IGh1,qT+.p!=c#[Ci$h7#mKEmcInf4kj"&YQ/XG9Bmm\oW/1PB*fF@
%-0pUl-U*K>dL_m:V#'T*T7=ZVrS6srh"u;cA2Rt.Ap).Ur+Ri(RnhgZ*D3>jJ*ai9l956"a$h`!8.q%Y.m_%Z";FOcocm[M1C2IP
%"r!lA]tEJeoN=FIZ+,778>_Y[e6jN(9n5njTHRIQYYs1mf?1JID^9=j7a`<1B^M=fl#tna?5i@,cY1lens3jTUM4n'`8XcB>%9Sd
%+0_dYOFga]?o25c6jc5V)_0f;KQK-UBm5c6+?HSGacH_&+AsL."d)-eka(NJd.[&lW(ZD'LnlI+ML_cX+R#Zt?;B&nl)q&facY"*
%]2^/h&oE_96"cS8'D;F4=GB2rPotb[&Z#=X6,A"P4Ye:"TjUqj(B@0I"?5dr$4',jFMl,p%>r*T.req7+E9=@A%cFOZ0K94aK?t]
%NFu>=!Y0D`232l&,&AdGY)WMb\PLo/dBT([@jOJ4=9N=Z/&@VOAGq*'AMXV(ap&N&p$B?QlRpG5*@quX:CtXN&gV`R!FrfRrBg7c
%h6*)M,E@UFJDQR\#GkL8Sd&qF/hk+t7leE^Ibs[i=-"]\#ssPO'70$cX4UZrX:hRc5TlA/a&=`qaRh<I&hcOA#)aVK?mQX'UT@ga
%V\6%^Ga2AG`!`h\]5%'*5a(3nUjdnd#*U0<0ET7?ang_ZBtKK9Q8BRAemYmjMLbqYE&Z$L,sj@h"DJ&j_3e_Don$$U-OPl6ROp9s
%ee9nE":H'DOs(K,H<,X9ZNQ6[P4ckq'-AF=VJJ/^@s)'i<3C8CYCgLO_6L]Y6bG`A5*cg\,S<VQ&gS/a^mG2.HGPcM&VOS(Es]bL
%N1BMgqhS*T2at9eIY-4J3WTkN-"*ej&Km<6g[/0)f(Lq`(OBuI+-^9/>63:9D3u3$G`kq*@CUU3Jf2s,MOc$!GU8d0cEN2F"iDgP
%.Mrpf#q41K+G?6Hl',T_6M_jWZl_moAjBM6?qDYF"iDgp.N"J,&f?=q/Dbb%R_-NO-mU7#TS132)Cn=2#RdH17sL=V+*eWd1j"V+
%*DB71pdcT>,X@HO";6Z=:f]6Z;K8Pk=f'f'B:4(;8O6qja"_Z[J3q]%"=5[tBWR\f&Z\^?M-QOUgB=Z:)=+i)9")>!j^!l.Y+1,L
%OqYcmj+q_H98H-MPouc)![8YZ!6LY'+d?qWRjmB$)N]eAQZ7.@a+?V^JI(F2P`dXbKmHW&g)t7Kl_Rn),H2m*B>QHhFtK@P+(d[=
%iJr<8B#JJkV,NauN[ETh;N"V@HL8qW=C"b,'"<I==]j@38I:g(So+?]%AXR&RtrPB;kh?n-q&)(M-VB7-$GE%+flfdk^kDp5*N\?
%+Yj<k(g*MsJI*e_PX<_,Be'f'-41k!o02FON7l(S"VUEkK]ksXW%q7A'Nn=iOAnj-MDVEA*I6:HDke&3R6pLM70J0tZR&579i.OV
%'I'VDgko($ZJPd7G+c[3.Gt-oQ!<'bo"*uqO>E(pOp@"&)0*33M3B%t/ndk=;R$@e-;f:=;pc.K`NmaQMB*M5EG8S3nZ\[J5p/M5
%&g[pq'G]n)+_ZM8"g<iAq80'6S4&ah1(p1P<"+sgh13V0!E6O+O)c`DN4`R.B4<*Dd,Gdo?98fN7d'*%afsl72%EhbZO+ddL?Ssj
%Ah0PhP&#LL<B@$GOX3k\jAHW%aM^^7+qm=CJ`W/%fO6:gFIea@K\m=dlb!?7g.;<YK<te2$d6O_('_<1I8.ZZCRV\(;A,_!"erAl
%"H=4(V$O=cX14B=V53k)at?W@nJ%3j_U_G6MBEIMZp^mg#q?XR6A-)09-jrnm5KTMI1(f7_SRqK`\#=aN0RY#jT,\l\N1K?6q&4b
%`"Jn?9Me$=;@&GbC^oK8flG6S55<N,?E`V-6UnFR#_<6t99aHO6%t1o#T=n(a6VjHBHrK2_"!WfTk"S<D;>CgF_uKdZX@1ee9i+<
%[GcHKN(d]=<tq]B4!,u-7m9rT(^ZVD7!(SGO<F[B(b-qF&W$'XM:-iF:r/Gq#Z@Z8^rXSh!$`^UC`0CE=o/]N[NZjt,&AW(b'!n&
%.S:jtLpS0O.h`@;/\CA?%%2GuCNs;D*g)aV82CjRXd#L:9<91+<UhPZZI3dSACa7."_Ed6H;oPcLo1i\Ng?>79aVHs'8K1D:0DHs
%+WH/rUP'n'#l_K>DO"rl<+G.mh(HZQj+r:r&l0XU80Li&a97L5OpDYY8m4TkONEe%68f8AU@-H@A]$4Di"cVBOA0IHP9X[<7:SY2
%6A3a@f^W.s.88roK\_#7koWO=*\a@ej\<W5r@B=,'7PX\p#q*eM.2BE'RT5#XG/2W<Bssf[]QWdqHi%Q`QDXHB."7YW(L%ROV1)`
%6m7.DePO5u@nN[,lK(n(HS0a%0M./@Kht<\)F4\/;)G.V,"1q%)QJC8LY.aUI@tm0+g\>O)\cfu0uV4/9O!>"JO=s0X[7X03Wc9f
%X>[#Z`8,!^7Y6eklF*[bbWr%8b%59SJKuZXPf*PjA,V2pZ,qqa)eh<L^Bq8`H&Vdf&d1!MHag-S1a1i]jg(\4k/iA:?pWj)$->;t
%TNk:;M/&8'B2#0;$K8Xt0bVIV#cOW->bJ/fS%V*Bl-k0=E^Bt]Cg!H".4Z'2BS\Fj$u%4u0.H5$.2gDbXJC%g.Jl-Od+EM5h]2GC
%-Y3O3A\5rOPO^!(`@Hg7;?ebc*`?#I0=#+GHps@F,0M`93b;soBAnl-R)^I?].'Hu@]Cp#=YpKC=:"(nbtWjELJ#\Xj_-N/2I5`R
%@o(iqh,5fJ7PY5`2hk<\;9IAk'cNeT1dfuS,Y+a!B9X%"-fFsQQP4Dak,*2?+89[CXt([D</E)WMF<R_;2Aa`l<BB$Wu<*8>AW)j
%WA;q.Ca0]N#XfXb;<i+P$4Ti:RXo]AL.Xh83.[K'#KI4hbfl!Z9f#+2;AMha,"_o-'L^f@&7K1-;J%7(Z6fp@gkr5-bUcsnRG!:c
%iQ0W!luCW%_d"I?5_PRP8u\5O6:E=+%?\*Z[;rUi(9]%3fgaCSKUX"?8@I'snEk4VHDV4fg?+bC'bdDZY:T@8R9;7+1:%V-aNQ3@
%FH%W)L(0-ICqA\"+kfd*<B@-JOYp!ljAm25aNR9O+u;Ssfp:Fk`ZB@"@\ueP&;]hH6n."*<2_4!THVa,UteX#+P[C]6$$mqTM0^M
%EYRX[&044O<JD*B,&a1eafa.*aN]SHaN^BXl'WT@*"2n4'=rQc+l[R";P+V%W$m@m+c(=K4/_I*St/U#bffT+aNbi#iE^#8c?RJf
%8<sjMP,DeU6!XU;lmu#>S3^#WdNF8%HA$)D=jA-A-gYYa+O`8_g21R_)=0=E;b42M5m]VO1ff_E&V_-3a6R;Lh'.cbL?g5c6ePTI
%U1F/+4j>#AXCpeeX#AsShq1GSdW7m_f?;L?iK9at!(MElfTNiX,$KR(Zj]=D.g\W?W^Q(SQ_7gd5mkG.$715A,)7)PJtH1^q6#m*
%ZNueP)!>N=8^8P/iB3";.M<oA&4>eTpmJRUn2&H"-g=<SgGW:C1*a>akm0W)<JW3S8<e-Q5m<fO)+_>r`s$+V=p`L:rDuqGEFpK:
%FBp)D68B#V8iW<70kV.C_IQ$8=;oN2VN/Ou3Ba:X>fbJE%s+=o"Q"04I`NX/&?/;hP+;nOO3eJ<S=u-5jH3qg%:s2*EdD-HKYF.l
%o^/8bRUid`KFis0=dCIIB7^I*V%>IOg5ae]p.onrb,qYR8cMV12Lm.-<c1k1`]X\a#lW,1Q[OY'rL54DG]g:CI'-4!]O5A0J-A$@
%f]'sF.4N(I<7<CP\g0[j-)1%Q*C7Z44"3Rh5c+R@m&U=DSmQ*7ja6Xe+,`CPLdaYSe7*)?$J!)UYH"<`74A?KOgZKGB;0r>BrA<3
%65i"%#J,P[kb\LjOd8U=)+Pr%-rS2Q,#s#K4KPn3H'k/b1emfROdSRXPV[Lt+s*(!of,6kMGf87"*(G*GaG_pKZ)PUa/1s[<FnWY
%q1_g?_ORFWk\WCm,R4]$Db5a]ZU?6"',4R_Kh-+#ekg+I/Z7+B:468;P&35u()0(@7&X7_PaVn.<0T_r&8=440/`'a7<m+bP5_0)
%CumdCm@8mE2s*u`EinPmd:d-`,dhl.WRjhfMV4,ZQ1.4O2VGVXK@2W85=g!3g.W[D9bCC:WC2k);2Aa`)SSbd9)'Sb6Y(2)jDfr,
%E[oh<.7EApU6P'O.TDX!ck'nQ;IUsk87Dct_**HcQoQ/<_sC6%+Zb9!WXL$`7F":=P$+c&OdMF-,;FhF%_LbV4:^MXnCj@&#_@fP
%,t^<q:naTt,4%R".u?8t_[49JJ[ZULnKuV)Qk+&&!HO'LH'"mRW?OU%TO9>Q&Rq%S-"_`QB;,sZXOnF`bd->pQou7K2,Ccl_Xk")
%&4.L+bS$bj9MhFW'S;'1g[SI(=gOB?*?6<g+%ja8:aFddbK+PEZS:pt+h[sZ*QcM=`>5X0p6qs`0g&@?'#7&_%We[?#of%!k[1bR
%h'Wd$W/)oD<MIR'-q&)+%:GuD-%M,HfkEs6Z2!@;6UV'.#i/(:dN(W-JjKSY+`0S=bG=foQ<?0>Cml^QU>+th'Ek-4#boHA,#MlE
%PTb=;qA!^IBg:$$W2V4!#8uOe(1#7`&95-HWNum\1di4u$H/q)RYmmEa-3g*RsB8_'p>lK:pNkU\d-;888c7@e(:jt\-[sVj=2:/
%;Gnj?i(GL%=]MnbO>:N1+_=<%[*2U7D+hA0ntmrjKL.Sr&Q(m;'TG\P#SBNF@`N7iB%AeoXP'&6TC`X?AI$kMD5QtGF54*nD>8CD
%?B*X20i;cWl=-rbPa,(a)hK2i%,^R]b$khS:dnFg8VC=\KHTZB&equ,"X&.A@4J3W%9#R+/;!Yg08ZtoF%kI767=*NNM(sS-lS:&
%&L+_c%9'nj-uD>W@ufh#8_I`pK64sdbXP?TrLBN3!YJ=r.(qBlT]46>.Dlpf"t;,=]B3(p"=`qKb3U6JAgBoOkmK``8QI/d#m6()
%.M<o0*N6k%/Z3DEP*X(HSrB0k%7^hPkh7clFcrZ*fde;n<c7?2F:Sc!j@g^gc3,HS9MskF'S>[$>=6M8[[`Me"c8Xn2NU4FTSnI7
%Ller2ajFm]$5KBK1dp&Xf1=2)PW?qA-?U^#+%jg2YU%t@CU0EZ7m@C[TC#Z77W-Vp+LZN;Z"(lN+5`0ZRU8mu)TIAN=G45f9rWrf
%Tr3gtJ=O/!,cR9+8uIq&ngXu4p/SsHa]f'],]=H,^/&rG>O9W^8%Hg!6A2ut9$!'f6:E=+%?\(DadoC88CL72hpMf!0LXNX].bX$
%LD`Ko9*lNc1m&q@=nOAp[*jDC'&0^6Le>jaO+Zl'A('*f.7?9N;<i.Q$5KBK@0bdqV!55qZd?&c;d3U=26gA\4@?d^2TD3X`o7i!
%QO\@cFC?Xb/7,,AY9nE8>P9pU]s$)I[lbVj^1,iXMNRd/A#)R5.mTDUZTD54(W;t\MIN</K'9Ku"QT26'eIp.<Z`i`ZIlpiA)K2g
%f@ar"keE;8P+G5#<=DH<HpMQEanW#JQOPR/cDk,c!7/5G#*GmSMT:QAQat_j_MZTDG-Oq#9K?4OpCn!3hDG]ojbN(,&imZoD^6)1
%;H5sf,gA6g28qI0KBB.ab)oRG:cZTu<8!QkQ[gFT;iB.cJ&b83n_5HP'XtGAOB<H)XjB%E/OHj;HQ>b#eE_qp..8!bCTO]$;FEE=
%K!Kq1K0I5086-61Z:omW7kTm$_TNq#7bp/[Qmb3rfX2nKY+Hj#:l,d>&hqm/<\H:2I)hAt0WU1?RW-pF62iW9d]//%lm/^%SiC=0
%fEKT6+TY.;BiSW)E`$*TA@-!U"^!l9kXWU&)[''6N>5ibhe-SjY!kUr'#d9;"OUdt#YJ8HQl%BYH82!:/TtF,lGZFckOWl6'D-s6
%c7TG.-[W!Zl:H.a`6b$e_)C?bUK&gsbi7/``]iFL)dUYHK48f9WCi*V:,Q<s^^_7%&Y%U=Kd7kS+CZNWWX?gLNt!@:IDh&@)PnE&
%-)-WV<?@uu,MN?Cf\MLVTgen_M47B%&K-4S\0NCj$EP:=PEaV]&hn/]YXGkPi8O4:(^,Pf,BaY*)$H$17#Wfa6A"s9C?.kL5JaBm
%Rg$!IC5/j@lm7icBj1XZQkU,%W5N.fACX"V`HN:N%C=W1:A'UZm96[V5s!mTkcg=4R?murk_:+)om?g%/f*IM6ieef_Pdi.R]T19
%c6d,q,3+oi+PEc20?I7C';c)M5sX<?`C0Y-OkH`;7>%':(o\g^(Rh8(G"ooTH0H$iZ'4$8?:rF:#I:tj7Qeg/%h/0o=\l_Kj34OX
%=bJ+T-(Z7/)O%K+"(G7]m]q0HPB"a].Z[NGGC9NZYaMA&,6d<GM>^c?0c>U#>ErTd:WiN&`i0*@aB"Qk("k')P3Zd<YD$A:Oj,'B
%'1A^N&ekeX.U]?EXC(1_[Mto@V;WV8"oTuB!SMTUVQ$An&g:s>Ju"A/A-<15]W@`H,X\LL3DrI/S:ct&CgR3kG-S^AOnoA.I4IVC
%>6;fjang_ZMAo"DR^UsqP1:#SE`ZkUm$;V.FsY/,a,<uZ&G'0Y'^']D_9>ngKOP69-kL/aR`%)qMC#AN*31%+qM,1k&sj7E.&<%6
%&XD$""_6)YLfjP]h6)$+5U./?D^YIF]U"r@rt'%B*qlDIQ3@];M&&uZ0+3^RRCnf0]L_"klf)$sg`h)Fi`'Hl&5#'qO<B4Gj4Z?9
%,7(/-&u5D%Jq=*0HK7X9WIeX18/3Dn_FV^DjX@aq:3.Dd/3kB#@0DiE+pDK4L^[^B+k@l;X0c51/Z9!9W'WF\FPqmMP!mB1J=p^)
%_;\Em<\LaU`Kqd4<?!Pg=U:J/D^m/6R_OrH+t/+>-6Vh67:Y/0$t0.dV1N[8eseq72TqD7ZJ`_T:,00?lbFq/l@oh`,mAG/_c"QK
%&jjki+B^=iBKVoR'#^<41k[CsO>`:;"1G^V3i5Ch[r"tRAIqB[2'PY;Q[hCe.74pqA\[-4E1d:rWd[NGLT,()EJ?^C;0E'E;DLed
%;?u8PXrO6k-Ek=W+B5l>qUQ-UUC6ouUK6k;M_j8>l'.T%RdS=?cqtq63tWb09o?qhHm1qZ"/q>4((o';'rqTkW[u?aki4SudKcDI
%;c$$1dg8W[R".Lh.0IhV[N_DR<<9@n^q-I^.B(NF'QG^8.mnkY;^G%+$je+VU($*]`O/7WM?6>hlo;AQTZeIgjsrb(,TSL'l>V=^
%"f2VaKAp(>a=tPi'DU39=`U[Z&S#iuNKO^J-X\sZ;Rjfc@RsT6P(YAP9#q-(Z:#9qWNmt;O_(RB,CAc`EgnZ]a)_d&8k^DFa:]eX
%9L,;EPTd,iZJb1^AD9\#-@$sc]@tuINKK8W8i@,;3bb"IP#G8B=(4pf.UJ<E+!iF<7nQe`(FbcWS70i6R0B3sqb#j=+OWUh<-kK2
%OY'E7EiKb`8BFKf+sjS"nf54jbSt0[</*dHb99DI:1?OM=[/>tD*^e79&l%o=hjM?4QM>4#a2;86q7_Tl,Y#6A4i);I&a[kku^d_
%knkmoe5]sY[:SZ]&->F999;3(TL(pn"3mLK($R\p`US%dY]!ZA2BM@7"Z<_GJoD4_-?]gAV/p\'_d^\f&s@>f5t]0#7A`HbaJZ<m
%KT8X)#ossG9[52U^1_"Q>Yk^"OA9OY<73K)@g.^JfEu=#r_>NJS:kN'*P4RqY+@TN@B[598(g#T1YK5U]%PuCV54s2-<9j0qWM%h
%3mt8G\4FX]]-UUV,5/,G\uQC.KLc>:;!FVc7A^bCOA2"U'kFBMXrq3i<0/KUo\.[FSM4NLQ-5h^A3#66QD7ih+-@_J0Z8^1O;.q\
%O?laie<Ts!I?TnmgBq:ZLlNI2d\0$[aH\.U)-([X+CnIQ6-+dujaBWbRIZHa;BZ`@IhRq=S"d0>7#!CJl<5IoZkXr"Z3?Z*B9S&,
%bNS4eh5A_B`_Ha11=%>dA$?DeEA?N)#pCH*O:X09"]n;.aJcBnP`TIW.3VnReDjKu2Cq?46m2[WKIftea931a8f>JQ.1?,E68iqP
%R=dIBFW71f?->/s50EJ,?keFGj;#WY#rsRpFW'<EWT'K(ob"K=F[=)`i!Mg5@APDWb?47JQK]oY,pC](&QF(T6j6de)9AdLkTV<'
%To5-D@Ds$0al=.H'AKBN#Xg(DU4e[9-kqn$cjXV=&kZ1>&<tBqeQi>ip+S's^<\PKLlNO4da:F6Jh<f-jAa++8BH_j8BIrsWpA!T
%*kH&763nhW/j\cAJdM[X$oEUr>!^7tX>kco?']o&G;GT5eY[N^V(mXcD(U&K8[uj^@RsT6P)LqXb/a]#A19qiV95Z37`Inr6?_b[
%bqF@rFlIEi66_)C&L;0D0qk)<?Pjo"]5-P<qBjFjgk8Id[pL%-RLOQ<-6Mm4M#bR6Ri.8'RCrB:U<%,I@;9^k@3o$<Kcu[SG3Ka<
%+$YV`8l?9GSJ"5b;bC"#Um-EeWe;n.0F_)/@0e7Nc0aM)LcO(0Q+WJLK\7VCR#QV_5:H]:OKp%k@&<\?_)CnI:")4:%GiN^77i:F
%(PpMu6@se1V$nVH`NdM#[/EP3TVnP;3\tPRY4<3d6IOU$Uu!GscqheL.o<u)"/fuqSq6^fGE/;g?r)Pa8Z1R,P<9::CaokS@kjc.
%#tYJi+JiIt$@\3`O@3YY#R-Dm'+QoXR%(W%9pHS1(W<Gp"O]l$LlsP/";H3OV2X%6BaapcUtBf'Sf)Rr-,9.ebbLb@Z'f%opNUDO
%6ghLT,kZK:=LC3<YnFQ;`t29Ho_hjSLnHJWX5o3B+rq@`V1VB>:o0D-KW9^.TOTj$"Wt(TdVYK9eEdZ+h9bAc0nm\t>D\L`[fdBa
%SYZa'L*9TnKWHSPK^>sh\#W3L4haXQm\HZj+_6EB67/?J9.9rl<H0T3]MK<XP8ESC:L?82!Qoc#:PDV9mei@nh>0iBZ1D,@^tmCq
%CQXe/<h)FsVB+J'5UkC9NBGE+e=CFBOu=^Za[k$fQs_HHa^Z/#UusE;.bIXV5YdS=Tp.*49e"`uq^XZa^Xu-pCKci/!YInf-p?Z=
%6(oBX&2m)4mrohod(G$=;Kl?NA!+2UmSV;N=f;"abXXEd;H$Y$:6p4NKWJ8r:Ltq_MoRU*jas?ukMlF)6q99(7NpGL,tRn\5m:=^
%)9AaKi$'<pJW#3*U<7[o0$S;KN%RRb+Ts!B/5\aT"N9nM-j._U[N[l2TdYH31ftReI>*N"[\lu]*>)WjLbr,+Uo=J2>Ua5,UFNE8
%6<4dc6=q%hRHdX/G/KWKa<2$S%#5tu2aN.H-j#C$3#9hXUhr)BNZDf*D5l:F+L(FF@h=Z/jCCOaD6fB7@=tBZ>7jE3YllKp'3$Y3
%8jGG&%A@;`gJ#`AJWR0#j`._O4=Z.B#Xm<IU4eL4..i]YKFq,UqjhiQDT>]RP.],h0_;m<%HCE8e?_#g%"J%4NhLQbP+'&015"(l
%VIRU18B4?T+s"".UN_uE\EqE&F[O7l#pakq"DR<MW$"\HJS_=h/s<IP\4FUN<1`@'j^f3RSq`#]\-rENL6F#o3!/(o5a6h#8DB5h
%Z(_5]0dpd@$4U/.*_4(I"<oF_-p9@<6,Aa5!m+D].oNY#I&(5l&_@]Tisr[Ado9ihLn'>j:cT:?;5'VHJQ>SeMe&?diCG`$=$Np-
%2tcFh+LA^rjF*$Y$tC\eB@dGd3c[)/L?FdI6k1[kW16hQW8L;t!a/M]Kp&`X2'li-]p>+aUr[A=\Z[PZ;i$O@6jY:U:ad`'#V2]%
%pcD(#nIhEbhIUDj0W\tUp705p4WA^!AfAcqL.@GJ8o!oHb7%:hORbWN&jiid;R7"Mnc1HKQgQ<("<m!_b54:.akeL5g04l@VjL<c
%ZE"VR8Bsg-,<<*gns&MY5biV\Ep3?*Ka?d3PY`D%Kn<2,RNZN:9$W:q8C$QpRm#m3'SA5HN$Ik\AdQj`c%sehbn:`7.:jX:.]u3d
%<YRfF##-u2ThEcAngmuW66PN3#uZNl<%'/+TG\Hq,!Dj+R"_-R,sRQa+YN>?j/G,t/Br]-SsBKs==e&;$6_PGO;u<9BRF!DLp5nq
%FegGfWi>_<aV/sl?8M,]]_r7m&4e0++tDiFJjMaP6WbLC_<[h.1M<sO$+;G<NeN+Xn4`-,[$VuV4:6]T4()Y/?W55o1j*ZhA>,Na
%J(LN2KU^NE(#7"W9AO@!_GAcHH?b$.fM`)Ic>HK95!LD`f^U+H20QqV4Z.E%)*N;6R<VtCH%n'[,S.X%<72cjKmlo(=s7`M_T]"]
%ifG3[e0#'-A2m6VA6S4I&8A+38P9@,F/BWpLfJSui+9=lJsXSZB)&mKn-ik>8:"KleCt*@qN3kmKG>3AMN`?RCm]pCfsg*XO?fqR
%9oOhpHHbsH)\q$H>7q(%ZAlM0(a]9#*K/TrPC5n3.k1YW&4+#lc[oV#$F3sY-EBkjcaPC1@b;)WC8AZO6>`ll#DHFbZGk;&=BrU/
%6o.q^5,rOpV?DkN_YR.([,%m=ND8$egNr[Fj]uDGdN?R]ISBI+bL&1Z6QUCG&SW362H-+%+GmD!QZSF%-Em1^02qW]\D]Kj=Kspr
%$>q>"3EYD5l<65##r1VSm%RnM=6M:a7:Q"XG\BPh#"k/4D""V<Z%2MRR,bCGP^):\.1ra'X@DaF\[3X#S7P2@.<5;!&^;`od#:5+
%E)cpK]s)t84`*-p^IlClhr)VEc14!EV`;c351Y])5O,9^+`0W/[ZQ)`hMD'@O*q@anT0R,3DrI/S:ct&9]RB-Jdlf`6K7hJ,(5@l
%orS@N?<BGWY.0T=V."P:E#MMnfpH0JC^["i_-\0PTZ7qp1\81'>JN?'96!l#-t5VVTUR)A/'&#kJt*6PD/o5'?UA<>(5\.lD(hXM
%.#Gr%jLYQEg"L+E/f$\pd1BWXNs:\n9@9,G;$IqRM!_@7E@$6_>1+_=4"8gk'^-b_jN!uX8DHlpF\ei#\)RT<Dkn3t:q2hS@Fqea
%XMgq!7+4"!)U1#Ck-7\+N\8Ajj&%(^aV#-!#fKQ<;NMP5$rNbqQkOm*-94sr`["'TED4B=1<(`#.bB](Gf14#,[+*'_Cn5)@8Sjn
%<@J&B</jMdX(gm"ad&,j.j,9[2Q`Z%TZ=fp_*V&j#XTGj+<%nmJ;ao3rZ9T3&LIX5dRK7]Op!)`QKdcRL-ndL*>ii;_RC5BKI]pb
%I"D^mU_#A6l=pfoL=pJHl*;9(pjr\C/U"Eh(LJ(M=]]5p`q(j>6WDYH//T$RKd?7^PYs/#OW%)Q,Z&<:6GM/nKmlb);9MlZ#=oOC
%66ntp(K#!o;alCt-q"stD9$E=@.M9&lk5,-HRJt`phE"2SaMl?*p!ViFI6:;ajV(>*\XmF250/To<;tO6,[O-$A)]+'n&4bU+H/6
%Dd%gf.3p?GU.RA0-rMH#O[Q5Q0ClI_]ZAPQXup':S?:bjn#h<T#uR9`P]@d5Ko.9H)Bs#gP5hO##Yo!3g7!UKK/g#H:u7?HD(D>Q
%>6u2]ZP8!RXEk\^=j_bpgn)kJ6U@.6Y&.&0V\&AYU5I8CMCP>3BaD\iJsqJIE<8)*48h"Z8T6Jt/)Kcd"?5okrb\3(P%A#e6!OO:
%gl/2Kbn<J!6m7^uYr)kIA'5U)G1b5oY<;5f=AT9c&ERLl'lG@s:_ACP6_s,EqiYI?itCcOhA^"X5]M1`erWBrNLu*:fU4`][@^nr
%JilG7o%p%E6IF'0aN]UiOdhWo7;djiEhX$l(s-5li4G5_#Xl6QU.RA0W+=.T#,,'9]#`)fkTVghW/C$o(QZ2p3/M3F)%rZ[LT&(5
%";MiL&8?p,'e(ph)B^iBn#XnNPhC[2Z7!"*+_;?"W&ff,<0/F6OjpE+(7A=Q!1=^(2%0Y"#)V1F8g+<]/k8l\\O9:`'I"![GScc.
%D8ut,m'H#)CgUJJ@,J\kS!p1V%-oOX5#Ni1]-\:-;gJMe`F4TQbUcU_RR.:R<Z=[DB#^,ebj>5S27sPZ1^si463ouH=e^#gJtbS#
%'I"!K[c;KbF*cf1>muj7:\)@0p+7o.l]6FZ*<flTGki5;@FT+*&t?P=@ZjjZg<!L&]3$I^j&`;rZY8t+AS,shce`\hRcH)"J]Ra)
%;73GK.[a3@+oFsm([5(Z?_h<M>/!bTZ2eu_gET#j6mtj*FFf(=6:DS4%?\(DV.W4!UhAnk\uq]"Hc+<+b$>WXL(]%eM_P>Lb7,jf
%/kRPK'ar*_#.UN2WnN2Z14ugsY+uJX8<4ud*A0WW%g>KK.%WkB:>9_M2+-ab0KG.cc%]iN8!PM\_ajdWjQZk*1_U8:]L<u8bn?l&
%9Mij"63uON)bWb;Q7]#aC`%WXf6-1p;o=2RLkI06,H=Qr6%t1E6lI7da59D3m#$UPHRLau^lb2j!UVtDT&k/&Yntugl(iK%N2#GX
%@Z+;$.m/6.e?%A0:pV(TJsohU6%21f>Zh%FT'd6JU(H^j!`aRsU67Bf&AkP+IK_U0nLLQ+LR)l*Q"q.c^9,IAKG(Tk'jd3!:_*_#
%,G]0IBN]2cTOk!tV(3rM#/@-CneQe@+[i!g&0auI9Hf)Y.eTm9AQ8gub=knHq'p^GAE/nA\Xu4,hhWc]Q7/bh6DPb=cO+D.@`Jf)
%D#;VOIUtYEq?:i*5uCBTr2d>&:kO1kPA/+>fi'$(SfpsbRO'Fd;[=Q%C1A\Zc.I&jRN6SHcVP[,F=\hn8;L/"U3&PNU-_9_+q9[C
%j6p2f2G?9uT&d"?3]g+#qdU]?J=q[(\iF6%H&0i.V*^B"?8F5b7MkA.C@I,R$l2pQjnJsid:[fJ*L7ggDMt1A8HgO<;@"D@8coki
%=UA?oA/8+XWB:ZQB>g^0KFeGeY!\GV&5Z?iLI.dKdPdo6XD!-s%'$nM:=DOA%kmqQ-:(fJ;FV4K.W$JF][.dTi,XM9=g=EhC*6P5
%R&\P^G4KX.NDk]CM%G.E;"6JrW#c;-7Sl4*S=I%H"AWQ9GKt-1<mkR"M3!6<kq[V/DYS>2!J<d+O\6=CUs"QDS1IN/QU1s$<<l//
%:<&SMSF!RGD(:VD3YiDr,XaX1;'fKpW)+([8403?Gg5J.TfC(`H7*^COQE^M<,or@kumMVDgJD;Kp5hfXN][(AR7/9.i-/n=c$BW
%PTctfG$:EsLlN@F3foaTJOndRW7j`RQ$b$6&6>WiMkmFB/s7stWq]eO`8_DT[Op(m,9[\o7#._(J.bh[LdIm\dWVF^XD!-[m+?Rm
%HWe9WTY9cM2`WU.+f#Mh!`drH:m&em&=Mo8hSj#.d/]AAOD,kB7?@=fP_t.hl>Ym[4VL1i<C'JN'I"![GSc2sD9)1bD!HDG^.QR4
%40`WM=IHjF2`6I2^*UoF@j+/u=b$i*,:LZ3#U#AsLdI8d7>iT8Rg.BD>I5YLe`1+Yr<Nra()S?,M8`*/b#.bpeUASHqaSF=a_NG4
%2m4+=QmY&?LY4St))EKBVaMm#Ya?j0H7>4b)[VnO..XRf^=Ul49;a>dA;?5f.E)^l-m00S;H6ObNC!mo:_K[XIVG;Zo&ZS+gU&46
%2pW(Omp#pF#bahS&fO2KrM1"36HXnEH>2E%H$sj)K1/XL$Hob-KpE9J7L=XGUP)$t'SR)bS]%X^G\QIIm4otnUa(mT;ois79;%Ag
%[7%!p#qGS26I6(hX%9fN$VoVbp>qFJZE]^dJM\@6]@sD[]-_luDX-l4#NX]C&1L4<P'A9FR?sS0)MJ_hT+7/2gl!acf[lFu*Jqhi
%<qEho&0`:?^kaH[9MhE,$B^'6g[VcC0XN"f*D47dF/S0+Dl5;/4R1T(9X0BA[Rg#Z&<Xp^MnEXK<\,l5=H-QO`[n(`.;hI>#3CB&
%XAWS+MIJD./6)k=<%3J36D]g&Cog#WnhCM%hkBr-=QkUbDM/Q-;*IHKiF@HH'iBcD7,!ZSO];hn,r8OAlt$bH)>kFDFG7"3;T92t
%WagfPOYDJ#6EAVJaN9;DaN?EQgIX?gj#.pN+sD,E,V)=0-:Y\KJte,N6lJD^Y2JCbG+:hAll.>FjO"OfG$k[C-LtT/]hLF#?FDF:
%LSQ4>_TR`b]IZoORB[1;Wt#mh[#FBQB\?lc/LabjCeqXF*"a>*AS"7E<[R&1kNuK>oLO+B?cD%=d1sbDVVT^I$W$0aT,s<djHilT
%GEi-[KAEq/IXht;+b\2PC)np\<uM!#;TAC+F(F]AL!"Z+&!j5F3En#hn)%[;f/i@\Kmm1f(R+D5E?jR4CQ4Pt?7e2t\Uan'8QZJA
%q5NR<57MbHPWAlD7]eO?5.&lh)&dY9-:@08cRW&T:h2RR&!dU%G#7LD.D3eW'(XG!,NR\,Q,Z*WmHp?P*Fra.Z$%OAXrWN@<D"9_
%:ZJr'*?XZ-3o9fdj^@,*jXD:9+.t=AL*!,WW-(r&E%)deC1R5l_p?H7VJ@hR#K&mlF0M;6,\*@:(V_^lh.g!;aNC3l`eGONm&3jZ
%<Y>[\==L.XDgA/=Rc%6anahW7F=AW'"=WcEUQLT^.UD[=9Fq_Tr-O*U.o,9k6pg=2*;atb\\5uuqkpdF^$2]]q8UJX,JR:UmiPX-
%[?Q']gaN!F?)-J_<`dK)@&$6q6<Pt#nK2Q2NEtBOe-T&($+(Un=%W5;>pX&[X#2+P6hrR6JlEAU^ibZ,Y)B6#d46q;4NK8*o$IQ7
%jXEe5)$pi9b]2!q6,s>,kdc:)C8@ho"DWpkX2KDZ5`$@amD`4\66O!9;'chF0m>I7GsJcq?AT!J**o?%=#k_#c&^P2,!g-_n?%u9
%@K]P.k=]3Cf$pdo"<g1Sj")10"<C>%:9>cqm''B=TL1&g5gU\/O+&-j!biqj7=mGi+R">*6!GX1d'%KfHhTuZXu`,ko9*'d^?+-W
%YAj97Hd>59%tC1kimUM,Op_/ndSC_VJ'TTd.'#gA5`\NYk;)TlV+:V$GRu#_Bm93>SWSGU/@CX+WDQfXOUl"\7Ln[2o^e.I81S[.
%1:!SY,6q0cfd^u25*T%bq*C&0+g]PC0BHmRT\4E#H:$Vnj8MT"N\s8Q(i^-bZ/3,+$^j!/WY$%[^Po'BnW39`N=-QoFF@<Nr]BZV
%789_#g#Oc?$q;_&A'C49+6<2Y4AD+mAb;qLh_"d:[gG-1'\n)dOb3'Nfp3@gr#/U$.[Si;dD:481B*);>&S9GP5b>MFOlqTaS4=p
%"o#4f"h3!V,ct6T9Rbk2D$GI65]-"O"-e91mq^ffjnAEmPM<SX7uVo?hr]WGXE?Zo(\=PpmUAfnH-1Rl0);p'J,cTJ)%EC[pd.kB
%jM$+n^?@(un"d.8ZriL^cI(I)4g#[e1]pWm[QCFFnfC*\dl#9,s8CbHjN'L6'u5;XD$BW.b$$S+FYU>tD4?J/r3dj(K`=Rp"k:Q+
%+/&8JIpW$N.^NM1+0?k6qFRu^o`.($W19o&EQ17665ppRD%%Q\*g=='hlh!-bTJtJ%bV0.ZHFh/]DpKY-qF7'JG>Km(rk&km?@R_
%pA5[l?"%&Np5>ttGTCp'G^*V!7)gc!3bMU6Eic%s?4"!+ZB6BWZ49bC$T"3%b_#/Ms#r1!0':DTjSR>67<(a,leFJB!n)Zu7=_`o
%ht^KAJQ$DRV0AUG'u>P#^5-Xl"5Rk&\;eZp[F!"mN8jH,Pfp2)aVNY6h<'JsG-@1fdgLS1W=I(JgTS2\G6hKRp/"qh=st-CgbHrS
%HOHM<P\J7%0J*`59mMdBe)C5e^X%kl:8K8t^Uqo,qT^RVg5';RhL*T7eW_NbUeROi1c4])7&>+$&f&68quZ7,*LO7]2$='%N<>s]
%i;!]a.-a&a3us8QK7cLMrqjR(@5NseA%R_E'4-,p&O_[+gSFgrKRA^\)?r3pg9XV2G5iOZK)U+[h(Ru9[q9SsV*MdE-[p@edVm9o
%k0(kZBfTZO6_&WH%/fFaOeYuc'P\)6"RKuc"C122`qV8T?DX/miDATB7jJ$<<-r8#QipaWpD<'1Zg/Tt>@+"VoXYPq-m(?>>qoJ.
%J!5:flhpL<lMP\j4X@2cHYBL$0,0<8Xp=)lDqi])q8o<i2%;^GVP2"i?AWZ8e66A?6Yh[4Ti%jYreB;";fQ-!6]lp?N=6e'm@dTj
%Ed3jY@,Rd^b/!4S8LF]/j_-!I&l7^n.h"Sl$:g@.XU_1*+'3+6cus'\rLY<)&;"S47$<U-(huS$:ciE_o/]PJa/CHq^WQ!]/3Mi+
%/G7$"LtCj4F:i4($#9?7(6B:gVK+'rZ(mG<*Hds\8rQKX23Eg1jcPHkgU_cs9m?_?$>Ljs75B$CP&WapMdD5Hi`2"gPE"n<O3]tS
%&2(T&<^6Erf7R\OK;&W@qcuO;XnJ>[kSMe7^jI:S++cFL4quXOH0a%O3P$J6SMXn&AJl+.We/8R<RBFI.POU\Ph.>Z:gTo-]M'lc
%`Urc(I;P5^.rcsMSYM>2!il4j8k]Mo15qHFoY<F(nQYZOd<e#b1YsnN=?[-VQ4HKN28'X!ehF='bG"l0bIaCS7hEPYX0btpJAPt]
%)Md'El^l^:69%HcB_bY_^US]9e]fs-DET.b]]FI)Rs-%cU`W`pEB'g11t$Cmn?SgOQQ:4kZq?9Z]etA-6d#Qbj%=QfLHV3uL9;5T
%8cf]O3M:qi,:Zt-Q)GfHjS79<*0]scqs`D4#go[Vkr&C*5NVcdfANV$cWL"l9(,o95-M>@\Wc"e\oI;7]Z/(?.se0>d*^F+<Xr";
%:n4G<*qRlXVbF/0M"OSNjlKEdQ'\1GV:S9(d(\?/*\%Imi4=FCY)B6#0iXm!G`ZFrjeE(#bBQg0*[h/s=ukq@LQ471csmN)e7d;\
%;/QhqCV1YADnM$XVA2B&j.ac(<^DCd]E9(l4.t<@:koD:**M=`<uM!hQV5^na2#k9Bl*Tq1@T<R[Uq^\F?5jkcq)>'kN.3u?4No4
%VH%*DlE,oUln+:2>abgTki\dF6*8)!aNKT5?4NoWd46q;]ZTatg<3<Tg\BR1#iPt8EgqIKD5UVR@p8s#[iH:re_[V<rMnTDjkP4h
%?Ffl2@-)"aQ:+_4--`nS=$DG`Tf?*_4m&c<:7G:@OmA^V`m'8?)`L-n,iCsQ0AXJhZkA-<2`hqg3M>(pYJ^S6.`]?LB+L5rdFFPW
%&I<[S);Q-i*/fW)`u8E[Z)7N712@_-BB@K\BB<#KCdPm*_MG@RIOP^S'Lpg(37<gjf=VUZs"UCnaq)qt"Y9>QQi-13`Q32JJl*ab
%r3Y>/[U]n(RT@c`bFu_oN^d&me-XSR0j=8$6rs#I7oo$maeY!Dl-\,KW5PCNb)Sql%]FQu.ks?&b41Bmq8gV*n&'4m+1/YfH@AKJ
%US#ica5^*qOcr#5oU\;2f9Le>,9K627R!'g(n":/+.IIf?cpd\)NZpO'g*hBJkhP2J^N_U\AlODiYia\dm[ukk?IQ?F[^@65`t+I
%N@YlBm@RHh6?nc(AE0Ei`l>WkoQu^\k$-+'0I7`#<XqKXQ,?Io9WLR,2%6R-EbN4/o'U-4=8[4L,J#PpmkE#g`DIDl]&^VA*C!$B
%Gkb9V^Yn'Np@;O.JSQ,0R'.6%@O+&EggVfJ+>%7Pj\XlD7jAO+l4drt(m0,[+qK%D,7i64piUtE)t:0TPrKJ'f[7dX!S&fK,pnFL
%3W;1F"XP9OLF:(XVf221?=2_ApQ'balfri1n%\1rGc:8l5HaX:H2%r^naN6b`ku#aB!0NsOnV1!gH(-M5]MMsH;%4(SL1HO,L]#*
%NJe>/2(ma3e])`V/J]Q"gL5Om'`$#$aDV+0/p\fjLfZT+/j=Sh>`<rC'29lhY>+u$i3j:[edY!-Fi.'d9<1JV1^pO.EG3+.0d`m(
%Q$c6HDj89q,m&e;GWQhagJR:.f3q!*7b2h[<JI.;EliR80&=2VMdfQO?Al4ZY,5^8^4m@ZdW-c*ZD3PK*HfN38t9"c21_)]b6'EX
%)LTg^IZA45>#6[T:uLGc#%!=gF>6ahJp<C;?f^=N+h-F@-PDl;]1R@^K&N?IQM[9;O#cHsB_f']HR>FnfD2h]I*15Xq9WEBARl/:
%fAWr9#fLL5(,nR"RMpKG;a[*1XV0gIW4P[FVsZ#d6`l4kn.cY[QUcoCMZ<p\$YZ3ELe8IN,q=]U3C[19H=4+m]/jc"#p\h[CA#K9
%FQcgn$pBmf7u]C.&u4"mpdSpW[bka9rCfOY$j'T0"K#32+Wp0'L@GbPFt_@=69%KdB_bY_^S#/Nh;%kOD,E%lVqg&CHYVJY_Lmf%
%Pr$R'aB:NrJX$?&KW0)RX'/^O.=8ZO.H=R_IRU.<;@R;*Xi$i'b)Sqh%]K*J.ks&s9(DA411dXL#Nq[X-sbTsR'5<1T?c"KmNF`"
%`d;+TLJ%#LKmm=l(UNZUFCjQ4Fd85c<oc0"A:t4OS]jE'%`MRckV5^>Fi(LXS5uEU)CloPCTP0Km5dpX9'pR<&^LK8V!Mb?ja_(V
%XUZ#^WtYX`TC#]T7Rq5YG4,u40,fZkUh.oXIMdC4+-%7N=s_1h/$P"REbN4/1:"6FE5"gK7kUY093FNR0\DE*_04=SB2t<)N_reG
%IZWLV>e`YON$^8EJX7>8;i]UD`)1lRO`K6jQStq<d?[.NQlV1)m&6,F<T;MCXbk9g/W\+<bPpsZHp4SGe4L^<bj9"Rk(%1_]b2!s
%WuV-`1UhNLT#f+b=aoGFerN%dD/Pmbc\X3ER/+/<J,d%,:RLs-^6*VshY?nC@H6OQ?'595M$_RU3jFCP*/[\Gcst3:lJ-*=35\3#
%2L[hhf_B`-f,3QCI-]^h3BAqt'Nrc0aEdm;/p\fjLfZT+L-Bok%#rqTdnT%?i9#0(Ad%="9FO'"'1\$JXV.D^'kg)T3jdc^)H/NT
%q!CK!R^2geFJ)GIDb&i44)3UC3_Th"a;RR`b4'U73aI!$P4"e^TJ7`*rRa#FUF:!`2d$UF'0]#4Ceop3^&P5t+GJ#*\`dG5E8cn.
%c+ppcjZ!5<3k:V:6]ph-M\S[Zh1_oj7p0)4d"5.aJ@$ctMhYuIJ"3J0/l\PhG`^f!EUuQq`GXLK=RLC0U!7//O$5uZc@T\450lk$
%BpJF^d_D_Y7\mKgQ+VL%IIo@&e<[mo;VTu@>HHc^s)J^*@UN8E&J53AO#0g$eWok7,3HUFo:,bDh94KKo:`UGr-)4H6JkqfY*<F!
%5\mUM6)k3P2W[1&<`!Z+qh[r667"+5#PeNe4utqfY^_fUCH4Xn`5OeIE)2r($12gg1c'ZIX_.T]M?^eh*#8;<54XB@oCS[J5gem]
%L_-tO#l-Fb1^nIk[<J;W'u;o1"TA'?^L,b;flJP4Jf.*=?$PEk8!I\dmnonmB]l%#"c]K$EZu!,@,c\L:M+ulPrP7:CEaXCb9Imk
%]XuFhV1--]7gj&X%Ri-r1m2iD[>S@J$0"sF?VJH_kk?S$dCEQEgWTV/[d2ISPttg9QX2Vijj2gFrNt"&s/aZ>)'/`17!seqM>1%U
%ARa(;2Gp!"-t?jPfZKmI8I[g0WM.V&<f&VI<*^a06ZnBMMe*s9caW>m4E@OATh*7b7R@T`G0qfp6+k>p`[Dol:e!oUocB.`&S8St
%#AY3!/09NeMhe(IR9#/#CE-V)k+`/Nbe'p$d:GfE]YNhpC9/[G@E]aOA+$:<d46q;*2BRQr#j$e0QU$.HV1Xa1De2`E$Js_[FV*d
%.UC48Bc.Osftb\O#!-*p"jX.%ON>Q#k/bY-9@d_P\/-Zn<B([Ag!N@4!S-%0*@?>=q>EJJ30ee/QMYO5]rSa06^4g&8[kbPf#a4B
%Ikp*69(.!"ISo?2'Cm;d,NPf.`lD;W;BN.lZn>]3*G"8.S=>6SF43s`8uol:2/',>nY*?[a5-:lg=LQdC<V>%*JtQoBV`.gC(Iuj
%PJaF8,9=f7(`Seb.>OIHE+[=0M(t8]a229KZ#D[;4K3H_R>-8M.R%$S<4oh'l@D8=D9O'%#Z)@U8)nPMC)uq=9FSt_)AU$.n/"d2
%nlm$uk,:h,mC?t"M42H=\?9>6hRaLZ[W3dXZ(mG@*HeNl8t8b\23Es5jcPVo1srDFkBM#;$>Ljs77)/S&op7FMdD5Hi`2"gcULBW
%krCeeOo$KGh,-eto_`EuMgU=0\ao2QV"[^M^OK4^No/Gcnf`%Kj?n'LPIFTcZq`7=HUXt+?n@)m,W54]UkUp;=s_Io;0@k_&(NO8
%7Pn+`LXQ<cRcSZO/KBXIk@g[&J8,n6&ei3a*$ZmS4YTpV/=d"QJZMmJehZGk5R]dk&4_^9XV,9t34_T'7h:QGG?<6S:^CT1s5CTr
%:`+7Dj-VoC?1^`_&BEuQ0u(m$(X^CtjN\K'&eOt-`-.%eER`dM2V!GAL(uQ!E[WWJUQLrbFjdWhS6E$PJXJmK"#K,!GH>$H4O_JN
%=0*Z4JXHTYQoUnh`DDBui^&TSO-pS<H&g2K-JqpD$Q&<)5K/K$XKB1Det*tSIUM<i9(2NL5-Ir+n&q*o'Y,siTt87f>H9@dd<.e0
%4hXVA1*k.B"ck+4TG+2&i3XEQ<a#5t>@hAZe4dO[1t+6N=/>fq"f;Z@@(M.ds$A"]KEiAa<^(h;XGit,V9OXO#,69:ati0_5n#nW
%&4_^6XV.P^33p]LB+L5ldFI(`1t+6cd:jU4+)_D%GWVk[$PfTOcB0tRI[/kF(qGp6!7C(!&7Ssa*0D'439U+gY8m<"3=d]S>\/_t
%Z%IUd*H[aW$Cjet+d%YaacVE!hOs5Ua7N8'N\qXdH.]o'_[^G-]E7EuMsUE]$0Q0XSg/9j\<jA-ZCYNoq+H%n'^o72p$jg1dhAW4
%Fl)TSrM%T@B&G(T-/_-jQ%,K!/Z6*)LUsm:S977Kc:C<`.;>a0UK-;!)V!:c33'#6nCFJl7m%-3b2mY'Vum_Of[7dU!S%[+,pn?_
%)9.KnfR2dfR[#e9KR/AaSMPjQkZB>D4k9s1N>nu4-dXQO7_c5(`kIh.7SN_74VO0Vi>nUGg5a2#G18S:Q'`EJ^a]B"b4$5F47RD[
%\J&qsp7+7DKh)Mr;<!PY3)XZRU2hZ$YbR>6*HdCL8rQ<S23EX,jcP<Gj?8OLB=!1nM*mD^*K=#<;!juY@Y/iij52*Af'f@Ij5)[K
%<oipkj-)-/_`KF:G9>=]W:Jh1Xn$8LplMtinY*E]a'6`1"d,S]?.V(&`;mj`C?RB<%<\h\8rQUX]equ;o[X9cZ"[plZTopFTB5!Y
%LEau')JLgsg-r3`"S!t^aN-j^N05-Wd>0'#hNr#LN+LA@GSk`X*f_.G=s_1ga64Eh+$D;U7_#I<'n8t37-/*+7js>,UN+Ku[4ZbO
%-AZ/RNKml4pksJCWP#?9j.;_mk?Qb.>nJB767cZ,HW>B&64+WD3>?/[d7DH@3b)>>`iIsb5g,k_JX/rDQGl*c5[$u6#uI;VJ-K2;
%W,sanU4RWOj56WnD;O,=kC.brUpl;>q!k8gec*"[nbN&)T2p9Q^A$qc^Qb-^OW-(uWb]h;*:p_2KS6e4s+sn%O>o`F4Jo'/:7,(5
%dH[F6b0$X9.P!l]1inVK"W?IGiM-lZ@(LjmVMhDF03"Z4G`Z?EjeE(#b#>&2,8nb8dFLll"s#4MTuRN"W"Gn,@^LH?XKqEM"(c&4
%Tgi%8!h(DRirS]?FtelaKA+"8JI:?U=_$Mo)?,5MCON6C,sN6WA7YMK,"gXthH&t,+JNENNNO7A7Lj*>jFB9o=sZY;hO;O,hX\b/
%'cE"ka0f,+XhpdQa,WVQ%]FPIX"Y^0b4)U>ECo1S1A>R2=2Oe%-XZ:I,,4S1qR_fY^=ISE[J.j*^QscgJL_P/8ul2*I@<ZZ7A3p8
%<t#=l:n4&1*ja<lB1f;Dkk%\SA)fpfNK#IZ(oMTo#d%n6T_ndY2Kgp_EBppe?AZe_<Jp<9aO(*$j-'/h7Wq)LF4,+I+Y/2*Fi2R9
%h/H>=;QDK$4iZ$>ph7>qEQ+aYV'u<_f3N!H&TnZm_sM+WDF^g]?AXNt(g1G1#9!NtXZ_#-4*#@7H\S>cqmc!ien`2ECoPSb)J(oC
%38)^#ac79JH6l%]hO;O-hX\b0Gk1b\M@27E:?ujIP-UjFPQRpKZoUkhY>Y9Z<plL#9CTRt4RRh8Bt<7">hucLdq@R`NdQDgIRq\t
%;=2,J?L;+0*HDME)#@';A*?)4-24oNLCP)K!mM%qTf?Zo4m&i>7\="DOmJdY`mKPK)b39/<j]?0K,UVgFZ:(lcd>:2!S&5p*@?MB
%.7T%Ug2@CZ\[mg%%hM8"3M(U%kZCOf4]W4dPsE"qUY0-nNMV[W(e`1s$_i85d]JN0K`QBS%_/:b6`\,CE/^l<oW&[ULSH4[(EVI^
%a0W)-EX$]:Lj?Y8apI>)dH,)]oOVW)WkH8cTY07+O'*DmO$_mYo_7J/kl#;Qap@Q$1tY&u!IX3Tf^E5B@e0DVBJ]@cFmm%/3?:BL
%Qi4YkrDd`B7EQ)<^</uAEV606GeEcfXL0@>n?D?0QOE5aRJ/n'o!ghI2uO\<rqcqCRcpq]^\"eqW1!9uo$<d8'DP<P6,2>cJ*WOa
%:u5doLqbrdT]sRF"R0'&>ZoP5Qa`aU[mMqXq(FSW^ir]UMiIuNX@S#qB)$dEZl/nkLC>5b:-5Cm:@%BGPLD1*$Nti6S=Z%a-,$cB
%k"GgBH[a7;m+(21OO-H!@iGLu%mJb:gT/]A0G<s6D8>O1Bq,_U%nb=H@/+jL_IM#G`Gmb/];.Z.]flX^OT1mtp1IVLP#rin`pHp,
%L*sQIHq1@4\)U%-q`?n^/PpgW=s/7Ifmbs&o?UUNrr)e_9`B!Qi'2X3g5G45e:rX3UE'cR.KV$sn__q>^WPibN*[b\_OCKiF\c_4
%^MS&`g*O0bqtR#7/+fWeGhM+9lMUAelEgTgib,$=12;Q$@j!ToKp/Qh:8ODk+X!AY^qoNUE1gWbfK#&&]_rg3/WW@+jcq3g)cDB'
%E\q0N#->+2pglt4F3G,K'Ft5oB<^dd[F]VJ4cq3A;;_\S"6o'&d8#Ys@'h*I_.Wr2K@(1Oabp,4^AAnJRUi(q7U,]q&4=%GB+75&
%!<$q'_@ti3`[AP2e/nG3CTkY&l!r,Eo(k.7%3C6)ePEYIFX-8hC'Yo4,?lnI3T3NM3FQ=>3FSTBS?UmPkC>K9GS\/H\76]/T7DJ:
%jnBc%D?U8t=!<+J0Dg1bqlAMdN*cCi[oYKNBaKIc'V#B-_jXKdo9VeI'Bp/pN">oI3q)_;=e.H9?gLKH'N:P/a&#m<#pV\=SKr?M
%*>%+03Z,;jJVl>8KG1lj!=m(J-c2Rol9j3m5":TgD?Di*;Y24r'%8cV(t1E'W$sRipU0InEdK(ci&q?6-t"/jfi^BLg?;pX@fSC*
%K`/XQr/Y8c\&$I2obr?0dK+5'8?s<6I7HUB&HcM]&HaV-LAej[r>8"H(qe#YpO'PsWjtWX'b5kBh&d0E*l$k7.mni)D\5FZc.RUO
%M`.5CG(rW=2@ZbpL2CULY\_LQ)AfAdRDTA(,ln@mD*X.UClV[G2QObPZ+\6KlO;S)lJXgF\<,IYZKTj+h^7n__56eGVmD`U/Rc!^
%JVj7C[Jp'D[Jg=SpJb2:`-)QFAR_-X!QYn8%1=Jk1h@09bZol,o-g8HPD2]JDEW,Bm+kUB`T/?<O0:-Pm4[X49*Z/Ib('\k18<41
%:koD:6&*d^HSf)h?Z`V"cNoqAQ8eCo5bY:\4Yk#;C.ZjT'$I)Z_L*%:34@_gi6A%+-^W3OgQP8Bo!&[<)!c]epHflMKQCDK*e'40
%n*oqO0i+V$f[eIi[Yn[)^nXjL,EoIA$m2cah$YBj\[@5-.RF?;?l9J7k/$bg@1r-K5G#og;U^OXn3+-X1%9PKQ,p0]@P&k?*KXhs
%<NX_=3uB[9O8ZS3q*e=k`kZq_HhIjWfX0Oj+Rj;Tn>=cR$EX1'jZoE"M/:acUlT?M?e>,BT@@SmKmOtM9#"6g$2H=D.S:g$_7R=(
%4j?6f0qal=Bi#DA&.fn/ZJbpb'mW$JaTdt-3]^E+kNpPn6N4Tr.=pr`VmURsZ@I%7cA+OQqZ5YV&5<G-XaNDfl')(Wp%qa$LB/B`
%:"_;D!:H#B;F-hBEX#?&`sTS/5cfZoKbak$Q[pq>\GSB!`2\<VOZj'Hmhfd?=a&mf^b(,>.4+n@5\sC/$_nUol')(Wp%oRk6N2=p
%g$b$g[^E<ol9VTB+P4"2ElElWNTFoa6:s_-(qCP#a>I?tJGS<GOjf1)\QVW.\IN.3MWI=86;$$n(qCP#a>IAR+8^'Fnr'T`30Ys^
%B5K4[LEQF0dba>'/>]+*In>];;1([_C[UX<lZoK$h`n*hL?kn^ooQbJl_1%FY$6m#YH]@)XWe.pT0<8^LpKkW,s;,p-cN$P8uRM[
%.\UbQdI8Rc#?$Yj&dd;)UFX4`>m3p5@_Zf/I?d_Re>(\hW"jC9!%T%+*9X!Uj+pXJ@Zg4%;o7!jG>ar^16bU&Z^jp:n#gte",Vk<
%MhLJRNMg2n8-:2eZ<t(i*s8HpqC8i/+]M'd>BQnY7KjY=-@[sU7p$C\?FgkL#'.X!eZcif!E7Pg@5TEAS6!QFeXII*'r_a%b8l5"
%*)VU8cUV[EcP>cVd:rf\='gOQr)I?YO'+ud%E1u+@,*,:o:mrj0kLC3D#JLI056#&YI"-IAj+,9e9^>YfrZK81mi1W>Ko1^XT@qu
%WE>[PN[YEtYX`0&N9[E"Hg7[&/CZ+?aHE2&*3o8cQW+P?,;KK+P=8;ok#GOX+(Q2Op1V1nYIoXL['N=[lW0+HaUqkk'T3?N@nMOQ
%lV<j(n;5S1Cq'!fj[JSBMEZ*I>H8r72SorY+c`5fbc@u9TAuoXq^T58U>7tTk.&i*]BS%E^YkLc]SeV5A]9hRii0nUUDu&SFYIcQ
%"H=G0#,fg^Kq*UoacV#[1/u;W8Em+m["89<r>HO;2h9U>X24Z4,.kT[^R/<iOLuhC?@1+srm@Vq8KQ#2T3oribX;2(lUtjJcYM&3
%q/Qg+7'@;PlE,(\WR\E)_*WA^TUoEM:me$c*g>)>@nEdHE+r9WUZ+XbNJ\*Ep(iK)Gs&8MX"_>'=J/4%#&1R5VnM]*Z3q@o[Tba/
%*N\9d+bjjo[tC_$$B'Uia("##Z(tD4\9%q,0e*\#%og3>k?J7L^5mY1[Z?N2Z@R"["/t%^.U38"GUaFmaRFD`(cRWD\k\;<;Hi4`
%V3?h"s7El40'ZK]#g4CS@KRhk#LKDICN)J.<lhf'RiJr*/mGLtI(-VJXi7)f#VH(eAeHdMNhCL=CXE'qb3mH_GZ,iibLgV%KBD/R
%-4bCI-5&+_phco[4&FGm,<#OlH66%UI9pjg4+)F5htZun?/stI>$"npTHp<=D^TNb'P=@sa%UX&aAT&EKGrBBq=rHHj^ZFO10QN%
%.7Zb=HDi)U`c_gr[Ypf#c`8`C4NK5Io$MpHAPCS+:.dj5mt6oH$#><(a5UNpdA?hi+Oq?c7QEK;h)Un#Bt?c!.5sUS*$,]tO`iF;
%F9JFY?A/^D*)knY=8DgG+e#%EKs7kOp9(*jLr)H96nNeZVeAfL$;(G%KKQUmTHU`pTGm_C.a\O,d$bMP(=+j$^+9ItkiX,S67[%(
%KU;p"`0`tm]BGNI+C=1)`Puq;X/9nZSJ^B@^25rVpHA9&LQ_Vb]s$9s!1^Y"hMpNM9)nkM9)h5NfdV0*1clFS6d;9.S?^pIBOI6,
%DdFV9.mb;>'[RDS'Msbo$^GDPfVuY)EHWh9L7H3g"T:I$.;1";Knum^L6/QoC)=Pr'?$pkUS%>FJVKbiX3Dt1Tb'be9A3!(=ojLt
%FYpNaTFr=^.a]BEF*'8@mHfCYTS4csqqPZrXHER;0m>I7GmK>T/r"<P'uVi<)N"/1a$4(uGT:A2(!kp!54(V\30qh4;%La/j8s8s
%R9Tab:bJgNE[hl[_dab)BR%lk+ARoBE-AXn#DYY$6T,7(^]t+PCK?)\s$_,2#K6OJ2ubK`O57R@J+;1HB6F1a[/;jl*tGR1q:q[M
%G!K])kpLRBXF<bX+?uh5AF6:;!Rqdp5lH">GGqVI5ob2d;%S:4/I]L1e`%\k$@r`q*g%!DCA4e:(W*3]T/enQh?CL?e%7lFH@-MO
%DlJ;mV#f'Z4KH>[nA;\iTSUto&/AVa)8[S^;F=]B6Qn/#Bf\XO32kX@Up!*E`mrB*?=in9I%9nk+[.@G0gbNdMG[Fh,2;qH"9T8*
%WPsOt,%Q)f@,U&N$=.reb,O6ZaN)lmaN&#\gupb=H+%0Op^T;+)]8B1J@<s@%DEn>AbXgO)"583,BAhKmZX:>q"RLfPOn_12Xs/s
%SX2D+Ohe`7o<7ZR+a2u-;eMAV8Yo=B]E?-R[Du*r#h]W/0[.lL$<;Be7]<6=)BU&ICOEeF.^bBL3_*H#)4),3^iBc'/E`ZX2d/XP
%P[7mFKEB3f.j(O]c))>O&BC^o"i?.Y[FE%>dKg1[H5/oJEEiSfL\:s::5LXt7QSRG^?LGP$W'rR'g,N(#Aq$!.`.noa&Vs16&'m/
%a%,usn7*X?:>edg46*DWa_;_%l$",,l$"+I#=GH.'BiP6U)1^O*k`E9bO,Kf(3Wc96.(T&kW3rC!c!`6-\$4#]ZBXCJ=I^p(r+8>
%gQ:.?amWEV&!d,)o_]N<(l.$$q9G\LQ@(&VVe)E=K!j)b%`M[(L*!m-%/%Ou<f*a#M$e'*N'i0@MrFU#:(SX[GEj"eGQs\GUM%A>
%F4Bt/@.'O$3Bf6@9Y]Trm<N?'N]fC^5t@dpkO"WcaAGTij3)s!d#"N5?AtWak/@T/C/,><=`]if'KoNP*hFlLh,.[I\2u'uXsN"O
%Q/h==W7,QHd;#Q%kG+SK1[\,,&/\Cq&,g1hBF^+Cbm$Y43Ikj$CB\<+>;LlU*)e!i2o.(_R@;m%g<=ARLR.sD[dFsh+#mrG!NEkY
%%!T8\4]61n2B"5/dEq.(52;BmGEL3]0KuQ-,ot^CCA]%5ngSW9QOdXbF1K\Nb0aD4XoCDU3>j!LQ48f(EWFWnef*=G54hj7j\oU<
%=:SKVbgc>cAnI,d'J*&a%h$lQgBpI\@DD:U^IZ:5lciBueqq9g/G/_]&MFnCDl8/kSH2\_=_htD3K0mUb-CVW-sM/+?tO0eZXA_R
%'Qup:(bP*3*40R5AQc@Q66&iYP@*GG>6IV[i;2\-/sr%eV3?FNJ%JShDUa7C-)HtA<IgTj%?(]85c%#P_0FHJ&h2J%*%ACo/[$#(
%!A`#27e$sK#9+L?3.SHIBFVZWh.??T82usjLqMdVhLpYS$9nH0G-(/aqJ@."WUhECn1X,*.m/38h0A_A=l\JCAP3O.Q%nj9qM1Zh
%1KOb$-`DT9Jd,%Sd].7=4k/&Mps<5T@]7gNr?1[E>1VO?[Wa,rS:V!b3G@`;<Y8B-(E#[p52'p[]Vh[J7kkbG^?:WQ)`^7A;?LE%
%"/nn-<B-V*E=H_(g)nt7Z9\-Do.>u#>BD)[-nMt;*m:^=[ao+,@7?(6C4,q/_r'J6I(^gOiJr;E`:dudlXW4>!WJTj\:g-V%Bd['
%Zm'%.lsSc3#[4m0f&/i2b6g6O>E^9RkHkJ<7<:M&.qXJ'ORo`.OcKTX99%N\ld9!]?cU3.:SedY#pV(c*0QZO1q'tiEY<cpl"mud
%fDI%6g2Bsensm_'/,^u_Hq7Qmq,CRpA9taoXYUB%+O+;eXFQ!!.)Cr5.)RT(D;$j($Y50!CNOs&XjQ[i.S?]_fmL+k5(`/G'M)!8
%KB+#ZeOHSFCXS.=!Zdp#=#rf@=0M-d"JA^(^5>aCfMh9qfQ5EVe?k)EbdISn(`eD*#<L]^9rf;cEQ7[^)K/PE-nN(>*fI4S[b>C0
%@82X>Wc\.]_[l#,s66j.fA9qA)4=Y(=FCt]Nsh:gY.&Nscc/ERU[\1u0OF6u,[,`m*eRqCjiMHDh[^9B2*$lBrd7Oum"Z]0.H&PH
%D#>.*RtJ/8I,5+:%Ng9YeQ[s'YYDg39_m=&8`5Z-T"AMV9"Z:qOD4b-\cZY3IbqkWYC$G&jCAD#MF^E;>b?uAh'M.g8l_I"!4]L2
%jkE6o`n$N=PQC,.>CJ$1^!?+kf;o%N5ln<4mg."b<W^_52A\E[dV]afO2$t!^U?W76,dbfiU/i-DPQ*NZL%hkbeZr0EVB@eDp#As
%!@Tl)h1p*UCi8YBei>+(P=d<`m$:KB-o8"'c(1?sMIfudLr/]prm7ZE2A]qD66OV$b3!Mr^W*<j8]E^J%IdupZ9(!cQOeFERF(W'
%G95/-C@DMk<[s(Y]bO.>jAjU$<P&+^Q$2&\99dL%D-Ki?NH?S+aDY9`;%a$$GC+qfZW,*D)9\'onBrsW`%:YJ<SR6T8u"14Pu]2%
%lp+2.9*`\V]f&\A,gTot.!qLRL%OX@c&YN3_p(J!eo>,f=tZPIPhd:OH,']kTo/h:aU+K4dko1WbD0kE)Z?+[b`PjtdP8Y>cEgtu
%=ATEiOf-fAXYF4JUcK^PDX_!08Kh!TN9&.3Q-%Ke%nOF7I$a[U`S-b;%^TfA]foS]Qa,9b/s[+W$"`Vp?j:,,euLN'[Tmp??E=N$
%T/[cl6eGll.flO.[=eU-:HH1u-!HOgR/1us]r)Z_1_J$7bSINr.CE8BeuI/j$foAL8nEeud[k"5p0RVqJ@NL9#_EWeE8VAH;/CE@
%%Ab8$15mBNTN`TkH)b,(CbiC:f</nJDm,E'rM46l5M]PBr$R&:ee21Dhla8$dHZB1:`3?k-Hd7p-T9@Bb&S#'Ub;>DG!l-*Fnp!Z
%OokDRi$K7E3DqVO%B0EYSL18CjL4#<#T:M5-1*@6-#8u":7L/LU^uoEW*g<olKQ*dmMlRVGS-cK/"lX^o30)O18[<.mEmDn`RNdU
%4r6?5GQJ3&#Cg?LIYedOTN2]5@/mSHC[6[Yd#AESPFl#m/I(qN5JL'&8e.nWGM&7LM)TCjZ3.qn-+qqa</95<9n$aAKia$@&!ep(
%ej:j\6a`86Pj>e4U?KcXD=")X]9u)W=dA%M&:U"BcZQOU_WmG!(?B5\H6`kq!b3nUH\t7bCIaVB/MR@2p6Dsd:+GI]P;p4B2>bhP
%iu0ED-699+g=:D$=fArVOEj7@(B-u^d>7N98>JnnDQG^l%5l@UdG'mR\bED^:hm1;29tKRaoD;q9::$dSF>'1JBg+KFpAtsm0.it
%=FqhBP<$bUq$`"]pK!L,r-s6n9BJZZ%Y6hcg3Br#nannU_3A!)Kt8TOIVb*^$6X^J4d#D1`XIhT!IJ`9r4Da^*5N>3.fg4'_nFT1
%YH3[V#3MAcd`t29214!g>@Zu^Au.5=\$lX>9V*5^Jb>Auk+_OT9W%P58>W_4Y7ti]JFF3#o;ZH.15>G3i1=8\.s,IBPXTY7H_Ef8
%1c<ZTakc2.4kdY):Sc:;erkZ4>*-!ARE9ELN&8dm6_Z127eYQ3k'Lm6jqLT9->M1<jBf`>9<"+Ob5o[lYb2/H5I%l#rf192H[m3-
%PE*M``ReC($$Ajd]+GAp&?C\38H:hZ@FTY.)qfQjqCp5-&[@D"/&bt_o'FLp<UO9=6(gP'ogbJ)0)RNY`L$Kb8_4R.(3]Y<%!i+j
%k*ZF[J[6n6#X2PrD?IbUW/['mZ4s'JR4GE$P/^B$2pj"Yq#KQ'%9C(n>tDBn(p3%QaD`f_7j6T'oC!B"ac_OYVJ/]fePu1:&r8hk
%,1F)HU&gsmT"4tQ\952Y>tuF$qkX1MbWD9#fM;Ps=_?4'O]B23eLB3"Qg2h/K@Y*'e,m1.Iq"rBE:7dNE:Td&RKJ%;j8G0od'T7-
%ZH+/_fo(n6@pLS@0o!n4g>.m/F,Tb?h63$'C/4FcFVY,)dj2,t]n$!p;?3E$,:`g')JUdJL==^;gQT+3PmnLI$!PX&JV(6-"/1Pt
%*u`c>Dk?Z+Y!&tZArk/081.43E)[lFXSL(Y'>)scX>fC9[P?ZD^Vh,O5#6Xgej4QUp;0(uTO-;NXTBC%C.b&FT;<>bTegJ",T]p<
%\cup+p/!B(e(KK?19%rhbtAk*]rqX'LT5#ZQWhtp$kQU?X!N,C?VB.(;Io2KC&=nsi.K;IF1iX)8+?ULB7qQ=7OIRo+S$Z$/iMON
%PpXF_,aUIk"j8/oH']5e9r905ZW!i6As,[1b)SkBP94['(s&MTKeOW<I]$FQM\g;gR;J+'mV$j!QWD,4j&%HX"5\UQ3qrj?7=F1f
%?bB_A(I)ir[X:Y8C(c]mlf1W:4eaf.>F6llY?40_V#IQ4.op-4p6"XBCImVb``]Cm@S7_[W,bX2Auh<!Utgj$eO)5ob]U9X%C.[!
%bd$MNh%J79E6n/o`r.f[AMWu'j-Qpuj%Qpo@&C")%BW>[rE&,eL@baBk7('+b(GB:LU%=mYq<k:.F7_D2j1QIeD=XL&bR3+((?cg
%AdOYPI60o\`r5e`GlQJR9r8k:.,B2mD(5CAp)LkQZ`N<&E7Eu-V_[!AHfIR3'BNY$>2T/;>L9P*Z/iq<Y[L)eEgV<sCkaH53<7sY
%cJPMm;(>e!E3)!;mD@c%%kp7(Z9:hT0QBbK^^_]J,7@&Ei-@]4idEA-kTGT*]H?(-I')<(pZZ!H4N5m1JqpOq[U33Bn?aNco%'Rq
%d!;kg>61%VQi`u2?J_L1*`lP&E[jtAecB*AlC(W0R[mJ8)7//IP1b+-6X(mkI=7/;!3@i]kdEc956:)[\7q/j%'ktgSC4=W>/>XP
%jc]>_a^/fS\oSD5S;/X$?l>-D)G4R@Ec_pE'J4H!RSS^(,();,dF,Um+"WW"!9b!2"Tl!^dD6nc8;cpY6(0*`L/NJM,99:Bh@+)R
%&dPnRG3^NRl`_Er@jh1262(Zs2^D$DPS+:'3N7$bA,:&qlX]&G5V(bonM*C(&\!*02!;V<&]+A#PF&>qi_B#;4F((V7hNi'(+=d]
%,m>Dm8V3`e$r(V0V?t[ib2tA5V6L%tPBM-aq2TVAo%bK_SR)6el]eHGgBHluVKo/qX0#$.Jg+=<kcZe*9:+Eh#7!+\jCuTkrg'F*
%XGF*P>EWEndqn,.VMlVM9%^&D,a,\Bjd@i6'<:N;*Sa;Xlu]69biWC*S@?MVLi(hA+3od&n'G9Y$DjJ52TZlj@V?JRWJCre93T1+
%)q_=kK$iTY5k<8.e7h)&VPmI.F2+J564jU"_AH9.G7'j]ZgsE\6q!Q1<LH75V,`5!(@h1Vrs5GRplK@!hJH^<5(003+$q_6Muu@V
%L,_HP>_5Z[O!h.;ek8lAXBPk9dLut$=\cVb,,Zm[9ej=`=-mB<3L&$Rp'jDhV1su%+sOt\8h>^rVL6r+?3(QVq1P_:N!Bl3DbABX
%(B[tK>NKT\O_om=LB9eNM](1XVTNek4XF[6k,ju'N%%\`hHa0/s3cbX=]_L";M,SaW20WOq>NcDdD5.\Mkmq@O`36o3<[sA[Y8At
%r_B$Gf2aB_Q!@kJXdN=ujgj<-(\Bs`0Rp6Fc5k,'\@9BY+P+d<nmRN/d,d)!!G+PW``*;"qPcDl.Ntn8m\?Td:H\`31!*I%T`nde
%IO0hapHlm&7%TVS9NE5L*FlDAi-_CKN[W+=hG=%%K\]VTIe%Y?@N>eG_%p39kuPf0OIVRiq8Y;N-Amn%K+hZ<iql_>VB&K?2qj"e
%/KL_K_C:jUQt3NT,VPFT,!h(mIC0]qEZmDYl3`_h0:kX7DV$2Z5tZ6s]2/"=I/ma5$FOd>WbTC1-;""fEK_67M]M%k^-NdT8l_7B
%dK7jg;^QnX[P?mmGG:/?!gs:c5`k>\$+*(j<i4GWUFA9e2,?S@\i*MS"#7Ya(c#`Wr0\=:K]IRF"d-q$#6bJ+*HgP._?W:M\:9k5
%2W3heQDGqNAsG%BM\O9Zb^H8(4'ju=TM9W>J#A/D;DKs=_SY(rPg<fuU1SXU>,5GhUVH$5S#U%.L'+qr"3C+hL;?W*7Da@Ll:nfI
%)tfp$U!1"O5W$=P;h&'kJP!#'C2Lp8Y+;R43CO;ih.E:(YXqDI[0I6UZtVunI1gYIJP#[T4WZBr3laLo/8AaPYj:Uo^HW9iSt;-^
%[KoGP,1pnN!p!gsE7YBPh[%80"1U`FE3npE4.k;8\V-M`_*W[6oJYdJ/Gk[EXnl08`&g^SbInb"SanCBIk\gNTX-f\:,55$nV&qa
%gli[dd,65*"41',!#%t9%VCu;Sro1k=Td7#<kHX`(_%FP7B)&TGemME)\Hbf6nIIB2NTs0l>'FQLUU2"_'iLG.Su7bZ_aDY#A.U[
%D]d;,fo#t!.[^VGm@D9Tp%8V^Xum,0A((fAV\)7"G;2dZ'[\:g^a?s@CYD7J9Zc9VKV=-7`f]PFV/Y<h/QFiZJjSO1Ft%@:F/I](
%12$cDg/+90c6j*TXA'Qh""PE3`"0-?!.t_>?o(7H$(5ou?m]'fUt!Iji>QIpD,V[SJ!h>1:dA1-86ST>B]VSO,I\q:3FK>YWjY,+
%>^"p?Zol>"Tko?!OZZ;!:W!;/#;X5*$)"ekn5H;dAK.dL/n_-ia\A<qEO>XP<-<=q$NU8j/T15\1b!>/0O]`S<'0N`A&e't"Vp0s
%1[)DlB1F#@/;GRtH'k/S&iLRj@oI/88K8\+3kL8,JtjikX\R@h=kqPTK*!U[^*]YrjJL0W<+OF"oiihU7q!7@,GJ#Z0eLtfMJ"G)
%Tc#\A#_P5Wr8A\^[Gs;@hjJ\rQG1$FoP$3q7#bmCe?P*D[^QsdpBXZK?-/:ET.B]skr6qR,L=&!D:0bg0)?GORT*,?\Rh7/=IhBK
%<kknj^"G[e;8_c*$/fj0"C5;W:0m2iG-G3as'\,l/q0ngW3K`=ls8AR-Zm0WV/"Jg1)cf+jNe6-EigcU=s"!cRPIeLb0:]pL?a/'
%P<([k_ehT2b;XVP$"b6TVV5eW6^]7%/nBr8i.2GGTfpgYK"Nss8BUebD4I@Y#nc@[+8ic['th-4f@:)!74h;X[&A^Pa/ZET4]\#n
%V&9/Y;'7dg?qR;BQ<MsY2EZ>4]j8bm>$nha=XD;o@XC;GquB,+#H%'2OHp2X<4Fbc!t,U_=_^<%4#QX*2k$1GQ+c*55]><RD[U()
%H^c]#9g.''';,6Q%.5[Iciukljl<1S5=SI,s(/,N$qV]m:Fe1F>uafb9>L]$cVGO"+%amLo8$!-j9BBTlQ!W`+L@ML(3piCZM1U$
%)D6VhD+WsXIg0S4gaCi>Pcd49\jKUB$6Pb\#(B4F+@&qlY&_kuWm.PbSNDqo;0nXqLFdQ<(*(KJFr%]I\lCJ1bPm:]IU$46$c3!m
%e]H"f!\6@=B_&;F63iMJTnB_-HB2I-A)?j;It%Wf7PiVT1,JeF!jeU_4^,5LlTil0NpiL;=OG=Ypo277luVFmb"/N5OqS<`+a0PC
%@(Ha=ERi@5"t]-bRek<^`k(^Q=CLjnfP2.TeLn$P#d'09WNJl0?-L,`#O/I6%qu/$MJk!ZUOtb&\f8cXC8%WM`s\"/d+pp38qC6Y
%Ao4;b"[pC84uA?Xj8B1F.0u`Q&d^;!_scY\]5D3HRPbr&B(u`GS-DX6gCCmJ],'QGfL;t]_"RqQ1Sc-7>GpO4(ebnKr#+:!CBCn`
%K=V8q\3m58%V*>dX=^e,X]*@WUBbXCf,]Eo5Fr#Jl$5)(:?!YtiXu$4@Z?$-#9SbGg$I_RMb'a!EB3$+PT.:Z$9gcB4e$e(F:]=h
%kd!\GE7*<@*77*FI+oWRGasE#:O^*@j.@57F?ts`KkWnC+MC"""(9]J555ofJ`ugn!"1>br"RWM7P8rBPIgF6hc_u;i-6qF;]Y&@
%'M/df]m!V30,0O96TUI9;FN?fCnR]C-\$NhL?eW^j52u0fV$1qkK'Vp.qq3XKF^^61;nZspe'E;FMA)OpPq`B"QZ<bgl*r7Pfd()
%-n#4X(el[4e6E0i&?e]-08O=(:B"9U,s_f0O@//?Z-!:Ppo+X001H,D;>n6BRn@)V9b)K9oWh@sGXQ5gWTVM5:(SWJ'K9#fj6[J(
%8*l($$1,44<4dBkGQ1+haM3Za.#BK,W+B[$%G5=K-SKu]F.`%#"7snb0JO%-ciDA.JP2@p[;$8Mbb%K;c%s=5!X8nT*@h<L;Nr%B
%V/\>ohQ4@$&u\MFX[k1(,tPK)*!jq7g$G8IEBlq@8j3S.8Lt6&2!-eeGY;n!fX0ZMhZ3sfkO9"jM`NJ/:(I<^h0>9R:C[=HjoZRm
%8je0\8hEgU5O<pNNO-Q\d7H'^>rkNrZpk.RYit]t:)iR2XkSUJ#\!7?b+>lj(16+r(bS!]"&5XB+4>mLj?AHW-RG@.`j`"/o'M-q
%^Yc5"DNdjEP$Tg(#h%C*Z'1]S:0N$"kt0l?_o7/%9*9%S2.UaTZT+L#d$PXEHrgBK"H^M][ZRrDd'Ilm$sJ78ce`5RcY5=RH>B8P
%F@?[POEE"a?aZC0H19mnZKeC4PjL_`jSBHZT3p[`,Xhj!a?,1ah>*k43/Ar1Q03j?'-i@8H*m)#*gr,R6=Yk[9.)kG,1jL(=c@sl
%)1d8KkN"alnDh)F2>-7.)=V3GBK8$d9pHQ1f)XhP"/@[k#;1K+DC27EL%ds8"T7ecC:=2-V$H*a]>1X8kqJ*7/j&iW"0KlD\^gNH
%S)PMD>e>%+(&R0:@53j:!<0;+rcn:aRnr>/GgrK`#9f<T)MWLX<^-`#+lW#'5Z5<0luIPoEJ-GY&,8&@O,+7(AnNqFX/nTF3PEf\
%/-($biIa@/R3:i+XY7Y8Knf<\`!#cI3C89f$rBFaUnSU0qmDJ6<fWb.Ndd6IeFMF#g79\<_kaQn!6K)A&-slFG5)^rdSKp*h/"Nu
%,fnc9emDDh5.Ap.7hGYRQSHfqEh-YaK7&VLGL]O4/$#0dRZtgideM1#/?pMa4:u.i"#L`XUf(A<K!&/5o-[@7ouE9qhXinIifkMB
%Rd\Q)$gf>^[JLOQg>SYgJdZJKFFmU$8XVC'?[9JhFC;SRob?B*md2O&VT\<MB6LjsPq@#?PcrdC_V`H`a'uppV8\JcP+!SYn(%JT
%C,M5Aa,bob@]9N`4S.Q7,*QeUKpCInA/LT.,&>o>0tHuVCUDgrEXbHpSUtH;G6NdiW,*M!Z,@b&%Mj#)N=NeS#bjXgUJCnqI/YB'
%WWUNu5#0-aAR!UIL6osEW:Xi@Joa<bPs85%$pRun]mg:lQ1E6C6.XI+&"<C[2RfEd<V>3%(5JM0l8^[N"C!jf_26U6[A+JWD7!@J
%e?BYm[.gndTui/lO9V"gOO@85+L68QAOG3O)kkKVP'lTZJ4oM46jq?1=G^.IYq`a1`qDi;F_-Igp._=rKcnb:7kk5*I>-+.PbdoM
%ZA]grgaD:28$j#C":l1Xq.9BI3C9st!Hotj:FBNE"\Mt?GHGrJnYqgLKH`B#,iY&,*DNS1'saQj;`)EbYdTe&2<<Y[?h@r;Ho!g,
%NhpeHg.\4lG9K/[`G6N\@"N<qPGGg\V^i%+:2BX]3]<jc[VG&di-*5P2Kk5RF^j,P"iLq?P!%]$3[)2M*mr1J@,LEd6f&?VUe0.%
%"NNI/VHB.Fb-t<"(;!W(E,J!jb:24CYF8]bY"h;/24&TQ^jRmS^R"%.BH\onL,;Ql\+Qjp9.jHl#*MCrP5jZtB'!e[&Hs1NiJPqN
%XKO$qF,[utoRbLpci*=$5QNbF+:_uEe,ltUT]fdGk=b&%jM^>4^\^tG^%)Uhc]N)Kl2E:Y(BY[j-^&'b(]AA29,k/tMjj'U0U,_e
%n9/euF06iAloV`^AC,U7oNIPijHAD)dTtY#=?Mt\QHQ9j<;]+HCm3#n<N.+Uqr>$@5$>TicI*+]\EY`RM!d)ZaqH:@#(S6\X'Kb0
%s-hKfQ=AI%^rn2_!>T&Zk^:Og=TPB^`<EV-;*bO5Gj!rVe]OegA7RaKMI[G)Q)V;2E.CXQauT_!nh?&Mb";Jc`s87XU6R'Z.&lZ2
%Ur;]\gCfFNN'7@?I\IXnFo$RbJ:KkUIeE;drp&Psr?k=ud@V!jP7IamgP$##0TGKKS]hpQ0?Z=0k[r3bLtlYH(%rLH,R^*W2Xq-o
%2'm#k+F7NC+<L0"U3)tq^IHlo!Hhp6!457t1INt-nh#4*l)e3d)kc>U-R2?]#i(\A-TL-!+?1J(>M_ID7GG?d6cr7K+uO79BBR5=
%]_!Z.Pa%8?8n9<BS?"p922T]:;Mht*@,(:>apA5F:7jraTaQ\oaK&rhmp#p+gt)d!c1D%W&B[6do_h?9U?.!Y],*d]+@Jg<nrn3I
%@U^>m%@N_*78YmnmeZDiODTgO'KCO&_5_3_#P+%_U74;&0V%kB6f6H(aji5d61VV9DbXCsTj2_9(TN]d1'!:X*QR!n+lt`h!>$Uu
%-WS-nQ#ehpo_k#4TKaKo`NfpPJ1T:3ZIu-hZJ/T'PTi0MM%W1dT@A#3%@5]8j^^c#d?&C-/EO<DZTQ/3TbRAQh4Q%8OWo,AjX'md
%8gq'?Teh61E_5H55u$_kLG$i4`q2NfGS(%#@eVeD&gS\h1M2L7qXGuQ-PI%tFuBsWe)B"3O"=lKX=]%V7%'Gfr!DYQIL8mio"nIS
%)cDV(D7Y?mAdekG7qrHD)'=`gP:pLAd'o42QDgiV6RYbL:s#\MgGnsC.!qei+&a8XTu27C[H('oh]O`=4$T8Z=cm/Z4tNG#6`LAV
%gR=Yd'IU+fRT+=DJH0A>B(2!Q!ROJM&PIqnUE?4X#c'PIj9s<5O:bIV_H3BK5aMo[adNYEZ]Cou$.os?OV+Q#qL1r@4_tj1b!A;1
%6\bb3:Y7O+\h9J1XsL,^4gjOCdmR+i>=2oj'-MhDS5Mnh7inm:nD]X,qDG>he7%4-T[kmb73kJBbg"&%EZ3SJbY&><6W4K+A2I?P
%\ubF$@IR/,o\:-,Kp?DY-q;bdAuV0Cqj<E8ZHhj^SeRuQ*:DUF()#l[fVqCJ;3B./DrkLrd]\o^&$]@`/%TEnSR63TC''42+N_ON
%Kr4#G+jpG;N"aUWaZ85HkTm=*'A'7;9ATY64u;90OO-%Q1HN8g-MB'o`f&^_UYJr6decX:EUDk7nZql;4UiPi8`6Enl(Ta%M;Nh-
%kpBu?0rNRB9CIPn$Z/`dD_O0]-I]=XkNl>Q.6=@Ple[2!R^,^d;Xi)@?r+uMlnCpmf3$/IJ<^^/Z9!J>Z7^Po<8J4u\>u5?9)B6Q
%fOlmlZ:SVQ%$M^+;-PFuMhHE$I'hPer%]Bjeij6_kkM*_LQ]B9),NT@Qa@8+_"[E!Bih^_Lp,=>%U,bH9.q=)7U6@OB)&.Q8ia5Z
%U@3[\[2JVM,"@oTM2i&/\`6>js2t7a[;=3'D%uFO2/fE#B;2lXLU2!j0q#sKWlUq:Tq!HbSW`3;dbXJoJfD#17uRK'F(k&Vr.5]r
%^B"p(7n?*E^3,Z<6bM=(bjY*;[H,03='F#jj_;m+.DNAoAS"0uLJct"37pr:E3Na3&;+'pM1sH<7a)*/Id2MNM$ufCHqfPjH7jX_
%=N5?"/sJ?P'KB<&2k"o5Q).Y,C@hNtD\V\s:DHO]Sl#gq-K",=hR+sajfep<l/#3<$\ME+c)c:g3L6F%*<K*4^.PA`]83#$k;jGc
%GA^E&lI)Mj[dtk7.\L,e9'YtrU.OR^]QGN.HN0I=;M74^+.DK(=N-+K+mN1$atlWl-XE74;X&kk.99LNp?as:IXo/$cu[P"1OMZS
%(E`["r4jPU]A.UE<M+J3djpRC,19iFRBC^'LLa,S/OL?;BUWP+`5YO^Wcn$TUL;C'!.=@#T+XP[ptirG(>=`-<)XC_3<HaGdU^)1
%0o1?fgTtO;*cRdR]QqoiRE]>2X0B:%:XtcGkhW)(`(XTN6h!&X3b8qdk[X7p(9)X29$C2t(9L?sP0)@5cm=Mo!fDi6"o4#[]2'(>
%SCdgP@nloDdAr%=Mij)#P,.]p<Tn:"6d\FV8!@!]VXSG7cRie^i*)&2UNA\P61a;W:E6L8`B+Z06V*Wn=h9p%7kg0DNR5O.a&MTY
%8c=0k3Yp>an!6d-j<`SKH3li@/Ep@-5*:&E/q2(]am'FqYo:oXl`iZ^O^97.Xs1QVg<U\^:;\fQN?hd!J;Ps"oFt)Oe@sOQ%@%`X
%(LNM;Y/_cZ<%f?F5cL3D!*l%0L*q;]=Qe3AVOUnm)8b^dd:u:X\nX%XX/)`("JGiA*E[&VC+L&J!M?r3>2fH%T<IL,7"!"*e1nfp
%S:K?DQrL/JV)I)X8i_U5)!pgiqVEu?r1Y7nES)Z7;ZC>cA:foeOMO\,aB!jYc=r`hU7:&'O%gM?@.rk.nqR,=DPSq,Ua46_0:ukB
%CdHY1G=F#<kQ+s]KhL'1l+42QA'mCG7ATTK]smg#/==r*!diDaUAHDU"QRZB9o\$+Xl.?6<YlgN9D;TS6Ds']>Es'60OHeZdj"\)
%n@-@MD_7fuFH,34mYE4([gFOO[7i%<khLEOmj?.',?J1KEV9mg0\u[Za6;OblBj5>;Tu*T$?gX-1(b8UcMP3\Pl`XollQgF9kU9-
%F+a)H@YjKCZF<Ci<33<bR.q1^O/ulQBO%MKC=:7Q<QFPH`S&_I'RHJ-E'BmFCeYR@C?G-E>*OE@]RN>I^f,Y4Pdd(a`p2UMM!Z(?
%"ilA5$Y#WZ7JC\maETUIq=k"i(jIe[8O]E&'[[C\B%;P,(Zd^'r2[C-jI;cc[*H\SjHTF+kZQmm.U@iA420B6rm]JGn?H!LG)Ek3
%pu1KXX^Z^gRM;l/lW16YCSg&BQF(I1"Z>PBPUVC8[J3[Gk(%VE\K&2)n`?U:p)u2n<R[,6S'+QRI'3\EO2n:\2,\l;q*A^OD8@a'
%P8lnMaV6o(4kQ]&(HNA6HtS0aR2W#eFf4)9RpNhZ6))0$DfI&aC>Cn[960,X.)H4?$e'Jmk-`KXUgdZr/5JL@di+$eWe/\<B[VJF
%+#;'rUi't"Wh(lCgR?D]8'u6$5_.WWs1$f%#KfMtk-iR$CYdds3+qBk<@>L53=&B7m.-t-;)$V!Ead(6<VkpfhQq4JSZ6d[n[.tQ
%'R!_'OL_M)Pb$G"]V.EjF6B(errhLB>+F-H`NDb%PII4s3Nqt[g!DmH3Nn)%KCeq)c$=`1m(B2D%^h5:GFdd!SGB>PBNr0Mm(C?Z
%ftO+nTL*CKRp*D4N(0XOf-b=WH]9)QM%IAP'SE*l_;8rm=UBhrf+(7<25G.\X6.,#3qOEBgt+ggAbC"9#\R4_pGLHV+$#/Fl_?W0
%^*^h#q,g5n>KsW7B;j!-(6k!ro3W_qUK(H=b^Z2NABZ%G\4Jlj%4>#Q6.(6(d,;]':j-4[1mJ2(S8AH`ZoP@AVJ$JR@`M"*^]rk3
%M)qkJ=mK/k4!u$EkAXh`$^'jZKg&gTH'/7kb;48?*"M<t_BC3E`tWWj^)-KN+/EKilsgBjYF>*4hYl0=S!BupCaaSVr=OC\Tg!6`
%)pO!E8l-l9YAG9j6O?^[koDMYomsFK3nrsIk.`76<BmBAYRu_5/_M>P"$:]:Oc"1.)3?3N2KC4i_j:>EBK(j>=3kp+PA9YsQ]!X?
%rc@k=M^4G_a*cMcnR\kQb_^`jk/AspI;S,b/h+<mc&#^Scb#'qSCk>fh7H5^'#gWZ@BgMF%LnrnFs8:lqIXV$?Aa>>_O?0h"/VPh
%]fB'9NL_@!^d!Sn4"n/Zn;hq$oAUmWJ)#r&T]!dQ;"J-<.!r5$%Wc*S/PW?+F(/(CQ'9jW9jJ\e;OkoQEZp*9Nha6"Nr6tR%CoR5
%)Oh6V"#Q6Zfn\t4W'9Q%gqeb?R^'6#lE1V#oF]5PC`@A:@RG54+dqQ4VOjb'Ln31c#U;e$c7'K44Nf$p]#3O<_JpoLYpll6\q&"_
%SMaii\ZmkQrU=8d`15Hl1`s/Yiki^]kG;ceOl)dJaBUGAG1QC4h1n_\;K%4#_2U0eqf(U9(a[J)T8Z\AYrKcZa7.:%_&fN4q)CO,
%-'o5N2et5pQk<C8!RV("V?QO6"t7]d"/TO<mrt!o>]M-:?9sWB:i!?d`83LUrP`KO2^MM%c<]P%4QXg3T7$&LJO2HbLf0M5n8!ZR
%@b&@o<*NnYiZc+)J6/1=DMhOK%ST$Z-:pU$F=p=a9DoF.r.`os\t(_^2">&_/-[slk`I(]q9&!!l;RD@QI:?Y?.@*YTT@XG[3f_M
%8hlgQ$6fOX%@t?K'U*B+^+8Gh;3dPLA5h0),WAZ^:OUKL]NlfHAc!XZ&N6MX`U'=:=j(AsWhE/qf:tiDjS.0hJDZ.47J@`Z(LAH5
%pL%5pAKl/W)-,gAEYBdf.S6P=!uR59^1<(66h6VA7f5TI%N8)&4bm[EaS]Qj2YhtOA=?=Z,J'l^86eA$U@_F*$^u#S7$+TW3(tX'
%g%ce^B8Al*Ni8Zn@Yo_t=?),YiKVsgcba6Raj+W6DbbTCE.3B!)%06kBso*Mh[`[bXhF<ZYg`>Ve?W,VC`.@;;5DYW0,&ec(XA(=
%$Ge]+p&Vbk@cc9Q6@V,?iH/LmeTh>(C`P_DlqK8O%Q717Z;OOt(AqoMG/5"u@Bn;a8mSbj2a61$8@6[qD(&!#L73P5$#eCV<1,Ho
%cC4+?Luft]mZj#uKb-t:,L:Z9U'sM_.hU-qRVslilZ#7[$p('%GYUt7oo.lHB'HKIh#RbFW[@>7J#'dn9+<u';INEj^.<`HKI##'
%8IfS?8:Hk=85mNkTNc3@K%cI2<tK&tB$tu=-aUV`o!M\:%+5>g`1,j1LLElV0f?FeOYhCc4[daZf]sChIJ`Q1KX^R2l`tV"K?p0=
%Su@';06s>N@uqaQGe\b.J5T!WNM1PQZ-!a01gqDe)k`KRFfcoY-ZI_U$TN&-`&f_LE)"aH)LQ1ZHokB>Q"..d+_cbV9?jgoTCS#)
%;_)<=Hg)=7BF.2@&1#q58RA!p3m#qkkbV"L2[Rc:ll8*e+_1^-%8FOgNQ4W(aQIk`W2ShR+t/]^agYj*FXnkST2>oTh>qnkBqJ+W
%\MQA`P%`lW!)64L;WXi,68I]oXe7sEJBC5B+/54rkkK]6:iuNRUP@[(J=bki&:QB<O8N]WP,82RRoC4`[d@ae='n#.gK^ANd>\Ml
%12&-8)r6""Luq>l;50-G"%DK/\D4V)9s2\&f2pt`!@5#',m!0h/fG#7V63Ne,:+-sFGg_ILjBfHob@fXnu(aSJ]S.QSY&l"dJ8Ks
%>uTsZ:6PZTQ6'XUM#;q=c%]7*YBZD*>aDQOTTXdbUp)mW1-\nQnsdRr5hNuo)?+_QAFW928o,>h=6?=QSkn]P)GMpj;+T+L03FUb
%,HK`ZF,58jS&[s(e)l=f0QsWDnYMbG[BoeaWoTCqdtKqA#:Gqjn,/*62\)5X=klH_N_"kD<(YVP[BHlBJ&,ip^;3'66Fr9DI6u^9
%::.tNQ(j3519EO-a&&@A[YhpIU64]+@Cf]:7j]%q83\%(6Y`'cSWoS9X=Ne%jE6F(F;^6<"FY#Z9t4iCS"<'5]Y4M?@tr2:%YW>r
%hE$FH/WaMJDb/_RM__dKlcBHYkm^oV0).<FH8SGm-#!^eKXEa^58aaF'22bT!W@VpIJ#9c^[n@Niag0?#teq5o509&aje9<PB\<B
%K4+iSHo:a%)XWA.GG]:$q_]qXTqK=q@PhHIbguCu)VQQ:(T3^=c'ufkf?@nT.JCXrVFt;s*trTkm*#fL_43Ym0Su^6]7ckYlrmQ&
%ZD,u^'3+>#(pngdY(@gPs7aRMs86aZ@L"lL(1e!9LYF6pLlEQHh[_PSrpYHB%o=O\_eG/O?aHZs,BV]jH3N@mZM/_#$2sDHUO-ri
%A[B5E5tH5$LIZ;a-9]UeEpud`Y[D0Bm)#SZW3DusTp-Rf"=n,CEG0GESuUao]I*M+a`'ZRE9TFT@.ABr*(tF&`0h6Hft!e'bG&)X
%q3%M03?8f`.^L1ASsC?(4#GDtf=hDO7^;Q\r<T6A=Ll)=Xifl;:In)sf-G].eauh0m[&rh9:dX1`)<H]m('8iHGre"ZlnLKa[*:A
%]p<6K)D$0YI5j6=66fTYP.Y!::1G2]8HUdqq@&gt1s&d`CT\-gP,WJGj9%67M0`"9:M2.DU)UWGf&S1jpt9a\5-<ai!6Z*`F\M?O
%i?PkSeC$`0f3]c7mj#%CXb>CM_827smmlCAr:/:3F/%[aXfT9*-g[@e:7dAGj/lPR1!*\7#2PTP+T4u_O.Q17Uachprob:aHGC8G
%_i[a^P4($Ga9a>f.3RLs&"=hr&&hStTBA`A#%t:#-7jLq/^G`^3902K7ku2(8QD\0A=j<\aP\e!?/>a4"R5MU?SFN>8&De`N?d_b
%/mZo2iJHi'\VeOuhUL7PNX1Se)"dN,.fg6m[aAQh-K-c9nO3sgopH!2SCmJlh6^5P'6o[X$SA1pR13g#=X5>l@0RdI5k^Z=N1!<:
%Gg`oo-R,in%,1-N8XAsD`hn\4A\NV+N8GhthK5eLV*Q9I=Gq5H2I)$qjt)PHfR6'Z*P2-)G&IOS"r(Mbl3F8ZZCeKF&:C@3YItbV
%K^0-p7d,hJW_]o\28ffbZ*>&lPA(r6%>=FF!Kdc;ps?ic>^(_*.h'2Mq:m7&U>(Sgel[ITJQ[KnC4(29h)9qu]uVn3;D>:W7m"Zs
%2n@Ij^\(_M)N$)R;*p0p>+N@H5,NsRDLXmj?8CZWduQA0DLDZ9:'7It$BnBN-+ao&('[0jB=:,W2[]j\a@HcXVVg\:!bDpr+=md^
%>P)Arhos#7+VG%eC2/rMlQ.%&CtKXQ2VW9dH&.p5EcR%*@*1R*NepB@T,7_IL#830=D5S2]d<]E[WHMb8a+FYQgI,;"lW4WCp]Rd
%Dt+T&#^N\[cU-3fi+F^\E%Nui"2`ObqnpoJ(Tc20o1,h#.?jntm*[rOQHGhMfRpio^4+$:H[P6(-1:iN3HNe]la\k_<b:6GlZe&7
%T>CYcq#P"49p'SP&0G##5kmFT<>LKE]$X1W%T[b6pbF])[Y.0QX?'tS(BZFrUpRL5#Z4j\p*gS*!9p%cij6pEb5d^;NG&jW48Unt
%rOmG7Ta!t)a27sP9!\f96SI\aKbGjiQ&]tHfd8-k@kk\[9*fR;DM6>4J`qGs)ru&SJ@)S!fQ&NAqn;J>#RrA$SV"!H8Aj$Ta-\;U
%r:g:,7K)bP]f5>M*(DG/G,6nI2T!daH+L+$W`E8c^kSf?WE'u3Kai2j'kO9k[.!YGek[_aVs-J!Pc$kdbicfDCrD_"M[Ka/[=0V-
%k6?89%s\St?$!nU<NDc?IZ"`]&Y^2V?Um?GW+p'JC2tEMA4e)m%<T2aL)'p4O%ZD\\`G@0b[>/e*+PMX3:_]a_$EKSdZ;S`,QQLb
%!YAS9#'84=M9CW=>#jD">2a=_Dd'C%U6pGY(Q0L*%l#SjF]fAXo!aAOGknaCmB/bf(,[1g(P-rR'21&Ka)]oB#fgMGnHDHAXMO`7
%au;&or$lr%KVI^J_?6OU(C)Z/4K10@Z_4,lF;#(E02QJ:'uUgV0pC=!J9i9a#`FdK@1dW<lpSr*Mj9)A(>@c&R($3M1%1JI=Y>8=
%MijrKEOUO&Y3i5L7UkQ:E%o@XI!F4u72?,*9X6Y3DNmT/E!$O4hM&Gb:pS9CM6[j._lV4s,Q25BTmIK4mC!lT:>rBG=-SX_B8(q!
%YBgnq,[/O<1I->c0A:%q+P10\*j=f&_bFm?SWFb(&Tons7--i\Y='qLfGZ^!@^F$SMk(M3/5!a\[32SJ:.6Z+>*Q]>CiPQh@Z)H[
%-<l/IAp^A6>6"lEN;1B=@'rGQf*%ao4niGc(?=uk*^D[?:6]QRJkEE+#[(aala]6SYhBB&>G6#FV0g?QP,bt$GPdBH;<Fu'.D&f'
%"LWV\E(+9Jb^oqk9>6d4"Nfrg2B9i=W4f&t*0mAqD6r7"(X7o6C9)2kRm(gkOmG!<+\*^n4Wd's-$@_ZfN%VL8&8u*BZq3K0<>&Y
%k(!q&2`#N8T\OC!b^P2oTSmL1NP]n54pG<OiqH6I>BLJAIFisR1!47JM-[TG-rcmp*DhTU;A;s0l2`*X%Zm4"#MT_:VggP`%M7Os
%2<ta6S9bA1cI$;T'YI)'moH'UVf4ICljLDS"/n[12+o>mX?:5[5CfJ?*d'U2Y#t'RP*!5YaO2;17Lp\n3Rc7$"1n&3rt3ab[.S+>
%/o?D/6ANeS-!GWun]?KRHUV;.MY>oEnDEm@farQUZI+HR3/7?q]qWp@o3[<Nho"o3CAuJX0/)W`p@A8#O6!D'WT<l0Rr]6G@<MUR
%1c,TpMIMoh6PYr5gTfA"7G_d?PVM^2Eetn_==GJps&=k\W&:I1^>O_l9o!V'GJjs'!4mT&J;@D85MnL!-a]W>^N&kUZ#&1^?a($.
%a_(L3VO`Pk(1RrVR2?(_mA?Hc7qY>5(bslh*Pdo_rNCkPmP+gBkYh.1=ZScc+:b)X%1[WO::nL9fJsipmomrP)0<@=;QMFWhr%iO
%!pOn.@a[?^4Vl4gL_5(BOU.`;.a2oh`7kIaf*Er=J#aaUR*-^`FO`)Co\pk,T`pA!!cEQIFRa\YTed=a(&BHebGm,d+).ut<Z1p:
%d3H_7,E7DGC-:]@>*BKH&&`SiAYe3jiuR:3=-N?E'J9.P!#K:Ih8l1X@T&<l47T>5R71C.3'7pIG`<>R:Rp<I#;Zd6Q1//c>ja_4
%a[X:pQ&//F8W4&2Q19VLk"[&YS2[a_pp-#MKZFA]^(n+V0"i-)&GX3Pg2,E.oOf_XHkXmM2[FV[Fdk[p2@NL/Hr80PT?uAoW-\V^
%ihT(RA<^bkbH:)%f/W>:bcWU=S)SWg8O(fmLjQ0!KSs80Zjg5tB\[]A2bDQ:_lGW)<W5f&g<^h\O>+=Km>4MhjXg)o`QoJo'5>=M
%FiePu9\)ZY3c#83\C%WU#D2A.9\Rgh+ED-m[U"NUVa6VcN3h0f-hX]LXBIYD#7#kPLYHbhC5?G!,^%"%Qt=VqH+YbE(<p8U*f).:
%h4l*=/c7T)0+BL8]]8"DdY>pDJNC-scB.n8DP$eej8g#HL"@g!8\FdeOE%n>70k!nce;"^?'Xl#\0Oc4(dK#1mnZ=L6oF2l(&b!o
%&'u]QU)BRe!QDo?^4+%KQ["%f8H^fVYI$lkfL';ZF_$OmQgIOZO#ZB9>28p*3.fZ;Y55^p50()DLa]"a%tQ93$f)mW,WoA@/)C46
%AE_D@D%@eJ9,k'('#8eCF)qVK?G!\[U&CEs%@<mj3-L#VD,30jXd;+!M4kaK-THrfXqr.u>20_8`Ru,h%H57%&+p7WIW-of;-:;[
%#GSiH!4iBm!UNfN`f.:b`t+h]"CH<G<:GV.7eRG&Da+Q@AGQZ.IXl=sLX4erJ,N*Ee*slDYb-pPJP]F88,fiDMZ<OB\,INUL'BpP
%Ia%Q%kfV2n+d@YMU`11pR*cg"[):-4h+U_^s$HX$MgkMV$p5uAA,$N<c#j`<,:_iSV4XcNJV>ST*4rg$-cqQqD$=9+@o=Bi-"&]o
%_*6$U)]TA$^a4+]IHF,3PZgr73A.+d`]!L/;\T[`8:;^>=fC6P6SfA$3f64TV8f.MOpm@dPW;FtTuWT-U'kJ>fK_MgG&RHDbA`5J
%*Hc!(Z(V\W*oQ$J>Cik*66V]j.\$a)>9fX+V.lB7h-5,GA]u8Y'?X%<>J_s-K0Linpet1aqMc4jI@K!F<V\Y1cuqp29Fd.qEaUjU
%=aFA>N#@uue-6B4RGtG@;q2=C)$A6TU5fa^gLCGT+r@uLH5'<RktejW6\R]Bg9*DoeF[6UrNgRH+4bRNiN@O'fqRYLe2P>CDX?_Y
%)SaqOiNQc4O_1uNZOO'*ROu.KVd:PEs(lZoL``k:-6iq(7QCin.E"J-87UKYboi*s"Id/-m2D$Pp-:l*d*0:XKJ<i.5ViL0T\4ln
%TG`iSN)01'NZMc.5`ITFn!f&W_-m?6f!L%N97)SDU`%*[HQ+RAhjP$$7@MV09''!21t+f=Bgnn=CK1fuMDTqeFH$:K82C>Y=Z#Y"
%4G(U'oqH/m#CYU"je=S*dGp%66q[*Q<`bRq(-jNV9$RuDahN=W=l/U,@Qa27YT5qg=ujIbr.-?\nqR-gCi*Qc<%?4O@Oa_,5Io3&
%oDhs2<r`t]l"kYqa>Z0prUKZh%l6<onTQ!#7mb#MatK;a1`A@Q$dlh:pt]-cCDrA3,46<ml?]]/bAsN[@oSE'o*6=%h`.,Sm2QC8
%HL++*#=,>hj$rbQW;B1JU-us'/R8Kn'EBF@>hA?F:l;59$g'Wp97[NT+LtenFqB=-h%S3PJtT++<O@N(aWrr2PYD:S(,2`"#XYR4
%j's%e^M*KMC7o?he+^]kF4$k'-)ej1a-.a2$d?N+n0(BP[C8tO8Bu;2:]POVOR=NIH;k8h.2#&\(EF%-m=]R[&^d6nh*M**!+"jK
%pJ7aV/07dg;c:O28JZ?DUm?#$hL`_24Fj;V>EA>]e6?Y_Np>"tUbACCCQO1D?(TM*J"^jkab/+bRN#?<%HO$;Ok!:o?D^@\V(ID)
%Fp(tn<;]'XCCe2W5\mfB3,":<./I3ChC0@Wc$pnbg;EBN[?KM!JkMB[,3i@LT&>_p6U_m=+*[dVekVIeAl_F3di+dZA36h-=sJ.C
%Tb(ms]gKo3gNsWJ\4=)T7EF],HG:2*(Tu.(S*!^d&6^<V<,Pb*Q5W'3F!*=Ak.#\+W9:kO>U+W^<2+;!J'TO&=u,rrB^CKbBBB=:
%Se)OU4iW=@B!`?[j^;knWdrC9L#:ElUNAundQF:[KM9F`q\u99'2glLB[@-,@X\`sZGl:):oCW)ec(fY$I'N<]2B_""A2I@*KLUu
%eDC:e^EDa$a5=S$bgIcuk;Hc0[E]KtID_%N?Bd6_g)Nq,Ya.8b,pfdWLDt64Q`fH]IFY==S*]&.>Br.<ok5\5bJ&\6NtQ>L/pDe1
%Q-t9RK4gkpk?u8)_#u>H6aK$`?@N3[Y=Hkq)AV9l#(F_)hk?XBAIVHm$@YT0_ac-3YjV<%V0BL"R0dLY6Y(M4g_7faNN3Cdo,UL7
%mh4kXhN9qnc.L\gJ%IZ2,=!aA_,%7<_-p'S^&>l@>3'fE5U5$mQ1JTdCC1TLA2L$iEVWO)('tl$6Zj!#U-[3sb/F#T.Ot2Q;%ZSu
%V5+4eFR)325OU!HL]bMnS.L-V1Zp9Mr9FXBn(BH=kW?Gen"H]nq!f.c.20SIVm'Ce]4U.A$uT[?S/7^Q)0Z>>i`$\Xk`h\]:6H]Z
%**#&XP%fQpSEN+FHHu;9/-Yj#?<T$aI0c9KVps=`0F^L[e/OQ"$^.'E'9I1#]ff!#qcQfWV]M[`&>nu,raB)QK:YHqWRA?D#!Hnm
%W,8k\=p0j=+C.U-o0[K.$0pfsG(X*H7#.Z.1<c9(nO#,l\fe,#18kg*f$ZPL,<q8pP2pJHUd'uEdCF=@W=&4VZA2O54oU_bRL99P
%H(UADL/Y$io"%:D+*]CTc;%%DoNjXlS5L@:VYoHd.7mHd"H_CWr*,mTn="?#R3C#FQ[cO+!U>VB4]ZXG\dg;C@rb*4fB>qKSKV:\
%E=R;D1@$FoFDHbs$tO]GR%A+dV>so"`3u94gXc$plH3"^&1.<W"V>e1j%6Oa<-rnY%S<U*c;97"$i.(d07M@O%l1?1K;`]"bL=Yu
%D<CN9SmIG/dUH:&B=c@1\TWigA'<S<Qp4m&n&(?7_Q+HKQBUAf<To1_$0>*/\1iDPP-tb?XCm"`,nXWSAe*de]e,@e92pZkG5)O5
%@Tp8;&kSo[R1fIlH[]T(&;n0A%8*EXF@SX=<JmDQ=f*4S1'C.<bVU)<?gadmX%pB8f,3BdM#I41q(&A,Z%;_MR9P\QjcRIAp8U7G
%An9@/I8ujOAXosH;`^38<VZa&=60N&?Bm`OIT;sh3FA%ACW]P(d9#Fl.HU9'4SkAoFCF%.qQ>$Mk:4;s?E.FK#jLp'njm'6RXAg&
%b9L$+q6E+\G)Rt8i5a+RaBk/CBQun9o#G],2tZcSq#f`Fj[f[>bOS1QoD5aTda-]TQG9G1\d/W]'ui,Al5R+8TWkl;/:TP.hLCQP
%jWR]#Ec!JQ,>lNa$F'SVhg`9iIl3(;5$jOFnrVVLns!Toau#l[j\]aDIbDp8=-Ms&rj)H5\O:9]gaC>?Qn9\aP.`JtC#E9!dHhT-
%HX.]@^ToIuQFU_d?C.RHGe>X>jRmZkb8qLWn&SuE?=0$`;12aL5l#PJ5e#A,+g]ePjY?J<fB&\L_X9\sVmO1QH;NfSla13qhu!%T
%cZEeW!,r;;cCd9"VC8*H>GF%`5KfSmM(P9kht^Kjh8Qf3Ab-f:T5@*9fjNl@D&<dhhG+GlGjTsT26HO+l@q:s6IB)pJM,]VUhObt
%F(Rbq-WY,_4I8G47'\(mVV.eoU8.jGI#P6ekHHZ$Gq7pc+n!@&%db_2:e\/4j0t,SN(3*T"q;74WjX-DPojdK6he0W*i>V9b>g0?
%q5<E&hmY36`)K+(]M!E"#"E%(=QLbgVl&tl5O\Z):1nkR=!POS1/"JsH9clBlN1J-XJX)HM^P&+!`Bu5,#Gf_A=T*Qop/jg3/c$S
%=(7n-psO8pp=s3P0HZu)IjtsS;`eYo[XtJJ>;1Ftmj>*AUNOZeKX/0D]qc>@H^n%?&?!q]UtN6)AoU=?8IuC5e95d_S8+17j\*<8
%)2lV#WBaAE:@Nfe;?"o_il&92A4Orf>uPWt:hLH`c64'?q/lBY`3a!ZS*iYj<@r\"KSg!6GZ*j'rEH[&g/Jb.Lm>n0f_oT%2%02.
%JCur^n?Miq@%HEaX'M(>O$I6W53dF1)El8&jC<*hJNob&F.;jOm47kleZ"T3`(h/*Ah5YaLKrgD8<3u1_:lJLcLo]/cYWQ)W;G&+
%)9=>H3pn4K1*3a7ND'?NLI[[*P@lQX_SEi=d[6(\)$R5,#n%u!1gNW6[6Niq$rD@YkKo1-:G/0NL`f42&"ND2ebW/XV"_,"/23:.
%OL-5tdbYQ<TnbCITB,+)n'i%C;-t-oe3GK$6kr,%m>_:JniX_h+rV%X:Po#Dh\VgFBYbhG%2r36+%MZ^3\8p#&<4trI1\5<-=lS#
%E^9E;D4o[AD2s^g7tJ,gTd6@;j5g)@>D/1^YH:?u\-2jX-Y[<EHa4Y_@rF(ihck+pL83.b%h.&a"KYiYEZ8qO*m!_:?;[:U'aR;W
%-(5]fH_OQLlS+gt7Lcps=70oX*O6eUKK+:8`<J5Ho)%1=SNt7R`\km`-Q=&)R)jFa#8o'RD"(CDaBh,qI-=s.=tKSN^I50aQ5RaR
%a.)&$#-Ob:_HA3V0p0+_^uQtsCfR.#\iLemG]@-UY]51)4/t;&/dD)KcR&BHhJ]`W^`Q?Nlr+*\nDhSJ^aU\JQ-!rOKo$dHs(se%
%]/,Y'JSu0HQ>6:*(!6h_4bA6@c5nAI4nS%Ueq'CXR^.fe$])\]/m'70";K36<Y/\VJEZqp*q=#bU]>R!/JZfph7Z3<g+$$3+E6t+
%lB"i#"5Q;F<:Hp[(]uU::LC-1>e2aLrNq`<6rL?h\^'YY.qJ^\WMG_]JBAP<Z/BbI>ngZj-JE!:b%D?YJF+RMF7K1mK?A>FZI"B@
%DFbel08]7o.d7N@0'JPWX,T%o"B%X<E>Y?:QV"-,]lM*"C7BR<s1c!dBshhKZGlYDocHr,RX*7aRS>lS#/c%5_hRHEA66?Ypi_q%
%.W#%O4i\BOHHa(r5'c*n&l.k5/588o;CE6:8+L9[c/iS]]]m8KV,0,ME>$:e$u$W_Fqh#3VRM.^3Iik:"T_J5BN&'!9Gg/d)PbC3
%Up2qbEdg:'_q;F+AHG=fFF3#IC.ZrU)HUqSV)H)b*nHWpd.1ZR'euCq>m[:Z[j?d^k8^3JkQ7(l<nF>n[n/*Zp24)l.9C,J0<:0E
%Kn)4$%j9#@Ws^A%2S-\d>.;<pB7AM<RsXfUM/!(V3#fcr"8[mjcFPg+dJ(1/`25GWV%(iCl#tfo'F1e=Rf3&d[CMl<n&ZGgda!s+
%Y29$e'b?Dj"JV-C^?"Zq$SfB5>hs82A@tDo]]TP0^R*F@R%#kCdZ^C#XW8J_l=6lj60un'WHUGGiX._$%=a%u"dL4;>&\J%TQpSA
%3#56N(&aGWd!(.VWhO^:0+\S6rS*/u.&U%80@<Gk\2U\o2hPIbY7<o]SjtdF#4UcDKq@R?o7WW/G(gB(Tlm)?rkI;2'L/4g9KH4G
%-Rs05L&*o/2fp(3Oa.d6q\J!`cNG2Fk=+`*rV0WW]`n-dobbS/;nn@ZEMaq-7s3&^T@5uX%U/F!o^tW@8W/V3)W%/,6'NrQIZJA(
%0Z-ug&^A_I/Q"lTR<=[7otf$_Db'`Z$t^*%V2+]=a54^&O,;kp)[gK47;T<n"W5=#.E:7HQX=[cqJhqGW4"V19Xh3*^>N8B[CW%N
%\Y7[@WIKio,co6nbdXN(bLP6LE*oZd)!5$#3jQe0A]V+Dm))0=_P88=B>.^OK`<Vb\t]5E3rJ+05e@n>ObEp$TEFkb2k!Ygm-W4l
%5kA(s+j6Z_Q<+Ml1\iGcY'GO3&lF6I&QG$BdU`[\egKVn$cQN7$HbgLhA8uteQ"9U%[bE"GpXo3o0>bOIYe)Xg*&ir19p:5)dZ$7
%>I,>D56*s55BI=mc,RIlbn]Q'A&(t&Zlf#b^uaaE+862d(AHk'\jqA_HjFcCrI8D:&?WiudtU;6(f(6O20B(XMP&-Nbtlg,Jd(\H
%I6QM9LN]9$m,@'.5]C;!5%f!P3IGXd:aT?0!D96Roi(c2b<532e6cFgJdMd_8(1,s,+'q^;g8(K0Y+6EqnV.6(;NL/K+n(f,s/FD
%O>g@n2@mf9T8"-Z(m!FW9uR7`K'Sa-iG4\H/c05!I"EME9J<ji<(I*X=4QI)<p<!CiEOp!NE)HijrC9CWi+`2M;FBOY;'+pc=26g
%)[9<BZaB73VG+,^_2C6oj19k=0A!\scFud$PZ7*KB=k4L\)>PiO"j=7r,lN\?Aur/A!jdCldhu\<;g!u9,JifUu]tL]g`=Yd2XV_
%E$JCLop["NI0%I!M>'<GPXWSFaMu+j0D!rG>s!JRAn5_`]!Qf33%d>P96.nrrIF>,7dFs&(F'sdrAkGW#n8I,([lt\o7fH%T_#e)
%'s)::aH#34F@1q#WV^7$rbZDQT;1ZX;"R\=)s]bl[T\[^7(ol<!-cBHMH-UEfPY\G#n<oa45V\7VV)\oE`0`R@D9Ma$CBtU=QC,N
%lID!=US,:c#0!I"N9Dur6X9n'5i"s[kfO=trkL1lKla[FAH.gt_hfRU1McSLJn^:VI[EesLK0noD$ag"=>e@4]Z0(_1j4kM+''ZD
%I\^BZ]0BNHfH*kFMo3`l()s`Lib#&A-3L%D*]f\bGX*F2q5pEh:3[d-<5)>pTFk=95T5V?Mi,Zrof;A*Lo$it@-jp0D:S?eDt,cu
%I^>9sqPZT%\HLq!8-<gJ+=iKO/AV0o>aEOS$r1\TD0F&Q21hp08D`VEQoOoUo^@-JI-_+!B.CV9-<=#E:K$dET]$3(P+k0;Vf6p(
%[C_8"diR0Hfh^X<J]qUCN2)(*-s0B<a#:SmY[s\S1@qp.\'$\":\YluV"mrj%qt?bKgNrr[J6/D?DPH!CtGlJABOU[$.3B1)6[6\
%aZ5?Al2LIqlV!+4p:eS0GuOO1LQKjBAk1J3GjjfSGK:6L%S*mllgl5^;*,f-`nl=%Oa2u'O3BO-4-.T"bIdtXKhm8W!$ilU:#Qem
%"iJ^L-;\4H8W)Y+'D'62\F(!#2;S8!;$2!_hBqUDKh`Q+qsXA\D4IQ>DX8dhTZ,dgor5N5oL?4*Hq7F3;ElN&1Y(H'dt%V6P+<d7
%k9K6.?s$1*&!<6Bg+c)&\E8#`[bq%u:;N"^*KiOqQ2\3oZN]b[([Hfn`63;<npEn#/gE*:lup*3IE\as\)=u&O"nktqK6>0`JV<J
%U"DN8'YUoE-k?QZ`H;(QBHn+hd7&7K8,LZBq=8ae"?RN5jRa61W^W:MDfYF^c%cZ1gQW&TesSPEV:f)Fcg"-l(@Jg)jkobe&(%7N
%h3&!<5BD*8e0NeH$`3,]=ng^YJi>=U,eNQ-S";9GMF,DcaS;MmS!Q@/_\'#(Bh1'L$Kd[+IRdp'jM2.PG>MR9m:I\I>GIc)DX/<@
%OtDAHa)F:bYQlYXTXs=k\>!9Cba\C#0m_m>LunaFqP&&K]-I/o\-YicX&]!.g(LV:b4*kM$O(6gCT3@0Kta?hpSEWd[r[*A&6H/9
%C8/(T<9h?eDu#`B7D=4s/s8pXVkZ]4/mXo9\[G8DLf<WCgb($q"\^Agb!es\BU*:[Rb5MYlWd8/oQa<U>'XmFL(7;!YPWL,d$-&)
%3XrnUiq&#`B:c[G]1YH^!R]3*C^t]Zne&9TlG5B4GuTQ;6f,6e0c[Go;tLI5//KYr:i2U-YOZ@m42P!ql5s&)MT7+TLr8m32c2b\
%.%TEUqWc%#X8/OKh;k#/1V3B1%CGk,R!<iCC6o#kQK,B-`,gVB?Y`3nP\7%Fnt@o[I'#ElN#'9K-<F-L-.ZA?(tC!^Joh/o-<%\L
%"aFr>PGouZnW"U@S-M!J)L*jpi6$$S4uRpuN_-AL-l)TGRYmsO99UGT>"\Kk)cM1-Pc@=b)XXLaQ/!Gma6K^:U3,WsFdF1S0N;)b
%c0qrJ9q*37X+b07(jn4<k^C=%pj>l_k/H+jEi\NKcGEVO]X-,$F8L&n"CGd6Dih\;STa+a5h!"?d[pTcL2N_YU[-f9bZX-^]!UV6
%:Z%m!]<'$/K"F9hN+!&M?Usf$BNh#=NOJdLKjO?feYZl_6FY]8H7WVRF?@gLfJ/AEMl+7>eM_YP)q0ij.cf"a`GCHX6_Smd)VFh5
%5*\rY_M6+Dr50nF8JA#F$6L=j51b`_R6>:qcI1]p$iA/4Bs5DYI>A$T1jYJ"V%%>Y*q5OR)QMGpYB7-F.-e6noZID99YD't#qlPg
%29g"l#>2llen.Au6Q'doCj%hjU&hNGo,oTsB/C"6[%467D"UTe!=V;SH57K<[a"*#-G0kuA8@Ng%#k=OFg#f!4amD:;/1DB,<MU%
%NIfOciq5\Y,(6bV*8Qan(>h52TWbe$Pc;U\qjLPNhdsu@_7ON?oVV3[o3utOV(`>`PX=poYm$ZaV+bf!KMB8S>goJN+W+C(d0N8s
%Y)dVB%F/@]A:3=(hU<(,"AP7T'bA5UCXHGCPMS!@buQcuA[$VKo;U1sns:B3MaH01#WNk$j9P:-O!lG=q09Mf;k#X(HjnVsR/\oo
%kpb<.Ei!F2HJ\CEnj@DjfHFg*B*Ser0HsGLEP="D5G/3Ta't!k2_"/ZfkKSR%;A):ZPOnN^@LG!N@!#uU\rbN%'%QtWIBa9=\<1!
%@'"f$o?^^b#/b,_^)"(8_HL:I#!'fV_mC`!eWB_d/fR/S/musp[3caSDP+s&'E0p1QreBemft3!H7$*8SHn;3DFYoQK2,Lg2s>]I
%?;]ZZIR*jJ>`HE#pB1"(_`TWfNpLan1:U`LokYBuW79uI-Wl[34p)!8Isl=;r"F4Zr2m*,%.iBKi7Z((Kb8Qs?d/]4/<hb<%+eY<
%?'",KN0Y:9BU@<!=A"DJ0R_h/CcNAUE*i"T1(aP*qStU/7AM#(C3qZ<CG+kMX)0(bN?\2UdC8@X3X;l4*2n9uh@,`;=1fS^*fpM$
%^"a"#<>?s\=jT.rnW]dZ+n[iS)=/07RbB-[QPf\.>b;6OWKc/4T^r,#eIC+8*pmE[VEMXS39P5i@u!0qa."BZ=n=%pIHf$[X"BDR
%/L5Rb(L,V4\+/2]AS@%qR\OBt3AJCL;>QKIZcdtfPHQ0h7uq:K91$$fkG_aIAfK`Kf;![eJQTB9lj1YsF".m5inVJP%[>6>C1A/>
%N7QLFlBgk<g"FPDqi`mKd]6+:69fgX/MaNF=5SD<B>Gn:6tEbuB<[ZPkI98LJ(/f$k)lF;jT0A2+)dL^*ueDF3,NOket8(7]'%*s
%@n.?5b0b6-I"uT550(ipm(YuKbAWBR"ZP"^NknluRus7hop1.@pLJbu_9`ju,pPR-Zd=^-UZ9SdG;0%1FlpHH[P@e@I<]q@5TQ)\
%SLdD(nEAq$pJ.TEGG+NjjFOI/cIS"NId+b2$S0-$/sYs/;[)$r%pf);DW<.ansOrZmVA`Y9fohV:gZ>kX`rF3SrWfrp%3B+O/XU=
%]4K<f6FU.BcbW:sT;mM'`Oe+-l9ON3Xk*3FqV$]p-S+*'*qE'\7+oV%%j._rpiD.[Uel,U"1j^coQC<nQ0%X]bIT3\4h8$@6+c9J
%]3Ak`gl.KsDC=KTD^PmQ2qHRYM2a];m)Sbr17pLUas3dk:fU8)!9_1`Bj13miILXOl_@jY[gkI5ANH"#HaJ(4AQkVKWsp%8#_cjq
%)H?nfA6&c%N8j7@k5?V\g[X\!DcnkPr#iZ`TNj&u:bh]'!#?-D/H7Z;S;VFl)#J>i/an;<8Jd_Q8CJ?s;)"ta<<oQm5f7J[b6nf\
%1+;c`0fM'Wah?Bk#'V3X#'YT>K?JC,?#`(g<^1L'mKgk9>lFe!:H1Vq9h+@RVrcs9"7?L$$J9cKHS$R*Ag@S%L-'ULHc*PMLYq[P
%g^uO%[E"5/o_B4r@MTuXS#1a">fKR(*\ENs[i23"8P]mPP:eF9qEau*cYPus>.X9o^>=$76fV#>oZ0;qVoshCPk9g??bKS/IFG*U
%"5YlLs)<`')OKe%=HDf/2j>q%8=6oe_tn3Dg>CU9(-DH?7ir*q!lbX1'I<,78e6>8r^(SG5\u&o]lDOga_fR:ro"RaL,ON.h>T@S
%C>lXOqWGWn]=';LnCp1as+,aE]bMC.%FN)`7nEC4+L'dt+n1!]oG8aNXkKkar$f"T+@j^Emf&W0*$uY,PME>ZH3Vt#S<!j@_k!`A
%9t'>k;W&"l[7_n@Rjn=3kTeAl,_<8Xgagc!MDo<-d`-7"&Lfn&kg:>>UG>V]eM.-Q4i;2Oo0)UcqfBp/s-<2<JjNfC.DhuB.<OMX
%ek4XVR"Dr:G?HX$OEMF*[qF^YB%,S=kWkpM!eQmOSn/r+=]orIe.TO4:>I]8JmaE6"m_HB!/@0`1:G1j_@[p8'+.8Hq#O*#&!/jL
%i&4t.pc\grLMg*H63k`@O<Ehg)^0[D,MCD?/U2k;(%'GETb1D1:(EGY4Je^N7a<.c[Uhs&Eu1Vc,Y!tm+G4-C)tmUK,>:``$Cf;+
%K<GO$U^9:sC4uGe+=-F[(HnmDbDT9(&>ZQbXq7_iLQ(;P3E<;FG0)sE+-Pk#*!g&C)!oKZ-uS"oeuU2S)GN#6@(.CO+;ZV!!?`$X
%W%<jB8+^*4'H=Ji;/WR&&-;JoJo8P@n+(2-Uk]"@$Va#tTqM`'QmtQfMb!6GhTE*.L4+eq-BT@^9`QE.`QM^.!iX(B;naW2&Z2Ln
%SGbi;bZ6RDjb;'+n.m@![T(Hr5?1]s&Zbq5T8In%5h[\g%-A!!.'\@RS[QlQi;1Anh#mF4pj.HI,6LhlD)53I@dbi*-C;S\Q!(Ih
%//SN27=]Z;k%L+@(Es4bga"KHR.$oSlOfEk#]nn0'k<'r34(9FY"+skQAI1Yr![$`G!n.K%4Y#(G!sf#DtHQ)*4;Vufj)Dp,^>6d
%>.csY0Y:2lMC9^KX0fD!gUKrgf:ae27)]k[#X`\bd[Y13o>j\CXhi+4K'sA"MZC`g?(UAuq96s?hJ;92n1cs)P3Z*c++A)EgaJ%h
%1"1T=O3VZ0`$@oHPuVYNP3(-Vp&pM35'QnZ1fE3*lV3.`r>86u@05k'JXKJ\IptNu)fq4_7W-f_068)JE"nnMf"n3m4-1Z#g;1fX
%>pHl)h[t5q"6DSr0?]X)o<I1hUmoAh/Oj]t%sHHs/irb?fRo_^$)(6GAZ5T#X*jP+Dib1%pU4,9ON#RV4hQnp#[WD\'Y8i_LAP3<
%/T00,L-6(#LZ5NJ^((_+(qH0>3I6J6]_sh58=.cd>_YG=OZ]D_65_QDFeG\&$p3I.PFR+NYm_8h:_L'`@s^[-0o!+O6BEgFc!_n@
%FrR.%XiXGDq.]4qO#m+Mg&fUL&S.CBaLLF>k3%bra<'4^ed0#M1=Eko<VSb8lB$4;K0XrqQMUnjMJ'b-kV/XJ86O^@Kj8+s[+)&g
%ZLKg:Z5e9U;0"[47u%X66gs0pIp"&/pE1Fq/0kE4j,C$dO!:L4-b$?o"'j1]2u$$WF/8XEh4jqj[SV]r#&dPlO,o_'[K#A!7ak"J
%C;oTtNkGp=>O;*8#'mb/Mf.DWO3RM1<m;AS@&J^L:O8:oZGV5_kq?.)C1B-Ij8/j\Cak&*6*ACP<8X?q%3)"tK(l3mhX''>Wh;1c
%9L#-t"#mt)FDgf4H[aj2HV_q"\*`%I`sJ0Qn>]3nD?Msb&rOZ+_rE]JBU08@^'%JJ"IQg77g7S5>BoJT[b(D88\Q"RKmqqF&A^:2
%j0o_5-Q9$:6[!S8)4umBUBViEY-U'tpC4FE.4+UeclQ$jPlUnuN>C<F82)F%F?=^=Fe[Wbm+EU!IY5MOl0=J@;Ytiop6klF6r1IS
%FCrRQlms0/F9t?O*K3.HfJgmMH-)1l'jSq".-C5mp%]iu8-iGJ`Op0O$[P0'ctdapfU8\AkHoh2gHnUC:$sBDn]Om22MnOQ9\t(X
%lC*enC7dQ@'fl,5U.s$kfnQ5@RZO5GKFRb(+I#KB(!H=S>p`,t7h8*n\k>H=YOqX7*LRBU;&CcJiY;"uB\/VQA&.!8,=5L:E\l'F
%/5BMdP1^=fR8Fhr(4(gsV%ks03ZU27-H;d(>m7ElM8?klg`Ru%U0=^OCC(D`'&TdUh;jGjUoNm,fTglVkYQMIFCE+&X1$qq9*44c
%M3D9u(56A:2=amUgeOME'SuQQYMg0N%#bSfc>5fX-dLTB"haUQ4"VQG<H&Fb<O^H8DY;=ol13j@,KlnLH2jb;nTgj'nY%Y<SD9*4
%R!P>P>TW3UU=mfIYir7F]rW([I"O%ck=s9O*):7m'qit3';g?Ii(u?(KoMa<f@752&E^hqeeB'1C!!PIZWNH,E3Ek?ef)<Y62'X;
%7(JT`R:U^-Es!OST<PFpC77$&g`O1r<ZDPT6aH"fHb(70KbaK,ThI<A3mjEM2-RO:G=QW7[E,ZD31*a9]$Q?MIrA\:/]\k/cn$`t
%V5Y-9Oj$=>N-AriY4a,5;220CHJ@3oM4[H%YiO#omdFCG4)/rofji"ZI#%[a:)nn&dBqQT;)!:R\5h>pH*9tbY1s>8&]@=8`7i!1
%'[A*'!]J,sb'L`;['?aup>Mb!5JO%RFs7j6LNCZ_XrF!/FNBt4Gt&asi>7A?-WltH^PZ/FkZ-4EYu1C?Ta[F^3mjhG1OC'a)K&h`
%LZ[/t0=HTmle4kO7fWCP.XqOBSuKV1("E#N#<IIn`*Q5]^_mb];SiP!:WV:mpQgeu?-+\;B!LDdAhNMhV"<k(G),.5;n&i*>s9Y4
%13>Jl/BI(,L-n!Irk0u>8V\S?[9Q5<ibk5<nXkp+nXGohShJVQr$"TpEos3_/!B2u!1=.k6V\GgCo^rc4ZPE=Va]8KdE))M(9ihQ
%be6d$q;=^5btU2E]#4hL]o"1=R)RY1R!!g[/itT<k[Q)ncR6k*\^u]7ZGshI^28\>UMGcAX`lpc-+=4bFY1ZQou1GihKm@%l<PgE
%(i_86kI!Gf,MHgZK?hHC$EfN9lFmhlO,^Vi8fih[._mTNWt"I=K)Rf.':`_A[O)jm9PI!D"%J(8Ngcug2dHTfqa%=K(1cgd[uOW6
%?O)J5NT5"oKH/nc^pi/[oO7H/I7ZOP3!Zpmqa-ch*MTeM6[r!OTf_?O$JVl?fJ*aIM?S`J)E[$hZG'K\UfB+pbr2V,cq_-*mZa3>
%+,sJL?rpI.466nIO>WYQHPN''>Le.qc/5`>7riOLhA)Iq"@WHQaao8^:)(P&P+eq2pScW8,A[;[\J[nb2JD=-+?27FZd5Z/UL(j!
%B4S0q[6o16.=0.od@kB$Ah2L3k4T"dmpC!KrNR127FT(J?[]X$m21g6kbM/D@?tW1kjY?O\KN'mnD^56//9`Wq5S.!/G.\JdDfQo
%'G\T(CX*JKkIk'<<mSIVF*q/RFIJoAe=+#Sof?]fl41OOY_O+ZDLML"oZr#_r5]p7'MnWqb+fDVcr86S!kVU&h+3FBa:StmA3^Jo
%F[PY]PE\IR.i-snTEgn7N9HD>:jJ1)hLO'\ojY0*^cg?<+pd=Os$k\Aed^#b=]30M#Pi8c<)\GLh?<W;Y2F=.)g\l;SJX_7UMaY+
%Kte7P54Fl\9:dBnHVuE`=Y+m9^Xe\<mRHJaR3b91F3N1L)g6K/"fi]%hh%1UE.Are$TGgAY^[\%*AYR[D3=ru#'HE2lO&%B\(M3g
%Ik8O)`<V``K=6;:#M9c2E[1h7iNg*lcAp;A;T05BJ]3LjOIBJ_(<s/XDTFDkFG3-:5cCk4\1WlsGWqYOF$>i;E9J9`dbYR1Jj%?&
%@`^/TYfA8ng?$;+/T)Wk"4s)UFer2f7f3u/RIgRH;D`We2VqD"+0+t$L56K,o#_5)M&2+8[=#=U$2BTNLZBccUs3\q\h'LOpD>e+
%Yb!u>,3UXuGLL$nH_JCnR[iBP165.!_<R%ulI%=KC2KVt%X:-%.Y+eM'nd4fPDBd*(K/3oF%#o<.F.$UXNH$LhVU9X4ch0dWNh#@
%P_-(ZKV]"ibc'F.%W*uKMp%"m$QP),Iat_?RfbuOOAik+j,[c7k';iW\RaXScNi)6(D-poMZC<G`<@MPg8@h.b)MoIPbLFS^4SbZ
%f;&0^00X?;p$W_H=5PaTr=.IT(sIl7/O8N$!8bd6$p[uq5!!_p?m,,\nFpLW'd/HW$(p-"jHcC4U;GB8XKu7Caj%>TkXO=M(Jq8?
%'4g!@(;^p&kSp.;M:Ct3#RnXE&4*nc=%k[Z+H/C>ro9t`Li!L/:G]S"@P!"#fSuT`P!I`>gdp!%W_CcXJ?Jc9/nsU\Y=,fk_l6[J
%d4YJXp'm/Z9&:,,="QN".TR[E<NEjj`tPh'N!B?9;/>YEK!>jP.,u:6GD4csOan1(8.c+/b":m?L7MoLAlF0MSq\&3bE`<*/YL[/
%[[?9)J^;.%9!X0'mol^,kuEWV-CtIX7BZ)![%-#X9i1r[<dW6Mn?tM(`[sAYr=00m1kumN95@AA',:L*\5H!m!FZhG8PgN<i/%u8
%mJnKmME*U\![>;%.@c2grUAN?XSo<+l*I66G',\KNG^cQKhOL.g\]im\aUT5LV-rX(^fi@;/=5Yo:Y?m9B((*IW6L&S1fh93sO%N
%A1B^PfE-&aWmg]>@e4jeL'`[;[t$/6]Z/j74q*>=!#F"j<eB2A+EGi`&I;adp#1<8W]pE/9eb]qZsj'(7_"MMPaCJBJJ9[Xr6%EW
%h\1;b%jhiI?Q<!<7(^tH:1l:,B5MXlWqcJ,hBJ+-UptWM=E^^pq5e6ok89nl8NS6(V-REW\p=;jdY"Ka/UjHXT#pZ!cd+qdICb&i
%Q+BtL2m]RP/S:F:q1]i3dbG7r`N8N2hEBU!MZT0"1i]*0"VIst@MNb>8Q.CKi$9'!Gnq]#U)tC71/ct3XWa-$c1NRKlX<fTb@Y[3
%/M?MC>(GK&[8+1CY3##'=A.Lb[<BPZd^=Xro)$_]m!RKEIk6<#[=\^&[_Sr9bag%KqugBLW^c$T$.>1j3eB2bI%H*f&s1nSV]_10
%Q6;tXVIR6>=@,p(hNTB[#\<63k4PaB&kpT^2nYAY09]n:TH+17\Uh"H#bK]5*bHG/_[Na@4>DCd4c-t-V0="]?n'+5>6DpZs2l:T
%cY.ZEd*/gVV.;d)0;eYWY3Q8jH8cA<`FO<N$VHAGDZl@/O9rfOW4EY;r?`f!#\AU8irDW@_2ZgnRn,f)muCm!NrUV7ZA/25LHN3T
%12Uh\MY:X(hC!]sAss6`)6Q1`m]4q&/Hur".!d!r,?5l!=\A@i9(r'AdN@9n\:cN&Q(T2ZDSZ56o>F,G1]3:'nJ*3,3`diKkMI(,
%!)tNO@$G*@s/+HG'-C2SbX><ko#`m.;uY_'!F&t"jmPGsZTKtRC]^:n);fV2o0\c8_#Ap;2SEC$GWm<AWL#sEW4"Fj8`#(hW*aJ!
%pER?r?.VZ+W9@tQUhs"S*0o;\/X\nS77Z"X35#J$_1daXID?.(Z[`9Q]b41Ed0#Q(*$>G--'X/oWFb[YL`UXL4_M^-Q_CuJ25gbB
%8dUU)Q\GKI8>ZNn%N9'nMRkc9pp*^s@lni&P"CnL"enh3&YcBR]0-SMWE.8Yg+&oQN)7TOKP5\?W!,+!L-;";^V(LKo3WKUL?X3G
%+cGTBZ<BNH&k.\c-<Y71aWIHjJPK2#]PJ<\(VPe5OP.#TeUc+e\ACB5;">@FI0iH4g^+/-5!_+6npt$1Vs_F!X4CZl,Ujr_KO06I
%nH_sbY)AC\m,I#5Y-Zg,\K#7;!$.Wm6E^,=\f54h\W%#JEnWH6+D&!Nd"aN<e=dQSokn^H]G9DY5/\NuK"bD4+tNj/h,$G/`uZ@&
%9Xe$(Ml^m/+8W?#$k.I$Y]DIkKo_L03aEgt7eA#(MHHeG4MRD5oc^(JH,=Up;F!T-Zl0WUjA-$uaFf81UpMBU_5GN=PL<d?>RIHI
%[9Z0EeU;8ac7DCs/VZ%(."/b12C*<qIh4_ZK+BJ))MAKrDTe$=idRZoD2n[8Gq'K$--S2pYjZB68U7f0T?C4%>_<oVhDZiXIGTgX
%g@];3)O:Q.A?-,n"3Ae\p5YQJJF^+7,O!$?"3i]OMZ&c\R>d8F$YQPE3)=k$8tb+9#nI'H-kBt8N1OdJ6c2)tfZ:_IJ=>/Y/d(;c
%2VS8cRL%,n\.sssXmn%+PqcWb[;5]&ld#=dJ.ib9k8Z*!_f?JJfeAK$<p-s;82"$-9:J[0"L#CT%-C\"W\7^&)WZY%$n79mTs0Ft
%Pap#-@\oHCl.R9W2UOPF-trH%<em)B!9rKKfk:qcpXjY!OP%C3@;XIV^0$_Il5A^PSSfis>U]hd[RHke%LhchC_WBTqmHa-$["B8
%NE(u1)6(2,O]SgEj`36Y2@j^o(?*f7<]EU2ru!slnh2-C*Fou&;:sDR`5uSc8@SgZ,/SIfp*m,([t;g.2LK((X`#[le[KF&L^\lB
%NMJ8Y=7VC!S]HGQj[+Pu,%F11<Kt^:q_Wmeg1[obBbs$PP^(#X@G=aX`$U[&+GaF_MF\0]WR\DL`Bk>T+e6!`bW0'L1b"sNj8rK>
%/Fp%'#_F'+]_s667kgOTT]/G:?n@/s6fQ.De&hb<LuO@m.4uPkb>*&40M9Z%No2"m3]+F=$^Vs>KPXiRSpV6J8#`.f[@0e^9)78+
%J'g]g*UQ1LbLT4sS/j>I)BlFfApB!k_@-[P^sCl?SRq+,KW/N#F6@8hJlLGRbWooU11OfCYmKln:mT=:S7oKJB6VgZ<t*+/KR\dZ
%5@49`B]$hj\@OHce\BYT?%BBF3o$S<9$`O[r1>T>J0aGX1q3Cd0HUYDg6")5n/#"aDlTp1#?-sl;WKoU2/7).?U>KsKFs95:b)6H
%Fo+QnoF)s%K&sn&rCAP1,MG&u<6cpaZQ)5(Zd/@cU&(\]L&FZTg7Pe/daO[t)+icQ+2\O-K2D@73EUa!/0F^6bfeB"o>-n'+XTW*
%`8",0>NM,[f#RQk2JlR"_qlHDai1l"n=t3a01NCjZX[jn0uS8&]JI?.j_FZ]pt+7XpS2tkKJGn*'jf)HJSqk@pdOlnT4kS?L_Bq;
%&!VA0!]7'*>:^Q4!4sj%&NZN9!#6j]T+m]F-$Z-,gpEK'AMcK.,,A^6=%[q!0m'!"ZcjYk=WiCa4LJA4#s_@KG1GR_CetN2]K8t[
%'ILa<&:j!8b80G.&nZ)/U.H2s_6CsK,(>WV";"kEF?jtEJs19dklM=n8[?9C-Q16Wd]PG@E_C*;>C26Z;*Rf)dQMgOQI3/q5?H.]
%6E:mh(H$q&L$>Dt:r$d1(PI/Gj5T.rIF1M7rur@$/&F_UKJl0Pc9%8g0'G^T\%rTlL*YAe+ZOQ31Z_E^d_i<k_3j%oI^r4`^Mja$
%f^\+Da)GDQ`GWp_J4[B>[riV6!=H6hVtOYoj?1]Un$n;W.T2T0`a\5/F2raBh1;ccRHUqu$?Js,D'rqfK]8]&,=A;o%HZ`bL)%qB
%B<u(\joM<EHj$P]>Bf^Mj-C-a0"S4NY2h*lZ&4KZ$>D&bC9FdO.sh\X<8hH@S-H]*fVciuDa?l0TjI+m<^aG<b/".</@70GK*oa1
%L&rWK.b;H@$\0/J-VX84n-VQ$;S&qhj]hA%nN.m9a+P<)lg66;%eh'n<%79LO^LAN0>0Z>04po.(^<qNp]AL"MVka7f]Cb<CJ)+I
%1fpgn@DiWfbu>Q^l'#m2>q7iMXf&EAV@:g?Td4DN6G2YEf3%cm,hCo1noOQJqnJmHi=eg=*+3i6"QQh2ZmA\1U[T/S#H94?96//T
%I:Pq-6mli`f!7R`DeJ6oe_j-LF3VT37_#'WQ0=BEZNMA!CUW;)9!m&Q;JVTl,jUmE,$HXUf&S@nMD%;-M.PA%@L+p(='23?3OmNN
%dSiaoa0u_N.2E]1TCE3#)8=/o$f*cYC/DRY-X*ZnYX:Z"))Y,JL2TW1*Q1H",6?.HjWF%NFAm*Oi5/T]42K-=k!S_a(MGR\C-fIg
%%Thm[(JZAk4.aRJ">r9n)<]:\b^S?j9,<V1-a(6*k]*J>WXlcrnrrbG"1hF#BqX`D1&eK/(liqF+bgbthT2u14kAt\2j]2a[iTBr
%$rlpL<)+H!,pWN6^4p%%6_l_!NsMC[[aU_sF,>s0AU&&thd1GAXkK])jgT'gX%7JU[-:5@70]Om6X#Y-+lPjb97kpCr,@23pDN2-
%JS=>L)06DS]*rW.PrSGVi5@nW]V=B,!`6"qD\,.8(Ahj@Y63nYlTLMul<3m$1h]g;60W)/aH\!da(L]'>j`rG!%kAH\_oasW0e3S
%iU@+Q(SNkfr&/CCL2)R3d-15aCX,S2oC@na88d=u+C?67m-%)UCX92b?IDjn9L;[d^7[e^@;7FUj#6B^1qUt>?EoinRNWOsKG3p9
%:\QZKYrX<5\neSkVu?]CdjOSI2PmVu)XGrE$bA!VG$29K-T^.o\G@&EbO8S;UWk#q*GZO+Fg\L*4J6I>(V"Dq@STN6h`r8I/("jU
%"u5S5nViR)Dp#*%Z3Pbp?!PglEgE>?.($U%p0^Wq_5Eu$O7GRKfEmgN&*1sI6n%mV\gd5ZZ8\L@ORmod8.,D/eL.SrPRc.cqc5'=
%7mYrhfE?;`ZiFq6l/'p70\%]gY;m$T-Xc]n7L9>)YCPtWPqIobp8tF,M,LYfEu;o#TG[bl;W)\`$urZj9OaBR(FX3EJ.tY,&7.L2
%bs8JJL@EB&#1n2V1I5JUGfmOiS@u\-I/DCrI<LW*RM[`q+QXi'R;FJ*lD:#M!9F>KiWVHn_!5Nj8T_n2!L2CU,+58dco,]38<4],
%IFoYkKau2MM%_`R-W`$8pqLno(O&Q-0PS,-YUh6iB$QNE_[>tK8Wo<I&?fM3-oW`7b,e&Vf4'h`I[CGJ`1^I>pMYhY6#r3EJMSfF
%<fU'gEW1S+ULb+C<FM?.)c`+f/1>5_Eg5M$`JEj"T+G)?;snTJo8(]c@*Do=AAs5bPtS_5l$Ana9Ta/gR&OUk3`?%/*3;38Er]*-
%9gGc&<?AY<an?$@1Jm)uoK\eY_S:2S2gEkA;%t/nJo04G5edHlH-e`dL*NG@mt7Gjne*(Y>[dQA7-((5T([",ac)l@?&P@n\g4sK
%a<(+O$c=AS\i=KKmKo38Qu77N!X+-65ftE9+l@Zn2-pHMiog`,g/E0ldq$WCmfFQDght<f>LX%R`YO1L1E"8&Ck1E_\K$P"jtB(p
%G8*OK+\*_#])]BP-NU03=eXhj'#b_UBOmSX-5/h7DskA-2NV=)Gq3Qc!H/+&Zi)(H(&KmF7P7Oh5>o[@Wet,+!S-2sc::sA&RPij
%Y[rV,-Qq<4aWAZhX8MC_$CJ8J=gQTmPI^Bp?.SmaaE)9ap!?92d*bdqR.DYu@bee+n^6^ED6ec[rM*+,G*V^&B9/b;&TdG.`<,f*
%=Lrl"49i=4a!=tBJe[F4S'CSnj<>b8rRo.<H%;]g_+'+ri<e%SNVVs0.Bp%=1!G5(M0cNmai5B2SF,12l=FdbQ3O]IPt>LA99`6e
%`C;E"%3@ba=ge<aZC3U-JKW&9OW1]3"9'JEMc0g7;hUU>afU_/_$ch,.rdD>a[`XD&[J5ai*dPB*g0KF;*fK/`u_aRl`gTY*]&ap
%/b`k=C`0J:ZQ1^u8rE!klqfL8M$oWAEu:9]a'r\M#AhBY^AOc_[Z!R#bbOfV+O)Oi-RtU>XYr`!4OR9:@69cepLmVg`8jg`nqrJl
%[pdXtD=*da/ubbi1A)QP/2iD]ok<4e\!:G7X_D<<o-@!],N'3odk7D/d<NGMBCe0><l*dm\:CTfKpcU"1E^[/1q?T09TM<(V>s0]
%cL"S(()Zo.X[N,o!RuN7fZhXdpWk504NN%H#Dk$&[X1C9@:?ce^2hm]Us0E;0-Em+W:Tb\,0l\=I"R0Br3H5QRIU9/+^]cPZN/;(
%bYPR(BQ]@2Aj?ULj[UoP8V##Rb)Lrs"sX5>c/^innJU(`<l5lf=WME<*9_4]dB,dX@jeIO@jRQSlo%8Wm%mQTfi^3[MdDLLm9[3L
%2+Rf)L_#mjXE'f++:`(WqJ8XSlL/d(G>6_&HsI^6lg]Rt$8k&7c9b7!"DC@#%S<&BL^0:<,r^)2^iT1_6F$_n7P]]`h*C&K?0k%I
%9:at_Z'<1Wljn]kooaZQC`(VVmmk9tCN-G8jOYp#H,`6&MD"]tLWI-Q]g;QS]'l/aY62a7c'EfcIj\u*3P'?h@b=4ucZsPDn$n?2
%(E&J*F=<=OG(SDJJ.^!SlaA/[rNe9Hlk<rfD#;dre3YUSX+=pORg&AX2Ll/0kfT'rQTe4;P'dAS+Vkse[XWqh[Z`;k/M+c`Ol8Hl
%oVD,XiB=dBM<=6/hk6Hc_OIh/ba^=K(O)5EL*GkML,b&0#UGEZ&FtcIS=3/g[!>$!b:3GTkeFE-(X5#PU=nVq19=+X#]M&-6E\G)
%7P6-r!:`g8pd%RZ_.D=o7UgnHk569hA3`hDUns"B&'4C,J6]"YTdJ='Ca>jk6*lE*/cc#'a`s3@Q@OQo@(?tfHqG/>1t_R;=H_)W
%mfk-RmF4;G%)XdmVHV@An'EggTE#FIT&s;e(5Nd9O.C!lQj;,^YQN,"mm'Srm7/A"g\SPb_FtIre,4l@gGR3J$qc%:,odZCBQp0O
%<7>s4Yo#VDo]>!$/W<>$[cR+0ar"D1D:"&=G)l5V$:^E`$5*MM$eaA3aJ=IsDpuu"hU!jn9DQUS3+1B(DB[;kYWlCp9tj>4p,3b>
%eMnWALB0/u$r##ZPMo@N./r/0'bJ'C9h9l'G!O@CFu8bU6a[(raN.bWbuQpV7a9IJ<A#mqc'O/sP&Ie,/<.*KB$oVkM(6UN6u=tX
%0.IQeJi$Ei2ES[JH[7Arf^u_+(s+3G@i'4.TB*;^9>9=RV'"g'/[P%3a?X2rq6qd[4,6DTMr?f2McM8dVd(i\ikpXk8I7!mqb##T
%[KdX6fHbrObd`.cQ'rZ,.#a_b%=%C$DKGo<HJ][75!os7\^kbUAhBsSCZrt,l^(6g=&cfU2m8\\HE_P2+fj"l_Y8X6]1aUD?&m.\
%9(^k%:mV?<R"ZTgVY1p5+XL4*VCPI)m##QJ8!o]&=(c:rB"s[@KpduD-`m)`U85kU]puqp_?Taji=#$8b-^6,Wc)eoqB8Wr9rtR"
%q?@i3W(U3/jijfsD)<h\Rg*u[e/DHV_q1*b.5&WfE4I]=PGE)fIbE`*@5hK6rVm_dNuLbgqq/2n`rjhkDet<lp2.4<1rND]f4'Om
%dMoQ5NWZ,?Ja,kJECNktf8j2,Z2*A;anme^OH$G8'nVP`4+d93@O0+H5\bN'FDo(%XDJi?e^=s,32\(FRtm`V&CW%o$Q"t+^;r,q
%5?9!jBg,cgnQ;?TL`-(amWG6qG5"CW!iCI*DDf4Lm>D56L2M%d<l98@Rst"WZa]-q_]81n42.E+c_d=*I5VlAj7n'e;*><h9#Dcb
%Dh/&'5fBNfN!YpLW_8nI]E$dSg8.#iM1@!,lQdND?'4>YdejjkJ"O['iU5`"D0`/T%e6H&>FoU%7l/b_""HIDTE*XGOP+Jg6:R\D
%H`BS%m%.?#?cB(Z19"Q##UNZ+$W+3F,%R=/TL>g'<7B>'BWF>Pj99,d!U5Wq&B[.OqnUO)U:+?PG>?@f3W)I#d5RKl0)0iLL\YNL
%5!b(1$fh9NU-5\MKZ6qd9WFKCpK#Y"Hs'b,pmW]_b6iY(<t]kr_ttd=.@7>d%"h]-'$/GS+e)YHPs#Jccb(^L!S,SF&8n@tAPnuJ
%-m'N.E$bT6mNcC"*QGXg9Xa%"*9;0%&6UoQ&&OP=lSCuiWB:7Lb@GNR=XP(0ROf'qBhsOKj7]UKqd*Y,ESp(hp[6@S*QIs3Qj_H>
%T*"E!hU.\:&UW3X1tI=K1Vj+AX$'GQOV^AM"K^Tl/.Ko0AT=bFU&:=qa^6Z?mdNk;P]>5F1aNH*#3I4hpH_(,[c_B]5`DHbaNZSm
%[d$O!QV]ri3&t[ZW,!22`,CRNJXfYiOCQDQ,5"31/u@XQ*&`Y,Jd_1f7]Zl1H<monMJ.F)'sl1RbL/GD>QOX`+OPJk^T;ljKk?>8
%?2[Ptf2"rWFF`*Ap8Z(=;HW"iiammSde'[i1pd$8Z8=Qsm:RO#QcZc(M3`G7UId:U4eFT??jAsB@uLFsL?$0pNnEa<d:MR0"lTq^
%W2=hn2'Y2UaZ253:bIC"jNYbV8>uE>1OF(ZTTeohI:2EN>+S2eCX2RYRFi%r;F;T9P,^)CZ]UuB-tkPaLkqk7ceU;Qq:o;8#Ze\d
%<Z&.S9!2!cAH6r/n3V3L@ggQu-l!*272tZH+M$&G3utiO]ud#1(mMF):btknH`.nUEGu]r?O+*C$KOY`odNfko[n%f_9Vhi0X;er
%?B/I.\XN_R\?%E3LaGW!-bB/?OoNSfneU&-]X>1jq+Vr[m.1tRkG];!YcL*_NMJrm$[`8nb1OK[H1^Ta)&e?B70NlNUmM1]jRWY7
%L$3&44D*'uD$]7GMgYPo=Uahc),N"F%Vg:rZY2Ak\AQ'7%mVu@cOi<F:[!u8(^E3-(a5ELl]R&O1#uW:-F$e-,%j+?V7PE=0a4B'
%<!hd"*S,#t[:18pAFLYVQ2U2=^L;_8d?Cl;Z/Id3Ip<p%?G^`D:8iO<!E%hj+@qB7e__+kSJ3/H(%^D<]\H$(NCZ07F&tLDN$J,%
%+cH<lR.mINg%r)S5(fFAqmYS#mZWY:h,iAZ*@V4V$lW`kH.po!er^b/[<'p2RrEtR#W)OW(Rm`Pa'JjkE/&TiAq7Ge'])J!5kPCY
%2p2l_W^Y2@d[gLZ1&;=8dcWKPGA!C2A7R+]SA@j<e^#\Wlj6pl^72^LIXKa4qZ1)o63W'5?oVo'C^s="+o8WmTL,ED;]$*NN!9[1
%*5YS*@lEoR9lsqlPnRtOAWI+<<A>H]`F=B;6;S^J+=12GRP+[2=D\I#VM.!?q?7GB$-9%d!tFKnJ_5nd*d76_*VLLZ14dMD%GelW
%1D$NS]qb@amO4,.AbRZqnCKb1p[cQuJh-19-_!6G+gLf+i&r+V4-7;3HF6R%rHH5'H4M3%W4h)*hnM[TBF`UZpZah^dH4cQpUo#R
%*BH^flR`SF+I3>*&3SCr(ni@Da[3HPCQW?$)f0FEetrlE?VjDfjX?ccGnQq#=M(r#g3:MG06GO4TM;J=MYP&5NQ=ZpBV]C>DMhWA
%LV\e)"?X!25[s=r72&okpT;m'!(P:kI&"62kW=EgkMu;af`l1^P^OZJX6a2"(1rbJPsfGt5ZJ#r*u\.8%iEY:,`$l;,jGRmZpBIW
%0SjoVN:gec(7UWKmu1"/4pnN9J\<2jUrrfj?'(Ek:bft[Ua`Zhn&$X`X[m?Saft98OC@[>:n.A^(&BP0O:"D*oGX,NNo.iaeL=3K
%TZ_tRdMC*IlNcmmXG6Xg^S&_@4])h9c+QEd9i.O0'\D[P,47X@E8=2*g"%D^a/pt6n]I[IjumtI"qi8GbhBL+9?X=9@XN=<[C*+>
%W97;sfNZDJ4h%tGT"cTT<3[HXDo7T=s3:Mc;/W]]D:2s6G=0M+%Z$GW,KMQF"2!B"P@e1mHi]n=k6sq.V7@Vk?lhs_"FZ]72\/M*
%b>kFK<l?p;B)$>?$J3L=_!iQh-AD.>%5N,UkY1SD-X%,BQ#/o";6#s3oXGXjZdB*9/.;Z*Hl/;aq0)9.J3\Fd/OIKg:%[&l8bupU
%5sFO1Ai\/7"!*s[G'(B+[dVRQ>E!/3,i>A0%5]G*5G@["q:a_u2+k-cC52G<m[1Z6e[lM7hKSPbW7=-Io&E[."hMSG*iQsC4.>.l
%=*5"U3-7mRHak;M<=8UL%MKa5P:P*lX<)tcLQQp82p5UFSW]0IVq5>>^r7]%c&JL&a7*V+a<I'".FkQ70c[#j&Wjj?PEeZ7Yr?rB
%M3S=h;[6845f'ULR"UPfFfn"0=)dmaHFp';"F:MA=E7A,O^Fl6UA'D*+%RUq"bt<Y7@0@f*a3^6RLKe6%[tuo6GkIGdGm4q=W"7[
%&u"W]gu4[92Ye800+(.UYNIk1oB5dORak+MXUi+"PjYFDNWSe(Z?U?)b`qOE`5.D+54n6P*,XWPpPn@u,W]Io\Rm%e:^W8a0$rCB
%'hhHP-:V).l?Gc!W\o.iq-eaB"jomo)`_En'(Ypg4B-NXa/jdD`ab2U+PaX#IRRlQ?dJj'!RM1mbA_iZBZ=_pFRoK#&2\*1l(8#_
%07k9g^E)0o9jtg8]Jgf#a,m>Ggkp^"V!B"opB1*eg/3_h(O*PlLc7W08dlKu!T%&>Ve^DloV".[+?X;QA:a_mF`k\3hV6#qq<4D!
%,POKSFbT?*D/hA<7@)pd08k(oEp9,o/fp^'9h4aC6#4nlBIs`bc]s%4YGkt,JgrEmItQ1<SthTo.p"5a\KT)F\Z@@e8u]/[7<o,/
%6eQBCHZ0EkXNs9B\V9#"Noj3<Bq:6?$B?r2JE,-N)pMZ)k<qTglT0F*F71pr*jM*L([ghbRl,d_eZk%FFKk0SNG1U)-[H>Keo5TA
%YP%mGIPeVF3b)<"b+EgL*&F8O=YBJG$+6Y2I'O67%k0U-a]B>h.LTDc]3ltaJB[^@Qq=!")slpjHN&GdeJpK3CLIdKES@$9-\G<u
%KeYAZ<,'PW1$$ZQ/AX\$'U!Ah%pF=`6Nt6\$[*iEfW/e6dX&:T4;ci<?o*f>)?jrV>q7Ua95`Z\:inuDC%?LH&!bA+mZYl2_TZif
%5u4!(pIRFhcE;T].-st&;=;sh5J_KL)s=!MhEf(qiO<S>6#M0f]TtXQ3N5OcV-(h/[m`F&_m!(mnhjZ96^eM.lS*clP@h?I`\tFB
%ZB_+pE"pf2frFXDFggVZDfp"OdPZuoRZHEFbMMKhD%<K#[Ym%!YMJ?iZ#*()['+iNA'8^+Vcgg?ZPOPQ$3VdA0eo&F.3OOQY5AK>
%HY1lk;!SMc/EJ$B=6:5r76))0+n'4*>U6GV?uiYe5[[/Y$_u9&O+RktJ1CPjnibL@JoZjWU_)oJpOmA=nBH53Lr4XQR8A$smbs4=
%RkbE>rEC]Xjri@lAbOM07Ch9sK#QWe6+lLOVE:'JGE0cF+D]mqAK/#FlQ*Yb@Ol+c,)-Yi2RC&9kK\0`YTr_r4p5Iokf6f)#IH-c
%ecnUXg^+5;]!;q#;EIjMRlo#-)Rcg5Z9/`rSt;%G$1j/3$X/q=<Lp=kZe`1[B(sm9S:e=0M;H:a(;#c@gCd8kD=;9ThDUct`N_]d
%?!m?mO&CXODIsmaY3Veql0!mU5p5>S[?0k(?,4PWrqd&a/#o*a'*Y3+A8-4*0g$6oY&;ZC"9Q_RJ@[R(5mg.47P`W^QK<.DSl-@5
%[`JXgW'$KXD/k76P`'HM^*3SUG!P;JA8VRX(2#KuMb(oE2UU=A3ZrD!d,qeN/MQWmFiK7UcBujgkEhM]D.`h7SMSAW#ETf0o*UPD
%<n7;5'T::.eU+SP4M>/p]bCpM3=a0$r+2(S=?eW2Ar"O:"u9h4'3f6_:%*a!hCb[">IjcKTa!aUKecM0.)j]qL&u+1EX%1E0gPa1
%S#0m?`jH;b^knU/m<%[Dat`3iC,A<O0BG(:pR<EHh7!`XG$on0W28Q2BK;]A%SrEkmgB=-G.X56j_m5S[7V3\s.q'nqVjRU4"Q"$
%-nD>Tb8`!kf6I)K;&(obI"J>N4SPRc/(\n0g<)@<oJ^G6+fnY3&pWD.L0;&<"l;XS63i\s0^W4HllX`MLt3pl/YY%B$Wa55:c<Kn
%k<)TF$"gKhVPe%UTWlU8[*bsk:[]2>lB62(JOZu>4_mU22KOIQ1\7OfgO8sUd[0i."5N(]9-:+prZ#n.6dli.:oSLKddFaYFS9OC
%+9k07j"";gVfNl&_bM1X=!)+]\05Jod@V@"BZT.*]cKN8M*@6YYO+%IdoWJTn1fA!2&YhT'("H&QR1]ImS><\WV>!dmtcSjWlhK&
%!#7klfhg=+%DBuMBG!_K6`gP[[fjh*0p.tR)6FT="]/:'oq2;'+8XRF#op>k4\KmY6N\IaE%4pFCG[p>Jj)"4jcnF*_T*kR*-%aG
%&;(\dgPI->'OQT>C`*f=%WlA6X\Hj)GX$MDR)4UT$TIC2G0'IbH@6bID,h>iY@C>A6(<h_?g;\R`L@bS:7j,U-9HlSI"ZT3fQ%Q+
%'jGk..L["=J_hD!Ubp%NAU&n3\.RUA)iatQD$=5#fW*[LAi[,7*?BIq6WY[_]S/IbYmnY!VuRT`B_/-%aiCfm)rP@o(<iG`BD:MJ
%rtIM);oGVC:h4nq*i8BrdM$r"jD6r3I,dTOb/]q-_U=DrPuRdh;ojbIccMD1Lu1Z0l`h05$?)qf)/jPJ+=9L7n2O9@1TR`Sc'NTd
%N(;*`NkqFQ)r<3N;NYZnThL.BhjERF?UYGQ]4q;"2YkrS\<CbFL97A1-,X[ra@J`apUst#<PE4#@Zq@uE3n58h?_eoCRLa*BKCC'
%7Oh'p+VY/MX*dSA=+3NafMR1_qD.\`l7mRc,.a^YjO6?o:TTJIZO_%1ZcsEDeoZ3Vq@ZtX[^(:EVmV!#oEL#,VWW9s"N%jll8<lR
%=N`H*CU&i3>R,uS@1blYgAUWt'tp/=,a*$jBJ7K7PRCH_"LArB"`Nr&4C;:2Z53^53uON:R?DXE<EjXD895-1:`4]V[gTm2(JuO?
%_1p&_lJ*jP`XVc@Qh?em'VsoZW"urklnMbM"'0/@j$&=+a2:V``6C^S%`q=[I!B^X,.)9or[a:21ZV+JN.9:DkM-;qls%2iSHTab
%Mq(+&4/'%mG*K(hL@]]C!HoW$kaUQ1nK"1Jds4/#qg_WO)BjtmUYD`IX>_tsb,mQV6pp427$KEn?E1i#:I.n2i]PT]]*FU<*eNf!
%E<!X#erJHN&9C5+p#kP*LLi]jOCt/))m>qf0q6FRop3]@FDUV.a'^hIE.TSMVo"(H5>#tUhgRTs;hCV)c1!:2_a9jf%9>M1\X*^*
%W7cm%:#@ntP07DB.gU8`b=?[_Z?GWiKsHcC'-5;QYdZ><%)^Ya1#E`>?@0M*Cf]:lb*_`:\MSAJ#mlq=-7p\;'fiH_i'>dt*'ujB
%Ia/JrCV@@D&$?Xqac.bsEhX_H]Xsk^/:\s(,h7um<ab?>c;QN'-M07m.(kpfX;l@CA<#<@$Y9QM-]2+eU==$s%/KmndmV8loKI0s
%I:QQ)&&N"OF@k`Z73XpdD1-=N'LW`/A>.7rU,t]J<'.*o$BAgU@qCEZ1jSh-*(N:*/\4q@+`I+mQ;3i\8bVhjUCGTh[RRi>o%A?L
%d"b)"h-L8/6<JA;B_/J^\BH0g59_92k5iG\?>_k5CmLTV9A-H`G+Un=7``Xt&"o\*9Kiij3eP(JqpnX1iTl>PgMUkYA`W/C1m>#L
%5&\Ce"h^^r,_*_J#%-b"]g)&848)"GX*PTRhG@=AhrjLjJ_blr,GiRm0bX',g,n#!C<?l$"4]d>`dn92_nrR>%tHG.LV>UP>LnS]
%'30dQeH@+"6ge<0!Aq/.:R!"EJ#PmV@#"joj/e5L8Y<X=ifB>M@-^NJpo^93:r>2%$Bs<<OO6tg]mN46/Y0tZ0K^HR<%,/>YZH9:
%d11Zflr(B#/!IA\j]XUaC0^!$mAuF:lp<EBk+\,)'pk+)JlB%RCnZ6r9tKHTW/kmGjt;dc_k\7:88i.f<&/B*=(ieYcp-t+Ts;)S
%o`DQh:!Q1g0%s7ZUPo+*2<hot)YY\nkiKlO7"u9kM?C6J@&!P",*qo#&#f:3b_A$SMKkoLd5f"MR(=j&hQ4;\="2$Z/&F9GTZ_<b
%1P?9JN,q*c\P(dp?Vl(;^@\tTN^A&jbMK$)P\tNFBD]nIn-)7aIM<n\hIN?ndLAq0a+9\g3\oG7FLQD1*a'P_H-LUDYIF3(g^eY!
%-;ROZ+auW&8IkLP4@saiPK^O?k8>rP=\oh/!`!3RmFBOXBN8b'<$'o.T-r>LM@:q;;'O5"A4PpDZ@&CZAYV/iP-#Mb*K^*o3qT+X
%oh)[8@6[bqX[F<>,XIWAjUVH.L3elo$rqbp)q?_m1IN[C:f7"1p-h`R%bWi0Kee[?:&-#6*PAONBHW&-IHtR5&MG%?V:fZRDqC[K
%Vb88N!o7kjS>Gs.k>$)X+"Xd1[5>=a:R#iZ8atjK9GiG@e4?/JDbSG]V'\839&r(6>EC584Af]OfrMIC6@6<pi6^>sXl(,;XR7h"
%5<,dW":*,9&2)A.\8Mg34'5\Xbj:]h28#^OGBn:W"g>DcrW*7T)5d!K.M+e9.%^r)6RXJ*QR18-$rtH["C&T7T]Y%A$5S]LZDuY&
%%j$.n%)B)K=2[;sFq(a#]n9P*22k\oA%Y$%;[K&\+uKOPrd:HaTqZa?LH&Kp=eI(!,PM%R2RIfkMcm9!gEDV8]q_.1Fg%nt_q<OT
%T@s5;hT^(V$sqVRZ&1Ho%j#Zb5m0-7g6tlbLoiTlM8\98<QYP)X.#-ZGu=XY[%POuC1As"ZF+D^8UsrY+-]duAXn7S325TCb!Z+_
%\l]#Ir[!O@ht\"nqLMh=DQi$l[bbA,,)SnE@$$]#-^nmg52*$41aG]d^e'3,.\\:%Qj$^=7r:?Iq)ii-M<F65iT*W0B\&isCs7KH
%&@8r$U]#I!TVn*P2V'OuLk.U8?^&_-p(FAR71YJ<Su[IpgM1R`n>bgOHSlUN/GQ.]%n12[7:kh82#"*EB*R4fk5]')?5':-Ju<*=
%Rj4#ScQesMBU="TfC4)jmiMgT]:T;b,<l\QDu<5%b6s8fZJU9H%PQXV8L@iZ7t\d:3,A9n[=5gGp@d[s>r.%pFntV/pSon-r(Z(#
%X(qn4C""Zr%D!'q<q%/8FSsS9*sYipAI^r3ioiM]MMEW`-ouOTa#o>L).8bD=!!P1qQ0DR?Jn;FBT'c1#8cX:U[Y+G3X,[+((gQ"
%XDaLjdipKW63H6HL;:B)YHSD"$Gica/1U%+V@Fl?20?#]U7jZJY2LMq+o3j6?@UU_V>>_9eqJXOdHlEG_R?$I1H8Kr6=i[?ArVhR
%nHHVtUCRWV!f1i0#_a\mKY:bPMnuO(Y4/GQe.BIY94t8H\Z[AQAaLBjFUr_r?)3n85qqOZoDl8^4je]W(t/FFTIRs+9IY;u9C#q4
%3et529ioK&2llAeo;+-H6Essb+HtN5b(W&pr=:24HOnEj?Z0`YR2)Q/Z,!93&\KN'&(9GU8O*W&2>*7_6j;b/^,=E*Ts#gN?\?m^
%lW(F.\,uBakb0MBXZf/XR9JF*n.d\bOQL`h9L6nf*-=(%lMsXb]%-7AeWWt^^Adp[!IlHk^tmDq*'7DW61BGpR_R_nI2s`mECQS!
%GiUgI;$/!PK_,orJuOZg)W%0YBfOG!]a+<#p[Psffrq$I<jUm$RDoZ.>-4Y2RHWs%nOT'ihJ>'^8%jX!qn]$b7CQJg(-/6q`[ali
%-aiha]c=hX\)k:S;:m.Sr^8?VSf'!@:/:CoHNVu!:[rSYn>0dTNWe-m0m's\Z@ZtWq1NJCBB\YLdm@+>Do),Fs2"EHDrJ0TqWGWn
%]=.AWr:Z3GJ)J\Fibu%iA.3_\&aiBg)krrIZ@1[2rol*"9!lg21o2[d$B)RLeL5@r^Wr!BWpsHb^Am<nS+QMK.kl=.*=nX!Y1UKK
%I3.V<5b[%KH&;biU0A*,/]e1\6:r\;3QE`""\n:k,+-lR6OoIT\/"u8[Xu8J?tC7^V9<nkEHPhg<UK#97)M@#)W%6iLB!PBbD]j=
%dbmh0Voko<[<YOjI[!"-D.UbLEqIu<)ZHT[f'NIk#tC2MnoS]ch9eZ[Xb+%?Ii!,k4a;l&Gp<@%SLjZp7]ifV7[H%Kr)[dWb=kOS
%%I*)e+bsdNc`Qp_h.l_'8[,bIOH.3%?FKfWp%_:fD*9QLlWjZYdqf!\ofrHShu1Imn3>P)rP/9r5JR3gs8DWJs7E3.pkSn20E:Up
%s7P:LnpgW7lbEJuhu1`Jr8mtSlYh:Kf73b.s8:&irq6<*J,8P>rr'&#nXojTmsk<'5Q8uYqgX1TU\V_jr54$[a8bDms6fmlg@I9!~>
%AI9_PrivateDataEnd
